GalaxyTrader MK3 - Changelog
========================================


Version 0.5.9 - 2025-10-28
--------------------------

MOD DEPENDENCY CHANGE: kuerteeUIExtensionsAndHUD added

NEW FEATURE: Ship Escape from Blacklisted Sectors
  - NEW BEHAVIOR: Ships trapped in blacklisted sectors can now automatically escape via trade routes
  - Mechanism: Ships in blacklisted sectors can execute trades that lead to safe sectors
  - Escape logic: Ships must buy from a different (non-blacklisted) sector to initiate escape
    * Prevents buying in blacklisted sectors (forces escape route)
    * Allows selling in current blacklisted sector if ship already there (escape FROM)
  - Pathfinding: Uses non-blacklist-aware gatedistance for escape routes to find ANY path
    * Allows escape even if all paths go through blacklisted sectors
    * Applies to buy path when ship escaping from blacklisted sector
    * Applies to sell path when ship escaping from blacklisted sector
  - Cooldown bypass: Escape searches bypass live search cooldown (critical for escaping)
    * Ships in blacklisted sectors can search immediately, even after failed searches
    * Prevents ships from being trapped by cooldown when escape is needed
  - Logbook notification: Escape routes trigger informative logbook messages (translated)
  - Impact: Ships no longer permanently stuck in blacklisted sectors, autonomous escape capability

NEW FEATURE: Isolated Intra-Sector Trading Mode
  - NEW BEHAVIOR: Ships in non-blacklisted sectors with all routes blocked by blacklisted hub sectors automatically switch to intra-sector trading
  - Detection: System detects when ship cannot reach ANY other sector via gates (isolation check)
    * Tests up to 10 unique sectors from trade offers for reachability
    * Only counts sectors requiring gate jumps (distance > 0) for isolation determination
    * Distance 0 sectors (same zone via accelerators) checked for blacklist status
    * Ship is isolated if ALL sectors requiring gates are unreachable OR no gate-requiring sectors found
  - Intelligent profit threshold reduction: Isolated ships get reduced profit requirements
    * Normal intra-sector threshold: 50% of standard threshold
    * Isolated intra-sector threshold: 25% of standard threshold (further reduced)
    * Allows ships to find trades when normal threshold would reject everything
  - Guaranteed intra-sector offer inclusion: Intra-sector offers always included in matching
    * Bypasses normal top-20 offer limit for intra-sector offers (performance optimization)
    * Ensures ships can find trades within their isolated sector even if offers ranked low by price
    - Prioritized matching: Intra-sector sell offers matched with intra-sector buy offers first
    - True intra-sector trades: Only matches buy and sell from same sector (distance = 0)
  - Logbook notification: Isolation triggers informative logbook message (translation ID 3211)
    * Informs player that ship is isolated and forced to intra-sector trades only
    * Message logged to debug log for troubleshooting
    * Only logged once per ship (persistent global flag prevents spam)
  - Implementation files:
    * md/gt_trading_batch_processor.xml (isolation detection, offer inclusion, matching prioritization)
    * md/gt_trading_search.xml (intra-sector trade tracking, enhanced logging)
    * t/0001-L*.xml (translations for isolation message in all 8 languages)
  - User scenario: Ship in non-blacklisted sector → all routes blocked by blacklisted hub → detected as isolated → reduced thresholds → finds intra-sector trade → logbook notification
  - Impact: Ships no longer stuck when isolated by blacklisted hub sectors, can continue trading within sector

BUGFIX: Fleet Coordination - Ship Statistics Not Initialized
  - Fixed: Property lookup failed on $TotalProfit and $TradesCompleted (line 66, 73-74)
  - Issue: Ships registered before these fields existed don't have them in their table
  - Solution: Add initialization checks before updating (like pilot statistics already had)
  - Pattern: Check if field exists with ?, initialize to 0 if missing, then update
  - Result: Backwards compatible with ships registered by older mod versions
  - Files: gt_fleet_coordination.xml

CHANGE: Removed Skill Level Requirement for Trade Cache
  - Removed: Level 12+ requirement for writing to trade cache
  - Reason: Trade cache is a technical optimization feature, not a roleplay progression mechanic
  - Impact: All pilots (Level 1-15) can now contribute to and benefit from trade cache
  - Performance: Better cache population rate, especially with large fleets of new pilots

ENHANCEMENT: Relative Percentage-Based Cache Dropoff Validation
  - NEW FEATURE: Added configurable "Cache Dropoff Tolerance" slider in Mod Menu (Fleet section)
  - Location: gt_global_settings.xml (UI slider), gt_trading_search.xml:707-723 (validation logic)
  - Previous behavior: Cache used ABSOLUTE ROI threshold (20% default) for validation
  - New behavior: Cache validates using RELATIVE percentage drop from cached ROI
  - Example: 
    * Cached trade: 20% ROI
    * Dropoff tolerance: 15% (default)
    * Fresh ROI: 17% → Drop = 15% →  ACCEPTED (within tolerance)
    * Fresh ROI: 16% → Drop = 20% →  REJECTED (exceeds tolerance)
  - Formula: $roiDrop = (($cachedROI - $freshROI) * 100) / $cachedROI
  - Range: 0-50% (slider configurable, default: 15%)
  - Impact: More intelligent cache invalidation based on relative profit decline
  - Benefit: Prevents rejecting still-profitable trades due to minor market fluctuations

BUGFIX: Trade Search Distance Mismatch (Basic vs Blacklist-Aware Pathfinding)
  - ISSUE: Native trade queries used basic distance, but distance checks used blacklist-aware distance
  - Location: gt_trading_search.xml:887-944 (SearchLiveTrades native queries)
  - Problem: match_gate_distance uses BASIC pathfinding (shortest path, ignores sectortravel blacklists)
  - Manual distance checks use BLACKLIST-AWARE pathfinding (respects threatened sectors in path)
  - Symptom: "Distance too far" rejections even when offers within max distance (e.g., KYL-239: 4 rejected at 1 jump limit)
  - Root cause: Native query returned offers 1 jump away via basic pathfinding, but actual blacklist-aware path was 2-3 jumps (detour around threats)
  - Solution: Removed match_gate_distance, use vanilla's approach (only objectactivity in native query)
  - Filtering strategy (vanilla pattern):
    * Native C++ query: Fast objectactivity blacklist filter (station blacklists only)
    * Manual MD pre-filter 1: Sector blacklists (sectoractivity, sectortravel) - lines 984-1055
    * Manual MD pre-filter 2: Blacklist-aware distance validation - lines 1104-1161
  - New flow: Native query (objectactivity only) → Sector blacklist pre-filter → Distance pre-filter → Matching
  - Impact: Zero "distance too far" rejections, consistent pathfinding, no game stutter
  - Performance: Vanilla-level C++ performance, minimal MD overhead for thorough validation

BUGFIX: Sell Search Missing Blacklist-Aware Path Validation
  - ISSUE: Ships with cargo tried to reach stations through blacklisted sectors
  - Location: gt_trading_search.xml:1809-1848 (SearchSellOpportunities)
  - Problem: Code checked if destination station/sector is blacklisted, but NOT if path goes through blacklisted sectors
  - Symptom: "unable to reach destination" errors when selling cargo
  - Root cause: find_buy_offer used basic match_gate_distance (ignores blacklists), only validated destination, not path

OPTIMIZATION: Threat Detection Overhaul
  - NEW APPROACH: Two-check comparison leveraging X4's built-in blacklist pathfinding
    * Calculate normal gatedistance (shortest path without blacklist)
    * Calculate blacklist-aware gatedistance (avoiding threatened sectors)
    * Compare: if blacklist > normal OR blacklist == -1, preferred route goes through threat
  - Impact: Threat detection NOW WORKS - ships will detect and avoid routes through threatened sectors

PERFORMANCE: Trade Search Optimization Suite (15-20× faster searches)
  - Implemented comprehensive 5-part optimization targeting all major bottlenecks
  - Combined impact: Search time reduced from 5-10s to 0.3-0.5s (15-20× speedup)
  - Operation count: 16.8M → 1.75M operations per search (89.6% reduction)
  - Fleet scaling: Now linear instead of quadratic (10 ships: 15× faster, 50 ships: 75× faster)
  
  OPTIMIZATION 1: Removed Redundant Blacklist Safety Net (-4.8M property lookups)
    - Eliminated: Inner loop blacklist checks (12 property lookups × 100K combinations)
    - Before: Safety net checked 1.3M combinations to catch ~0.01% edge cases
    - After: Pre-filtering (lines 1261-1308) removes blacklisted offers before matching
    - Safety: Final validation at execution (gt_trading_execution.xml) catches mid-search updates
    - Impact: 4.8M property lookups eliminated per search, 10× faster inner loop
    - Files: gt_trading_search.xml (removed lines 1596-1634), gt_trading_execution.xml (added lines 58-94)
  
  OPTIMIZATION 2: Reduced Per-Ware Offer Limit (100 → 50) (-75% combinations)
    - Changed: Top 100 → top 50 offers per ware (sorted by relativeprice)
    - Rationale: Best trades typically found in top 20-30 offers; 50 provides safety margin
    - Impact: 100×100=10K → 50×50=2.5K combinations per ware (75% reduction)
    - Quality: Minimal impact on trade quality (top trades still found in top 50)
    - Result: 400K → 100K total combinations across 40 wares (4× faster matching)
  
  OPTIMIZATION 3: Early Profit Rejection for Impossible Trades (-50% wasted calculations)
    - Added: Price check before expensive calculations (docking, cargo, distance, ROI)
    - Logic: If sellPrice ≤ buyPrice, trade is impossible (zero/negative profit)
    - Impact: Skip ~50% of combinations instantly (saves ~1.5M operations)
    - Benefit: No need to check docking, cargo, distances for impossible trades
    - Also removed duplicate price calculations (lines 1495-1496) since calculated earlier
  
  OPTIMIZATION 4: Final Blacklist Validation at Execution (catches edge cases gracefully)
    - Added: Single blacklist check before creating trade order (12 property lookups once)
    - Purpose: Catches rare edge case where station becomes blacklisted mid-search (~0.01%)
    - Response: Send GT_No_Trade_Found signal → ship restarts search with updated blacklist
    - Overhead: Minimal (12 lookups once per execution vs. 4.8M during search)
    - Safety: Pre-filtering catches 99.9%, execution validation catches remaining 0.01%
  
  OPTIMIZATION 5: Fleet Coordination Cache (-93% fleet overhead)
    - Before: Loop through ALL ships for EACH trade (N × M complexity)
    - Before cost: 10 ships × 100K trades × 3 checks = 3M operations
    - After: Build cache ONCE, lookup ONCE per trade (M + N complexity)
    - After cost: 10 ships (build cache) + 200K lookups = 200,010 operations
    - Cache format: "BuyStationID|SellStationID|WareID" = true (O(1) table lookup)
    - Impact: 93% reduction (3M → 200K operations), scales linearly with fleet size
    - Large fleet benefit: 50 ships: 15M → 200K operations (75× faster)
  
  Performance Breakdown:
    - Inner loop: 400K combos × 42 ops = 16.8M ops → 100K combos × 17.5 ops = 1.75M ops
    - Fleet coordination: 3M ops (10 ships) → 200K ops (93% reduction)
    - Search time: 5-10 seconds → 0.3-0.5 seconds (15-20× faster)
    - Cache hit rate: ~90% after warm-up (instant 0.01s results)
    - Quality maintained: Still finds top 20 best trades per search
  
  Additional Changes:
    - Added $BuyStation and $SellStation to trade structure (required for OPT 4 & 5)
    - Reduced detailed rejection logging from 5 to 2 trades (less verbose)
    - Removed $tradesRejectedBlacklist counter and debug output (safety net eliminated)
    - Cache validation reviewed: No per-ware limiting needed (small size, pre-validated)

CRITICAL FIX: Resupply Cooldown Race Condition Causing Duplicate Orders
  - Fixed: Ships created duplicate resupply orders immediately after completing resupply

CRITICAL FIX: Trade Search Cargo Capacity Calculation Broken
  - Fixed: ALL trades rejected for "insufficient profit" due to incorrect cargo capacity calculation

CRITICAL FIX: Global Offer Limiting Breaking Per-Ware Trade Matching
  - Fixed: Global offer limiting (top 250) eliminated ALL matching buy/sell offers for specific wares

FIX: Missing Maintenance Transition Flag in on_abort Handler
  - Fixed: Maintenance orders (repair/resupply) triggered on_abort handler without protection flag

CRITICAL FIX: Maintenance System Station Selection Failures
  - Fixed: Ships received "target unreachable" errors for repair/resupply orders
  - Fixed: Wrong property name $IsXL used instead of $IsCapital (returned null)
  - Fixed: Missing @ safe operator on $IsLarge/$IsCapital causing property lookup errors
  - Fixed: Wharfs completely excluded from equipment station search

FIX: Maintenance System Missing Threat Intelligence Integration
  - Fixed: Maintenance ignored threat system blacklists, sent ships to dangerous sectors

FIX: Profit Statistics Showing Revenue Instead of Actual Profit
  - Fixed: Statistics displayed REVENUE (sale price) instead of PROFIT (sale price - purchase cost)

FIX: Training Duration Type Error
  - Fixed: Training duration calculations converted time values to integers, causing "Attribute max=30 is not of type time" errors
  - Root cause: Arithmetic operations on time values (600s + 60s) resulted in integer type instead of time type
  - Solution: Added type checks after duration calculations to convert integers back to time type (* 1s)
  - Files: gt_xp_training.xml (lines 1018-1021, 1393-1396), order.dock.train.xml (lines 157-161)
  - Impact: Training system now works correctly without AI script errors

FIX: Accidentally deleted icon in Version 0.5.8 and added it back

NEW FEATURE PREVIEW: GalaxyTrader Fleet Info Menu (Phase 1 BETA - WIP)

FIX: Orphaned Pilot Cleanup Running Twice
  - Fixed: Cleanup system executed twice in succession every 5 minutes
  - Root cause: Double-signaling - TriggerCleanupOnLoad signaled both OrphanedPilotCleanup AND scheduler, but cleanup also signals scheduler at end
  - Result: Two scheduler instances created, both firing after 5 minutes
  - Solution: Removed redundant scheduler signal from TriggerCleanupOnLoad
  - Flow now: Load → Cleanup → Scheduler → (5min) → Cleanup → Scheduler → (repeat)
  - Files: md/gt_core_system.xml (lines 684-693)

Version 0.5.8 - 2025-10-26
--------------------------

NEW FEATURE: Master Toggle for Ship Renaming System
  - Added global setting to enable/disable entire ship renaming functionality
  - Setting: $GT_GlobalSettings.$ShipNaming.$Enabled (default: OFF)
  - UI button added in Ship Naming Configuration section of mod settings menu
  - When disabled: Ships keep their original vanilla names (e.g., "Mercury Vanguard")
  - When enabled: Full GT renaming applies (XP, Level, Rank, Status, Operational states)
  - Toggle affects ALL renaming elements:
    * Trader progression info (XP, Level, Rank)
    * Status indicators ([ADVANCE], [TRAINING])
    * Operational states ([REPAIR], [RESUPPLY], [MAINTENANCE], [REROUTE], [CLEARANCE])
  - Instant effect: When toggled ON, triggers UpdateAllShipNames to rename entire fleet
  - Fully localized: Button text and tooltip in all 8 languages
  - Translation IDs: 9075 (button label), 9175 (tooltip)
  - Files: gt_global_settings.xml, gt_xp_training.xml, all t/0001-L*.xml files (8 language files)

CRITICAL FIX: Ship Renaming Toggle Not Working (return statement in instantiated cue)
  - Fixed: Master toggle debug message appeared but ships were still renamed
  - Root cause: <return/> statement doesn't work in instantiated cues in X4 MD scripts
  - Solution: Wrapped all renaming logic in <do_else> block instead of using early return
  - Pattern change: <do_if disabled> debug only </do_if> <do_else> all logic </do_else>
  - Now correctly skips ALL renaming code when toggle is OFF
  - Files: gt_xp_training.xml (UpdateShipName cue, lines 705-979)

Version 0.5.7 - 2025-10-26
--------------------------

IMPROVEMENT: Consistent Ship Name Prefix System with User Configuration
  - Standardized all prefixes: ALL states now use brackets for consistency ([ADVANCE], [TRAINING])
  - Added operational state prefixes: [REPAIR], [RESUPPLY], [MAINTENANCE], [REROUTE], [CLEARANCE]
  - Brackets ensure ships with active states sort to top of fleet overview for easy identification
  - Added global settings: DisplayOperationalState, OperationalStatePosition (prefix/suffix)
  - Respects user's naming preferences for display and position of operational states
  - Example: "[ADVANCE] [REPAIR] Mercury Sentinel (Trader Lv.9 XP:2850)"
  - [MAINTENANCE] shown when both repair and resupply needed simultaneously
  - [REROUTE] shown when destination threatened/blacklisted, cleared when new destination found
  - [CLEARANCE] shown during emergency cargo disposal (cargo safety), cleared when cargo empty
  - Operational state changes trigger automatic ship renaming to update display
  - Fully localized: All operational state prefixes translated to 8 languages (English, German, French, Spanish, Italian, Portuguese, Russian, plus L001)
  - Translation IDs: 7003-7007 for operational states in all language files
  - Backwards compatible: Works with existing save games (defaults to enabled/prefix if settings don't exist)
  - Files: gt_xp_training.xml, gt_maintenance.xml, gt_trading_ai.xml, gt_global_settings.xml, order.trade.galaxytrader.xml, all t/0001-L*.xml files

IMPROVEMENT: Simplified Ship Name Building Using macro.name
  - Replaced complex Lua-based string stripping with native macro.name property
  - Removed 2 files completely (gt_string_utils.lua, gt_string_utils_loader.xml)
  - Removed ReceiveStrippedName cue from gt_ship_management.xml
  - Eliminated async event communication and 5ms delay
  - Benefits: 97% less code (250 lines → 7 lines), no timing issues, no Lua dependency
  - macro.name provides ship model with variant (e.g., "Mercury Sentinel", "Shuyaku Vanguard")
  - Always localized correctly by X4 engine, works across all languages
  - Files: gt_xp_training.xml (simplified), deleted 2 files, cleaned gt_ship_management.xml

CRITICAL FIX: Unreliable List Membership Checks Using indexof
  - Fixed: 20+ instances of unreliable indexof checks across entire codebase
    * Root cause: X4's $list.indexof.{$item}? is unreliable for object/value lists
    * Even when list empty or item absent, ? check can fail silently or give wrong results
    * Caused silent logic failures, duplicate queue entries, incorrect training validation
    * Affected: Queue deduplication, training validation, maintenance, utilities, coordination
  - Solution: Replace ALL list indexof checks with explicit do_all loops
    * Pattern: Set $found=false, loop through list, compare each item, break if found
    * 100% reliable, handles empty lists, objects, and values correctly
    * Early break optimization minimizes performance impact
  - Locations Fixed (20 total):
    * Queue Deduplication (4): gt_trading_ai.xml (2), gt_trading_queue.xml (1), gt_trading_maintenance.xml (1)
      - Ships no longer added to queue multiple times
      - Search queue deduplication now works correctly
      - Idle ship recovery no longer creates duplicates
    * Training System (10): gt_xp_training.xml (6), gt_configuration.xml (4)
      - RequiredLevels checks now reliable (lines 136, 321, 336, 536, 564)
      - TrainingCompleted checks now reliable (lines 140, 325, 341, 540, 569)
      - Configuration retroactive fix checks now reliable (lines 187, 191, 449, 453)
      - Pilots no longer incorrectly blocked/unblocked from trading
    * Maintenance (1): gt_maintenance.xml (line 972)
      - Excluded sectors check now reliable
      - Ships respect sector exclusion configuration correctly
    * Utilities (2): gt_utilities.xml (lines 309, 395)
      - Ware basket membership check now reliable
      - Sector path deduplication now reliable
    * Fleet Coordination (1): gt_fleet_coordination.xml (line 213)
      - Unique wares tracking now reliable
      - Fleet statistics accurate
    * Trading Signals (1): gt_trading_signals.xml (line 118)
      - Pathing failure reason detection now reliable
      - Trade failure categorization accurate
    * Market Intelligence (1): gt_market_intelligence.xml (line 435)
      - SpottedBy ship tracking now reliable
      - Competitor tracking accurate
  - IMPORTANT: String indexof UNCHANGED (still safe and correct)
    * Character lookups in strings work fine: $string.indexof.{'['}?
    * Only LIST membership checks were affected and fixed
    * Lines with string indexof: gt_xp_training.xml (770, 777, 778, 783, 881, 921)
  - Impact: Eliminates silent logic failures, improves reliability across all systems
  - Files: 10 MD files modified (gt_trading_ai.xml, gt_trading_queue.xml, gt_trading_maintenance.xml, gt_xp_training.xml, gt_configuration.xml, gt_maintenance.xml, gt_utilities.xml, gt_fleet_coordination.xml, gt_trading_signals.xml, gt_market_intelligence.xml)

CRITICAL FIX: Cargo Safety System Blocking Ship Operations
  - Fixed: Ships with multiple cargo types creating concurrent trade orders
    * Root cause: Cargo safety looped through ALL wares and tried to sell each simultaneously
    * Problem: Created multiple trade orders at once → first succeeds, others fail
    * Result: Ship stuck in loop trying to execute failed orders for remaining cargo
    * Example: Ship with Energy Cells + Food Rations created 2 orders at once
    * Solution: Sell ONE ware at a time (first ware in cargo list)
    * After trade completes, ship loops back and sells next ware sequentially
    * This prevents multiple concurrent orders and ensures clean cargo disposal
  - Solution: Cargo safety now accepts ANY offer, even losses (0 Cr minimum)
    * Ship MUST clear cargo before new trades, profitability irrelevant
    * Changed MinProfit from 500Cr to 0Cr in HandleAISellRequest
    * Added blacklist validation (station, sector activity, sector travel)
    * Added operational status checks (isoperational, isclosingdown with @ operator)
    * Added docking permission checks (dockingallowed)
    * Added final offer validity check before creating trade order
    * Sells wares one at a time sequentially to prevent concurrent order conflicts
    * Guarantees only valid, reachable, dockable offers result in trade orders
    * Accepts losses if necessary - better to dump cargo than stay stuck
  - Impact: Ships no longer get stuck with unsellable cargo, NO failed trade orders, NO infinite loops, NO concurrent order conflicts
  - Files: md/gt_trading_ai.xml (line 331), md/gt_trading_search.xml (lines 1835-1950)

CRITICAL FIX: Stale Maintenance Orders Persisting from Save Files
  - Fixed: Ships executing obsolete repair/resupply orders from previous sessions
    * Root cause: global.$GT_RepairOrders and global.$GT_ResupplyOrders persisted in save files
    * Maintenance check would correctly determine "no repair needed"
    * But AI script would still find old order data and execute it anyway
    * Result: Ships flying to irrelevant repair stations from old game sessions
  - Solution: Clear stale orders at start of every maintenance check
    * Added cleanup code at beginning of DoMaintenance (lines 67-75)
    * Ensures fresh decisions based on current ship state
    * Prevents stale data from old sessions affecting current gameplay
  - Impact: Ships no longer execute outdated maintenance orders after game load
  - Files: md/gt_maintenance.xml
  - User report: Ships stuck trying to reach old repair stations after save/load

FIX: Trade Search Reliability and Correctness
  - Fixed: Incorrect @ operator usage with gatedistance (5 locations)
    * gatedistance returns -1 for unreachable routes (not null)
    * Using @ masked semantic meaning and required extra null checks
    * Removed @ and simplified to direct -1 checks for clarity
    * Locations: Lines 437, 443, 888, 1302, 1309
  - Fixed: Stage 2 distance not blacklist-aware
    * Stage 2 computed distances through blacklisted sectors for scoring
    * Caused futile trade selection that would fail during execution
    * Changed to use station objects (blacklist-aware) instead of sectors
    * Buy distance: $ship.gatedistance.{$station} (was .{$sector})
    * Sell distance: $buyStation.gatedistance.{$sellStation} (was sector-to-sector)
  - Fixed: Sell-only path lacked blacklist pre-filtering
    * Live search filtered blacklisted stations, sell-only did not
    * Inconsistent behavior could select blacklisted buyers
    * Added same pre-filter logic to sell-only path for consistency
    * Checks: objectactivity, sectoractivity, sectortravel blacklists
  - Removed: Redundant GT_ValidateStation call in sell-only path
    * Function only checked operational status
    * find_buy_offer already filters operational stations
    * Removed redundant call for clarity and performance
  - Implemented: Faction Priority parameter now functional
    * Player Only (0): Boosts trades involving player-owned stations by 20%
    * Foreign First (1): Boosts trades with non-player stations by 20%
    * Equal Priority (2): No boost applied (default behavior)
    * Applied in both cached trade search and live trade search
  - Fixed: Money type conversion warnings in faction priority boost
    * Root cause: Attempting to convert money to pure number and multiply by float
    * Original approach: $efficiency / 1Cr * 0.2 (failed - division doesn't remove money type)
    * Solution: Calculate boost as division instead of multiplication
    * Changed: $boost = $efficiency / 5 (20% = 1/5), then $efficiency + $boost
    * Eliminates "Loss of data while converting floating point to money value" warnings
    * Works because division and addition preserve money type naturally
  - Impact: More reliable trade selection, fewer futile attempts, clearer code, configurable faction preference, no type warnings
  - Files: md/gt_trading_search.xml

FEATURE: Language-Independent Ship Name Stripping
  - Improved: Ship name stripping now works with ALL languages
  - Problem: Strip_GT_Name_Formatting only recognized English prefixes
    * Only stripped: "ADVANCE ", "[TRAINING] " (hardcoded English)
    * Failed on: "FORTSCHRITT", "[AUSBILDUNG]", "AVANCER", "AWANS", etc.
    * Result: Duplicate prefixes in non-English locales ("ADVANCE FORTSCHRITT...")
  - Solution: Pattern-based detection instead of hardcoded strings
    * Step 0: BACKWARD COMPATIBILITY - Explicitly strips old English "ADVANCE ", "[TRAINING] "
      (Ensures migration from pre-0.5.7 saves works correctly when language changes)
    * Step 1: Detects ANY bracketed prefix: [ANYTHING] pattern
    * Step 2: Detects ANY ALL-CAPS word prefix: Pattern-based comparison (language-independent)
    * Step 3: Suffix handling - skipped due to X4 string API limitations
      - X4 only supports substring.{position} (from position to end)
      - No substring.{start, end} or substring.{pos, length} available
      - Cannot truncate strings at arbitrary positions
      - Duplicate detection prevents adding new suffixes anyway
    * Works with all character sets: Latin, Cyrillic, Chinese, etc.
    * Prevents duplicates: Pattern-based detection catches existing formatting
  - Migration Example (German player with old English save):
    * Old save: "ADVANCE Merkur (Lv.5)" (English prefix from v0.5.6)
    * Step 0: Strip "ADVANCE " → "Merkur (Lv.5)"
    * Note: Suffix remains due to X4 API limits (cannot truncate at arbitrary position)
    * New name: "FORTSCHRITT Merkur (Lv.5)" (German prefix from v0.5.7)
    * Result: Clean migration without "FORTSCHRITT ADVANCE" duplication
    * Suffix is updated dynamically each rename, so old suffix will be replaced eventually
  - Benefits:
    * Fully multilingual - no hardcoded language strings
    * No maintenance needed for new languages
    * Automatic support for all X4 languages
    * Prevents duplicate prefixes in all locales
    * Seamless migration from pre-0.5.7 saves
  - Files: md/gt_ship_management.xml (Strip_GT_Name_Formatting library, lines 49-117)
           md/gt_xp_training.xml (duplicate prevention logic, lines 730-761)

FIX: Missing Order Menu Translations
  - Fixed: Order parameter names were hardcoded in English
  - Problem: Parameters displayed in English regardless of game language
    * Affected: Allow Illegal Wares, Logbook Entries, Risk Tolerance, etc.
    * 11 parameters total with hardcoded English text
  - Solution: Added proper translation references
    * Added translation IDs 1011-1019, 1050-1051 to all language files
    * Updated order.trade.galaxytrader.xml to use {77000,XXXX} references
  - Translations added for:
    * English (L001, L044)
    * German (L007, L049)  
    * French (L033)
    * Spanish (L034)
    * Italian (L039)
    * Portuguese (L055)
    * Russian (L007)
  - Files: t/0001-L*.xml (all language files)
           aiscripts/order.trade.galaxytrader.xml (parameter text attributes)

FIX: Critical Reliability - Replaced Unreliable indexof Checks with Explicit Loops
  - Fixed: indexof list membership checks can silently fail in X4
  - Problem: `$list.indexof.{$item}` is unreliable for list membership testing
    * Can return false negatives with object references
    * Fails silently on empty lists or null values
    * No error indication when comparison fails
  - Affected Areas (3 critical checks):
    * Ware basket filtering (line 577) - could skip valid manually selected wares
    * Faction restriction checks (lines 1000-1015, 1048-1063) - could allow/deny wrong trades
  - Solution: Replaced with explicit loop pattern
    ```xml
    <set_value name="$found" exact="false"/>
    <do_all exact="$list.count" counter="$i">
      <do_if value="$list.{$i} == $targetItem">
        <set_value name="$found" exact="true"/>
        <break/>
      </do_if>
    </do_all>
    ```
  - Benefits:
    * Deterministic behavior - always works correctly
    * Debuggable - can add logging to see comparisons
    * Performant - breaks early when match found
    * Null-safe - explicit count check prevents crashes
  - Files: md/gt_trading_search.xml (lines 577-591, 1000-1029, 1048-1077)

FIX: Ship Name Status Prefixes Now Fully Translated
  - Fixed: "ADVANCE" and "[TRAINING]" prefixes were hardcoded in English
  - Problem: Ship names showed English prefixes regardless of game language
    * Example: German player saw "ADVANCE Merkur" instead of "FORTSCHRITT Merkur"
    * Affected all non-English players (German, French, Russian, etc.)
  - Solution: Added translation IDs 7001-7002 for status prefixes
    * English: "ADVANCE", "[TRAINING]"
    * German: "FORTSCHRITT", "[TRAINING]"
    * French: "AVANCER", "[FORMATION]"
    * Russian: "ПРОГРЕСС", "[ТРЕНИРОВКА]"
    * Spanish: "AVANZAR", "[ENTRENAMIENTO]"
    * Italian: "AVANZAMENTO", "[ADDESTRAMENTO]"
    * Portuguese: "AVANÇAR", "[TREINAMENTO]"
  - Implementation: Changed from hardcoded strings to readtext.{77000}.{700X}
  - Pattern-based stripping still works - detects ALL-CAPS and bracketed patterns
  - Files: t/0001-L*.xml (all language files)
           md/gt_xp_training.xml (lines 724, 727)

Version 0.5.6 - 2025-10-25
--------------------------

CRITICAL FIX: Duplicate Ship Names During Mod Updates
  - Fixed: Ships getting duplicate GT name formatting when updating the mod
  - Problem: "Shipname (Apprentice Lv.3 XP:181) (Courier Lv.3 XP:258)" during updates
  - Root Cause: System stored current ship name as "original" without checking for existing GT formatting
  - What happened during updates:
    * Old mod: Ship = "MyShip (Apprentice Lv.3 XP:181)"
    * User updates mod
    * System stored: OriginalShipName = "MyShip (Apprentice Lv.3 XP:181)" ← WRONG!
    * System added new formatting: Result = "MyShip (Apprentice Lv.3 XP:181) (Courier Lv.3 XP:258)"
  - Solution: New Strip_GT_Name_Formatting library automatically cleans ship names
    * Strips status prefixes: "ADVANCE ", "[TRAINING] "
    * Strips rank suffixes: " (RankName Lv.X XP:Y)"
    * Detects patterns using "Lv." indicator to identify GT formatting
    * Applied at ALL locations where original names are stored
  - Benefits:
    * Updates work seamlessly - no manual steps required
    * Retroactive - next save/load will clean existing corrupted names
    * Prevents all duplicate name patterns
    * Users no longer need to disable auto-naming before updating
  - Files: gt_ship_management.xml (new Strip_GT_Name_Formatting library)
           gt_xp_training.xml (lines 73, 91, 703)
           gt_core_system.xml (lines 84, 312, 363, 752)
  - THX @ CadvanVLirigon

CRITICAL FIX: SearchCachedTrades Early Exit Error
  - Fixed: MD error when trade cache is too small (< 10 entries)
  - Error: "Property lookup failed: $params.$ResultCue"
  - Root Cause: Legacy code trying to signal non-existent result cue parameter
  - Problem: SearchCachedTrades was refactored to use global return variables
    * Old code: Signaled result cue with return value
    * New code: Sets global.$GT_SearchResult and completes normally
    * Line 341: Still had old signal code using non-existent $params.$ResultCue
  - Solution: Use global return variable pattern for early exit
    * Returns: global.$GT_SearchResult with Found=false to trigger live search
    * Consistent with normal return path (line 732)
  - Files: md/gt_trading_search.xml (lines 340-348)

CRITICAL FIX: Pathfinding Failures Not Blacklisted (Infinite Loop Bug)
  - Fixed: Ships repeatedly attempting to reach same unreachable station
  - Root Cause: Data structure mismatch between trade execution and failure tracking
  - Problem: When dock order failed with ERR_NO_PATH_TO_DESTINATION:
    * Execution stored: global.$GT_PendingTrades.{ship} = [LIST of 20 trades]
    * AI selected: One trade from list, created orders
    * Failure handler expected: global.$GT_PendingTrades.{ship}.$BuyStation (table properties)
    * Result: Structure mismatch → couldn't read data → couldn't blacklist station
  - Impact: Ships stuck in infinite loop:
    1. Search finds trade to unreachable station (passes gatedistance checks)
    2. Try to dock → "no path to destination" error
    3. Fail to blacklist station (pending trade data missing)
    4. Repeat from step 1 ← INFINITE LOOP
  - Example from log: IZB-061, SYN-274, others repeatedly failing to "TEL Ilja's Observation Outpost"
  - Solution: AI script now updates pending trade entry BEFORE creating orders
    * Replaces trade list with specific trade data (BuyStation, SellStation, Ware)
    * Provides structure failure handler expects
    * Enables proper blacklisting of unreachable sector pairs
  - Files: aiscripts/order.trade.galaxytrader.xml (lines 1112-1127)
  - Benefit: Ships learn from pathfinding failures and stop retrying unreachable routes

CRITICAL FIX: Maintenance System Not Checking Blacklists and Path Safety
  - Fixed: Repair and resupply orders did NOT check if destination was safe/reachable
  - Previously: Used basic gatedistance (ignores blacklists)
  - Previously: No check if station itself was blacklisted
  - Previously: No check if route passed through blacklisted sectors
  - Problem: Ships could travel to repair stations in hostile sectors or through war zones
  - Now: Comprehensive safety checks matching trading system:
    * Blacklist-aware gatedistance (respects sector travel blacklists)
    * Station blacklist check (skips blacklisted stations)
    * Path availability check (returns -1 if no safe path)
    * Already had: Station known to player (knownto="player.entity")
    * Already had: Max jump distance limit
    * Already had: Excluded sectors (from ship config)
  - Equipment Station Search (lines 316-329):
    * Uses $ship.gatedistance.{$station.sector}.{blacklistgroup.civilian}.{$ship}
    * Checks @station.isblacklisted.{blacklisttype.objectactivity}.{blacklistgroup.civilian}.{ship}
    * Skips stations with distance < 0 (no path or route blacklisted)
  - Repair Station Search (lines 930-954):
    * Same blacklist-aware checks as equipment search
    * Filters out blacklisted stations first
    * Then checks blacklist-aware path availability
    * Only considers safe, reachable stations within configured distance
  - Benefits:
    * Ships never sent to dangerous sectors for maintenance
    * Respects all player blacklist settings
    * Consistent safety model across trading, maintenance, and threat avoidance
    * Ships can still trade/operate even when maintenance stations are in hostile territory
  - Files: gt_maintenance.xml (lines 317, 941)
  - Note: Correct syntax is $ship.gatedistance.{sector}.{blacklistgroup.civilian}.{$ship}
  - Important: Use blacklistgroup.civilian (NOT blacklisttype.sectortravel)


Version 0.5.5 - 2025-10-21
--------------------------

CRITICAL ARCHITECTURE: Blacklist-Aware Pathfinding System
  - Problem: MD scripts cannot access blacklist-aware pathfinding
  - Solution: Sector-Pair Filtering System
    * Trades are ranked by profit potential without blacklist pre-checking
    * If a ship cannot reach a destination due to blacklists, that sector-pair is stored
    * Future trade searches filter out stored failed sector-pairs for that ship
    * Each ship maintains its own list of unreachable sector combinations
  - Benefits:
    * Respects player-set blacklists (sector, station, activity, travel)
    * Ships learn which routes they cannot take and avoid them
    * Simpler and more reliable than attempting to replicate vanilla pathfinding
    * Works within MD script limitations
  - Files: md/gt_trading_search.xml, aiscripts/order.trade.galaxytrader.xml
  - Status: FULLY IMPLEMENTED

CRITICAL FIX: Pilot Registration and Ship Naming System
  - Problem: Ships were not renamed back to original names when GT order was removed
  - Problem: Pilot changes were detected with 15-second delay due to polling system
  - Problem: Subordinate ships kept GT names after commander switched to different order
  - Solution: Complete event-driven system with instant detection
    * AI script detects pilot changes, order removal, and commander changes instantly
    * Ships automatically renamed when order removed or pilot changed
    * Orphaned pilot cleanup runs on game load and every 5 minutes
    * Ship reassignment properly tracks and updates original names
  - Benefits:
    * Instant response (0-1 second vs 15 seconds)
    * Zero CPU overhead (no polling loops)
    * Ship names always correct after assignment/removal/reassignment/save-load
    * XP data preserved across all scenarios
  - Files: order.trade.galaxytrader.xml, gt_core_system.xml, gt_ship_management.xml
  - Status: FULLY IMPLEMENTED

CRITICAL FIX: Manual Ware Selection Not Applied
  - Fixed: Ships were trading ALL wares instead of only manually selected wares from ware basket
  - Root cause: $WareBasket parameter was retrieved but never used in offer filtering
  - Solution: Restructured live search to query X4 engine for specific wares (optimal performance)
  - Implementation:
    * Manual mode ($wareBasket has items): Loop through each ware, query offers per-ware
    * AutoWares mode ($wareBasket empty): Query all compatible wares (original behavior)
    * Per-ware querying is MUCH more efficient than querying all + post-filtering
    * X4 engine filters at native level instead of MD script loops
    * Cache validation: Added ware basket filter in cached trade validation
    * Only trades matching selected wares are now considered
  - Performance gain: Massive reduction in data transfer and processing when using manual ware selection
  - Debug logging improvements:
    * LogLevel 2: Shows when manual ware selection is active and total offers per station
    * LogLevel 3: Shows per-ware offer counts (which wares have offers, which don't)
    * Cache: Shows when cached trades filtered due to ware not in basket
  - Files: gt_trading_search.xml

CRITICAL FIX: Lifetime Revenue Incremented at Wrong Time
  - Fixed: Lifetime revenue was being updated when trades were PLANNED, not when COMPLETED
  - This caused revenue to increase even when trades failed (e.g., cargo stuck loops)
  - Root cause: LogTradeOrder cue updated lifetime profit during trade assignment
  - Solution: Moved lifetime profit tracking to LogCompletedTrade cue (triggered by diff patch system)
  - Lifetime revenue now only increases when trades actually complete successfully
  - Logbook messages now show lifetime revenue in completion entries instead of planning entries
  - Files: gt_trade_logging.xml

ENHANCEMENT: Path-Aware Threat Detection for Mid-Trade Sector Blacklisting
  - Enhanced: Threat detection now checks ENTIRE travel path, not just destination
  - Previously: Only checked if buy/sell destination was in threatened sector
  - Now: Checks if threatened sector is anywhere in ship's complete route:
    * Ship's current sector
    * All intermediate sectors from ship to buy station
    * Buy station sector
    * All intermediate sectors from buy to sell station
    * Sell station sector
  - Example: Ship at A traveling to E via B->C->D
    * If sector C gets blacklisted while ship is at B -> trade aborts immediately
    * Ship won't try to travel through dangerous sectors even if destination is safe
  - LEVEL REQUIREMENT: Only Level 12+ pilots can analyze route threats mid-trade
    * Matches fleet coordination level requirement (Level 12+)
    * Ensures only highly experienced pilots have tactical awareness for complex route threat analysis
    * Lower level pilots (1-11) will complete their current trade normally
    * Rationale: Mid-trade route threat analysis requires advanced tactical decision-making
  - Uses X4's gatedistance.{destination}.path to get all intermediate sectors
  - If threatened sector found in path -> sends GT_Destination_Threatened signal (Level 12+ only)
  - AI script cancels all orders and returns to main loop
  - Cargo check handles the rest (sell cargo if present, find new trade if not)
  - Much safer: Experienced ships now avoid ALL dangerous sectors in their route
  - Files: gt_threat_intelligence.xml

CRITICAL FIX: Total Profit and Trades Completed Statistics Always Zero
  - Fixed: Periodic fleet report notifications always showed 0 Cr profit and 0 trades completed
  - Root cause: UpdateShipStats library existed but was never called when trades completed
  - Solution: Added call to md.GT_Fleet_Coordination.UpdateShipStats in gt_trading_signals.xml
  - Statistics now updated immediately after each successful trade completion
  - Updates both $TotalProfit and $TradesCompleted for individual ships
  - Fleet reports now show accurate cumulative statistics
  - Files: gt_trading_signals.xml, gt_fleet_coordination.xml

ENHANCEMENT: Roleplay-Style Logbook Messages for Ship Operations
  - Added: Immersive logbook entries for cargo safety, maintenance, and trade search events
  - New Messages (all text-only, no emojis):
    * Cargo Safety: When ship detects cargo and needs to sell before trading
    * Auto-Repair: When ship requests repair services (with cost estimate)
    * Partial Repair: When funds insufficient for full repair (highlighted warning)
    * Equipment Resupply: When ship restocks defensive equipment
    * No Trades Found: Detailed rejection statistics when no profitable trades available
    * Route Threat Detected: When ship's planned trade route becomes dangerous mid-trade
  - Rejection statistics breakdown:
    * Docking restrictions (station doesn't permit ship class)
    * Insufficient profitability (below minimum threshold)
    * Insufficient volume (zero or negative tradeable amount)
    * Safety restrictions (blacklisted stations/dangerous sectors)
  - Route Threat Alert (NEW):
    * Triggered when threatened sector detected in ship's complete trade route
    * Shows sector name and threat level
    * Explains actions taken (orders cancelled, safe mode activated)
    * Reassures player that cargo will be handled automatically if present
    * Highlighted as "alerts" category in logbook for immediate visibility
  - Messages written in professional roleplay style with recommendations
  - Full translation support across all 8 languages (English, German, French, Spanish, Italian, Russian, Portuguese, Korean)
  - Messages respect logbook setting (only appear if player enabled logbook entries)
  - Category: "upkeep" for maintenance/cargo, "alerts" for route threats
  - Files: order.trade.galaxytrader.xml, gt_maintenance.xml, gt_trading_search.xml, all t/0001-L*.xml files
  - Status: FULLY IMPLEMENTED

CRITICAL FIX: Initial Ship Renaming on Assignment/Reassignment
  - Fixed: Ships not renamed immediately when assigned GT order with existing pilot
  - Problem: Ship with registered pilot assigned to GT order didn't trigger rename
  - Root cause: GT_Update_Ship only fired when pilot CHANGED, not on initial assignment
  - Previous behavior: Ship "MyShip" with pilot John -> assign GT order -> still named "MyShip"
  - Solution: AI script now sends GT_Update_Ship signal during initialization phase
  - Initial registration signal sent regardless of whether pilot changed
  - Ships now renamed instantly upon assignment, even if pilot was already registered
  - Also fixes reassignment scenario (ship on Hold Position -> reassigned to GT)
  - Files: order.trade.galaxytrader.xml (lines 420-430), gt_core_system.xml

CRITICAL FIX: Event Listener Mismatch in Ship Modification Handler
  - Fixed: HandleShipModificationUpdate cue not firing, preventing ship renaming
  - Root cause: Listener type mismatch between signal sender and receiver
  - AI script sent: event_object_signalled (object signal to player.galaxy)
  - MD cue listened for: event_cue_signalled (cue signal)
  - Solution: Changed HandleShipModificationUpdate to listen for event_object_signalled
  - Also corrected parameter access from event.param to event.param2
  - Ship modification signals now properly received by MD system
  - Enables instant ship renaming on pilot changes and initial assignments
  - Files: gt_core_system.xml (lines 956-990)

========================================

Version 0.5.4 - 2025-10-21
--------------------------

CRITICAL FIX: Trade Search Not Respecting Threat Avoidance Blacklist
  - I thought this would be automatically handled by Vanilla
  - Fixed: Ships were accepting trades to blacklisted/dangerous sectors
  - Root cause: Neither live trade search nor cache validation checked threat intelligence
  - Solution: Added threat intelligence validation to BOTH systems:
    * Live trade search: GT_ValidateStation now filters stations in dangerous sectors
    * Cache validation: Cached trades now validated against current threat intelligence
  - Both buy AND sell station sectors are checked against ship's risk tolerance
  - Ships will only accept trades to sectors that are safe enough based on threat level
  - Files: gt_utilities.xml, gt_trading_search.xml


Version 0.5.3 - 2025-10-21
--------------------------

FIX: Mobile Satellite Intelligence Property Lookup Error
  - Fixed: Property lookup failure for $ship.isdocked causing MD script errors
  - Affects ships performing mobile satellite intelligence scans (not game breaking)
  - Files: gt_market_intelligence.xml

========================================

Version 0.5.2 - 2025-10-20
--------------------------

MAJOR ENHANCEMENT: Threat Avoidance Blacklist System Improvements
  - Blacklists now persistent across save/load cycles with proper ID storage in global.$GT_BlacklistID
  - Event-driven threat detection: updates blacklist instantly when threats are detected/cleared (removed 5-second polling loop)
  - Integrated X4's native enemy faction blocking using relation checkbox
  - Auto-recovery: automatically detects manually deleted blacklists and recreates them using GetBlacklistInfo2
  - New Settings in Global Menu (Threat Avoidance section):
    * "Block Enemy Faction Sectors" toggle - controls X4's native faction-based sector blocking
    * "Recreate Blacklist" button - manually recreate blacklist if needed (e.g. accidentally deleted)
  - Files: gt_threat_intelligence.xml, gt_blacklist_manager.lua (new), gt_global_settings.xml

OPTIMIZATION: Mobile Satellite Intelligence System
  - Fixed: Docked ships no longer scan for stations (they only scan when actively flying)
  - Optimization: Ships skip scanning stations whose factions already have player trade subscriptions
  - Improved efficiency by avoiding redundant trade data collection when subscriptions exist
  - Files: gt_market_intelligence.xml

CRITICAL FIX: New Game Initialization Errors & Menu API Integration
  - Fixed: Property lookup failures on new game start preventing global menu from opening
  - Fixed three cues that checked for global variables before initialization:
    * SystemMaintenance: Added @ to global.$GT_Initialized (ich koffer)
    * TrainingProgressReport: Added @ to global.$GT_Config.$XP.$Enabled (ich koffer)
    * ShipRecovery: Uses ? operator with boolean logic (global.$GT_Ships? and ...)
  - CRITICAL: Fixed Simple Menu API integration following SN Mod Support APIs best practices (RTFM)
    * Moved DefensiveEquipment settings initialization to menu registration phase (Reloaded event)
    * Settings now initialize BEFORE menu registration, not during menu open
    * Follows official SN Mod Support APIs pattern for options menu registration
    * Prevents ~30 property lookup errors when opening global menu on fresh games
  - Settings menu now loads correctly on fresh games without any errors
  - Files: gt_core_system.xml, gt_reporting.xml, gt_trading_maintenance.xml, gt_global_settings.xml

CRITICAL FIX: Missing Translations Across All Languages
  - Fixed missing translation IDs for Threat Avoidance settings (9050-9074)
  - Fixed missing translation IDs for Defensive Equipment settings (9151-9174)
  - Added missing trade logging and training message translations (1002, 3101, 3104-3106, 3200-3203)
  - Affected languages: German (L049), English (L001), Russian (L007), French (L033), Spanish (L034), Italian (L039)
  - Fixed "missing translation" errors appearing in X4 UI
  - Files: t/0001-L049.xml, t/0001-L001.xml, t/0001-L007.xml, t/0001-L033.xml, t/0001-L034.xml, t/0001-L039.xml

ENHANCEMENT: Training Required Notifications Now Logged
  - Fixed: "Training Required" notifications now written to logbook instead of just screen messages
  - All training notifications now appear in Upkeep category with clickable ship links
  - Includes:
    * "Training Required" - when pilot needs to advance skill level
    * "XP Blocked" - when pilot earns XP but can't advance without training
  - Notifications are highlighted and include interaction="showonmap" for easy navigation
  - No more missing important training alerts!
  - Files: gt_xp_training.xml

CRITICAL FIX: Multi-Language Text Resolution Issues
  - Fixed two critical issues where text displayed in wrong language despite player's game settings
  - Root cause: Text ID objects stored in variables don't auto-resolve to player's language; some strings were hardcoded in English
  - Solution: Use readtext.{page}.{line} syntax directly to force proper language resolution
  
  Issue 1: Pilot Rank Titles in Ship Names
    * Problem: Rank titles showing in German ("lehrling") instead of Portuguese ("Aprendiz") even when game is in language 55
    * Fix: Calculate text line ID dynamically (6001-6006) and use readtext.{77000}.{$textLineID}
    * Now properly displays: Aprendiz, Lehrling, Apprentice, etc. based on player's language
  
  Issue 2: Defensive Equipment Balance Profiles
    * Problem: Balance profile names showing in English instead of player's selected language
    * Fix: Created translation IDs (6101-6105) for all profiles and use readtext for dynamic resolution
    * Affected profiles: Balanced, Defensive, Trading-Focused, Heavy Defense, Tower Support
  
  - All languages now properly supported: Brazilian Portuguese (55), English (44), German (49), French (33), Spanish (34), Italian (39), Russian (7), International/Default (1)
  - Files: gt_xp_training.xml (lines 729-745), gt_global_settings.xml (lines 916-933), all translation files (0001-L*.xml)


Version 0.5.1 - 2025-10-20
--------------------------

CRITICAL FIX: Brazilian Portuguese Text Display Bug

  - All UI text now fully translated including:
    * Order names and descriptions
    * XP/training messages and immersive roleplay letters
    * Fleet coordination, territory management, ware filters
    * Auto-repair system settings
    * Threat Avoidance System settings (NEW)
    * Defensive Equipment Auto-Replenishment settings (NEW)
    * Ship Naming Configuration settings (NEW)
    * Pilot rank titles in ship names (Aprendiz, Mensageiro, etc.)
    * Error messages and trader titles
  - Files: 0001-L055.xml (NEW), 0001-L044.xml (updated), gt_global_settings.xml (updated), 
           gt_xp_training.xml (updated), content.xml (updated)

========================================

Version 0.5.0 - 2025-10-20
--------------------------

========== NEW FEATURES ==========

NEW FEATURE: Dynamic Blacklist System for Threat Intelligence
  - Added: Lua-based dynamic blacklist manager for real-time threat avoidance
  - Integrates with existing threat intelligence system (gt_threat_intelligence.xml)
  - Creates and manages fleet-wide blacklists via X4's internal FFI API
  - Threatened sectors automatically blacklisted using sector macro IDs
  - Blacklists applied only to fleet commanders and solo ships (subordinates inherit)
  - Empty blacklist created at game start/load for instant threat updates
  - Uses sn_mod_support_apis framework for Lua event handling
  - Vanilla pathfinding (gatedistance) automatically respects blacklists
  - No custom pathfinding needed - ships naturally avoid dangerous sectors
  - Configurable enable/disable in Global Settings
  - Configurable threat level threshold for blacklisting (default: 5)
  - Recurring sync (5s), apply (5s), and cleanup (30s) cycles
  - Files: gt_blacklist_manager.lua (NEW), gt_blacklist_loader.xml (NEW),
          gt_threat_intelligence.xml (modified), gt_global_settings.xml (modified)

NEW FEATURE: Defensive Equipment Auto-Replenishment System (Level 15)
  - Added: Automatic restocking of countermeasures AND units (drones/towers)
  - Countermeasures: Flares, chaff (ammostorage.countermeasure) - restocked to configured threshold
  - Units: Defense Drones, Cargo Drones, Repair Drones, Laser Towers (this.ship.units)
  - Configurable equipment balance profiles (5 presets: Balanced, Defense-Focused, etc.)
  - Configurable restock thresholds (countermeasures: 50%, deployables: 70%)
  - Individual toggles for each equipment type
  - Menu UI in Global Settings for all configuration options
  - Properly distinguishes ammostorage.countermeasure vs. ammostorage.deployable vs. this.ship.units
  - Ships request units using vanilla macro references (macro.ship_gen_s_fightingdrone_01_a_macro.ware)
  - Checks this.ship.units.maxcount for capacity (not units.capacity which returns null)
  - Uses add_build_to_modify_ship with proper shopping lists for BOTH ammo and units
  - Initial check: Ships check equipment status BEFORE starting to trade (not just after)
  - Ships no longer enter dangerous sectors with depleted defensive equipment
  - Prevents "one trade then restock" behavior, now "restock then trade"
  - Combined maintenance optimization (repair + equipment in single trip)
  - Integrated with existing auto-repair system (Level 12+)
  - Repair takes priority over equipment if both needed
  - Event-driven system using diff patch (order.resupply.xml)
  - Trading ships now properly maintain ALL defensive equipment in one trip
  - Failure handling: Monitors resupply orders, detects out-of-stock stations (60s timeout)
  - Detailed logbook messages for failed attempts with current equipment levels
  - Ships continue trading after failure and retry after next trade
  - Never get stuck waiting for unavailable equipment
  - Files: gt_maintenance.xml, gt_global_settings.xml, gt_defensive_equipment.xml, 
          gt_trading_signals.xml, gt_configuration.xml, order.resupply.xml (NEW),
          order.trade.galaxytrader.xml

MAJOR REFACTOR: Unified Maintenance System
  - Replaced separate repair/equipment systems with unified gt_maintenance.xml
  - Consolidates repair and equipment checks into single maintenance flow
  - MD scripts prepare data, AI scripts execute (vanilla-first approach)
  - Ships handle repair AND equipment restocking in one maintenance trip
  - Event-driven architecture using signal-based communication
  - Affects: All ships with Level 12+ (repair) and Level 15+ (equipment)
  - Files: gt_maintenance.xml (NEW), order.trade.galaxytrader.xml
  - Deprecated: gt_defensive_equipment.xml, gt_auto_repair.xml (logic moved to gt_maintenance.xml)

========== ENHANCEMENTS ==========

ENHANCEMENT: Logbook Category Reorganization
  - Improved: Reorganized logbook notifications to prevent "Upkeep" flooding
  - Level-up notifications now go to "News" category (was notification-only, now also in logbook)
  - Trade order logs moved to "Tips" category (was "Upkeep")
  - Training notices remain in "Upkeep" (correct category for maintenance)
  - Result: "Upkeep" category now only contains actual upkeep/maintenance notifications
  - Makes it much easier to spot important maintenance alerts
  - User-requested feature - Thanks to TheBaldNord (Nexus Mods) for the excellent suggestion!
  - Files: gt_xp_training.xml, gt_trade_logging.xml

ENHANCEMENT: MD Prepares, AI Executes Pattern
  - MD scripts (gt_maintenance.xml) now only prepare data and validate stations
  - AI scripts (order.trade.galaxytrader.xml) execute actual vanilla orders
  - Data stored in global variables: global.$GT_ResupplyOrders.{$ship}
  - AI uses vanilla actions: add_build_to_modify_ship (not create_order)
  - Prevents immediate="true" issues that terminate AI orders
  - Leverages vanilla's robust station finding, pathfinding, and execution
  - Eliminates need to duplicate complex vanilla logic
  - Files: gt_maintenance.xml, order.trade.galaxytrader.xml

ENHANCEMENT: Comprehensive Diagnostic Logging
  - Added extensive logging to every decision point in maintenance system
  - Logs include: station validation, stock checks, distance calculations, shopping lists
  - Uses visual markers for quick log scanning (checkmarks, warnings, errors, alerts, timers)
  - All critical decisions logged with chance="100" for reliable debugging
  - Equipment status logged with percentages and thresholds
  - Station selection logged with capabilities and distances
  - Makes troubleshooting equipment issues much easier
  - Files: gt_maintenance.xml, order.trade.galaxytrader.xml

ENHANCEMENT: Signal Flow Visibility
  - Added: Detailed logging for GT_No_Trade_Found signal (send + receive)
  - Trade execution now logs AllowIllegal setting when blocking illegal wares
  - AI script now logs signal reception with high visibility (chance="100")
  - Improved troubleshooting for stuck ships
  - Files: gt_trading_execution.xml, order.trade.galaxytrader.xml

========== BALANCE CHANGES ==========

BALANCE: XP Progression Rebalanced for Longer Campaigns
  - Rebalanced: XP values for more realistic progression (previously too fast)
  - Base XP per trade: 50 -> 8 (reduced by 84%)
  - Value divisor: 10,000 -> 100,000 (10x harder to get value bonus)
  - Quality multiplier: 0.5 -> 0.15 (reduced by 70%)
  - Distance divisor: 20 -> 50 (distance matters less)
  - XP cap per trade: 1000 -> 50 (prevents excessive gains)
  - Result: ~500 trades needed to reach max level (was ~85 trades)
  - With 50% multiplier: ~1000 trades | With 100%: ~500 trades | With 200%: ~250 trades
  - Provides meaningful progression throughout longer gameplay sessions
  - Files: gt_configuration.xml

========== CRITICAL FIXES ==========

CRITICAL FIX: Pilot Registration and Ship Naming System
  - Fixed: Complete refactor of pilot change detection and ship name management
  - Removed: ~260 line polling-based ShipPilotChangeMonitor (15-second delay + CPU overhead)
  - New Approach: Event-driven architecture with instant signal-based detection
  
  AI-Based Instant Pilot Change Detection:
    * AI script (order.trade.galaxytrader.xml) now tracks pilot on every loop
    * Detects pilot swaps immediately (0ms-1s latency vs 15s polling)
    * Sends GT_Update_Ship signal with old/new pilot info to MD system
    * Zero polling overhead, zero CPU waste
  
  Smart Order Removal Detection:
    * AI script's on_abort handler now intelligently distinguishes:
      - PERMANENT removal: No default order OR different order → Restore ship name
      - TEMPORARY replacement: Order paused/interrupted → Preserve ship name (for potential resume)
    * Sends GT_Ship_Order_Aborted (restore name) or GT_Ship_Order_Paused (preserve name)
    * Original ship name stored in global.$GT_Pilots.{$pilot}.$OriginalShipName
  
  Subordinate Commander Change Detection:
    * AI script checks if subordinate's commander still has GT order
    * If commander switches to different order → subordinate self-aborts GT order
    * Sends GT_Ship_Order_Aborted signal to restore subordinate's ship name
    * X4's native Assist order takes over subordinate behavior automatically
    * No orphaned subordinates with GT names and non-GT commanders
  
  Orphaned Pilot Cleanup System:
    * Runs immediately on game load + every 5 minutes thereafter
    * Detects pilots whose ships no longer have GT orders (load issues, manual changes)
    * Compares current ship name vs stored $OriginalShipName
    * If ship name still has GT prefix but no GT order → restores original name
    * Marks pilot as 'paused' to preserve XP data for potential resume
    * Handles both direct GT ships and subordinates of GT commanders
  
  Ship Reassignment and Name Tracking:
    * Register_Pilot now ALWAYS renames ship when called (even for existing pilots)
    * Handles three scenarios:
      - New pilot first registration → Store original name, apply GT name
      - Existing pilot resuming on SAME ship → Keep stored name, re-apply GT prefix with rank
      - Existing pilot assigned to DIFFERENT ship → Update stored original name, apply GT name
    * Fixes issue where ships weren't renamed after save/load/reassign cycles
  
  Pilot Change Handling:
    * GT_Update_Ship handler now correctly renames ships when pilots change
    * New pilot is GT pilot → Apply GT naming with rank
    * New pilot is NOT GT pilot → Restore original ship name
    * Cleans up old pilot data if old pilot no longer has associated ship
  
  Implementation Details:
    * AI signal sending: order.trade.galaxytrader.xml (on_abort handler, main loop)
    * MD signal handling: gt_core_system.xml (HandleShipOrderAborted, HandleShipOrderPaused, GT_Update_Ship)
    * Orphaned cleanup: gt_core_system.xml (OrphanedPilotCleanup, TriggerCleanupOnLoad, OrphanedPilotCleanupScheduler)
    * Pilot registration: gt_ship_management.xml (Register_Pilot library)
    * Documentation: PILOT_REGISTRATION_VALIDATION.md (comprehensive scenario validation)
  
  Technical Improvements:
    * Event-driven signals replace polling (instant response vs 15s delay)
    * Zero CPU overhead (no background loops)
    * Handles all edge cases (save/load, manual changes, fleet reassignment)
    * XP data preserved across all scenarios (never lost)
    * Ship names always correctly reflect current status
    * Subordinates properly synchronized with commanders
  
  Result: Ships ALWAYS renamed correctly on assignment/removal/reassignment/load
  Testing: All scenarios validated (see PILOT_REGISTRATION_VALIDATION.md)
  Files: order.trade.galaxytrader.xml, gt_core_system.xml, gt_ship_management.xml

CRITICAL FIX: Training Duration Showing "0 Minutes"
  - Fixed: Training messages showing "Die Prüfung wird etwa 0 Minuten dauern" (0 minutes duration)
  - Root cause: AI script (order.dock.train.xml) sent hardcoded 30-second duration to logging system
  - 30 seconds rounded down to 0 when converted to minutes for display
  - Solution: AI script now retrieves actual calculated duration from global.$GT_Pilots.{$pilot}.$TrainingDuration
  - No fallbacks - uses exact value calculated by MD system (10 min base + skill multiplier)
  - Removed unnecessary "minimum 1 minute" display logic - proper values don't need it
  - Training durations now correctly calculated based on config (10 min base + skill multiplier)
  - Files: order.dock.train.xml, gt_trade_logging.xml

CRITICAL FIX: Docking Check Log Flooding
  - Fixed: Debug logging causing massive log spam (thousands of lines per ship search)
  - Issue 1: Debug code was checking station capabilities using invalid syntax (class.ship_s)
  - Issue 2: After fix, debug logged EVERY trade pair evaluation during search loop
  - Issue 3: Selected trade logging failed with property lookup errors when $bestTrade incomplete
  - Each ship evaluates hundreds/thousands of trade combinations per search
  - Root cause: dockingallowed expects ship object, not ship class
  - Solution: Only log docking status for the FINAL SELECTED trade, not during search
  - Added: Null checks and safe operators (@) for trade property access
  - Debug output: "SELECTED TRADE DOCKING: Ship=X | BUY=Station [OK] | SELL=Station [OK]"
  - Summary: "Rejected X trade pairs due to incompatible docking" (counts only, no spam)
  - Prevents log flooding while maintaining diagnostic capability
  - Files: gt_trading_search.xml

CRITICAL FIX: XP Multiplier Not Applied
  - Fixed: XP Multiplier setting existed but was never applied to XP calculations
  - XP calculation was hardcoded, ignoring player's Global Settings multiplier
  - Implemented: Multiplier now properly applied to all XP gains in order.trade.perform.xml
  - Added: Save game compatibility with automatic validation (invalid values -> 100%)
  - Updated: Multiplier range from 10-100% to 50-200% (100% = default)
  - At 50%: ~1000 trades to max level | At 100%: ~500 trades | At 200%: ~250 trades
  - Allows players to customize progression speed to match playstyle
  - Files: order.trade.perform.xml, gt_global_settings.xml

CRITICAL FIX: Logbook Messages Too Long
  - Fixed: Fleet and Training reports exceeding X4's logbook message limit
  - Fleet Report: Reduced from showing 15 ships (120+ lines) to 5 ships with compact format
  - Training Report: Reduced from unlimited ships to 5 ships with compact format
  - Compact format: One line per ship instead of 8-10 lines
  - Example: "ABC-123: 1.2M Cr, 45 trades [ACTIVE]" or "ABC-123: 45% done, 12 min left"
  - Shows "+X more ships not shown" indicator when fleet exceeds display limit
  - Prevents logbook display errors and truncation issues
  - Files: gt_reporting.xml

CRITICAL FIX: M-Class Ships Stuck with Incompatible Docking
  - Fixed: M-class ships selecting factories with only E-piers (large L+ ship docks)
  - Fixed: Ships unable to complete trades, getting stuck with full cargo
  - Added: dockingallowed.{$ship} validation for BOTH buy and sell stations
  - Trade pairs where ship cannot dock are now skipped during search
  - Works for all ship classes (S/M/L/XL) with proper dock type checking
  - Debug logging shows docking status for SELECTED trade only (no spam)
  - Summary: "Rejected X trade pairs due to incompatible docking"
  - Prevents ships from selecting impossible trade routes
  - Files: gt_trading_search.xml

CRITICAL FIX: Illegal Ware Trade Loop
  - Fixed: Ships stuck in infinite loop when cache contains illegal wares
  - Added: Illegal ware filtering in cache search (respects AllowIllegal setting)
  - Cache now skips illegal trades and continues to next entry automatically
  - Added: $AllowIllegal parameter propagation (AI -> Queue -> Search -> Cache)
  - Ships without illegal trading enabled no longer attempt illegal trades
  - Fixed: Ship ENJ-399 loop issue (selecting Raumsprit repeatedly)
  - Files: gt_trading_search.xml, gt_trading_queue.xml, gt_trading_execution.xml

Version 0.4.0 - 2025-10-18
--------------------------

MAJOR: Trade Completion System Refactor
  - Replaced event_player_trade_completed monitoring with diff patch system
  - Created aiscripts/order.trade.perform.xml (diff patch for X4 native trade orders)
  - Created md/gt_trading_signals.xml (centralized signal router)
  - Removed ~140 lines of complex event monitoring from gt_trading_execution.xml
  - Trade completion/failure now detected via direct X4 engine signals
  - Better trade data (exact amounts, quality, failure reasons)
  - Better performance (event-driven, no polling)
  - Fixed: Subordinate ships now log trades correctly

Version 0.3.8 - 2025-10-18
--------------------------

Training System
  - Fixed: Training duration now uses configured values (not hardcoded 30s)
  - Fixed in: order.dock.train.xml

Trade Cache
  - Added: Cache replenishment system (forces live search if cache < 10 entries)
  - Cache now self-sustaining and never fully depletes
  - Fixed in: gt_trading_search.xml

Version 0.3.7 - 2025-10-18
--------------------------

Trade Cache - CRITICAL: Stale Tradeoffer Fix
  - Fixed: Cached trades failing with "insufficient funds" error
  - Fixed: Ships stuck in infinite restart loop
  - Cache now acts as "hint" - re-queries fresh offers from cached stations
  - Fixed: Corrected find_sell_offer/find_buy_offer syntax (tradepartner vs match_seller)
  - Fixed: Removed stale price pre-filter
  - Fixed: Swapped BuyOffer/SellOffer perspective (ship vs station)
  - Cache hits now work reliably
  - Fixed in: gt_trading_search.xml

Version 0.3.6 - 2025-10-18 (REVERTED)
--------------------------

Subordinate Ships
  - Attempted fix for subordinate trade order failures (reverted)

Version 0.3.5 - 2025-10-18
--------------------------

Trade Loop
  - Fixed: AI order rapid abort/restart cycle
  - Fixed: Ships accumulating multiple trade orders
  - Added: Check for existing orders before requesting new trades
  - Added: Clear stale training flags on order start
  - Fixed in: order.trade.galaxytrader.xml

Version 0.3.4 - 2025-10-18
--------------------------

Trade Queue
  - Fixed: Ships getting multiple trade orders simultaneously
  - Moved busy check to run BEFORE queueing (not after)
  - Ships now execute one trade at a time
  - Fixed in: gt_trading_ai.xml

Version 0.3.3 - 2025-10-18
--------------------------

Trade System
  - Major refactor: Separated XP tracking from ship availability checking
  - Simplified availability check (only checks: has trade orders? has training order?)
  - Removed complex cargo/dock/time validation
  - Ships no longer blocked from trading
  - Fixed in: gt_trading_queue.xml

Version 0.3.2 - 2025-10-18
--------------------------

Trade Cache
  - Added 4-layer validation for cached offers (availability, stock, prices)
  - Ships no longer get failed orders from stale cache
  - Fixed in: gt_trading_search.xml

Version 0.3.1 - 2025-10-18
--------------------------

Settings Menu
  - Removed unused "Notification Level" slider

Version 0.3.0 - 2025-10-18
--------------------------

Training & Settings
  - Removed testing mode (production durations active)
  - Updated slider ranges (ROI: 1-30%, XP: 10-100%)

Version 0.2.1 - 2025-10-18
--------------------------

FIXES:
  - Ship names now persist through interruptions
  - Trade cache system completely rewritten and working
  - Settings menu now appears correctly
  - Fixed table key errors in cache writes
  - Fixed reversed buy/sell assignments
  - Better error handling throughout

FILES CHANGED:
  - gt_core_system.xml
  - gt_territory_management.xml
  - gt_trading_search.xml
  - gt_trade_logging.xml
  - gt_trading_execution.xml
  - gt_market_intelligence.xml
  - gt_reporting.xml
  - gt_global_settings.xml
  - gt_trading_maintenance.xml
  - gt_fleet_coordination.xml

Version 0.2.0 - 2024-01-01
--------------------------

Initial Release

FEATURES:
  - Advanced Trading AI with smart route selection
  - XP Progression System (15 levels)
  - Training requirements at levels 3, 6, 9, and 12
  - Fleet Coordination
  - Mobile Satellite Intelligence (Level 9+)
  - Threat Intelligence System
  - Auto-Repair System (Level 12+)
  - Ship Management and automatic renaming
  - Configuration system

REQUIREMENTS:
  - SirNukes Mod Support APIs
  - X4 version 6.0+

Author: GoAhead
