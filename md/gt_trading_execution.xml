<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GT_Trading_Execution" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/md.xsd">
  <cues>
    <!-- ========================================
         GALAXY TRADER MK3 - TRADE EXECUTION
         Handles trade order creation and completion tracking
         ======================================== -->
    
    <!-- Execute Trade -->
    <cue name="ExecuteTrade" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$trade" exact="$params.$Trade"/>
        
        <!-- ✅ FIX: Validate trade is not null before accessing properties -->
        <do_if value="not $trade?">
          <debug_text text="'[GT-Execution] ⚠️ ERROR: ExecuteTrade called with null trade for ' + $ship.idcode" chance="100"/>
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- ✅ FIX: Validate trade has required properties -->
        <set_value name="$tradeValid" exact="false"/>
        <do_if value="$trade?">
          <set_value name="$testBuyOffer" exact="@$trade.$BuyOffer"/>
          <set_value name="$testSellOffer" exact="@$trade.$SellOffer"/>
          <do_if value="$testBuyOffer? and $testSellOffer?">
            <set_value name="$tradeValid" exact="true"/>
          </do_if>
        </do_if>
        
        <do_if value="not $tradeValid">
          <debug_text text="'[GT-Execution] ⚠️ ERROR: ExecuteTrade called with invalid trade (missing BuyOffer/SellOffer) for ' + $ship.idcode" chance="100"/>
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- Enhanced execution logging -->
        <do_if value="$tradeValid">
          <set_value name="$profit" exact="@$trade.$Profit"/>
          <set_value name="$amount" exact="@$trade.$Amount"/>
          <set_value name="$buyPrice" exact="@$trade.$BuyPrice"/>
          <set_value name="$sellPrice" exact="@$trade.$SellPrice"/>
          <set_value name="$distance" exact="@$trade.$Distance"/>
          <set_value name="$wareName" exact="@$trade.$BuyOffer.ware.name"/>
          <set_value name="$buyStationName" exact="@$trade.$BuyOffer.owner.knownname"/>
          <set_value name="$sellStationName" exact="@$trade.$SellOffer.owner.knownname"/>
          <debug_text text="'[GalaxyTrader MK3] ' + $ship.knownname + ' executing trade for ' + ($profit / 100) + ' Cr profit' + '\n  📦 Ware: ' + $wareName + ' (x' + $amount + ')' + '\n  📍 BUY from: ' + $buyStationName + ' @ ' + ($buyPrice / 100) + ' Cr' + '\n  📍 SELL to: ' + $sellStationName + ' @ ' + ($sellPrice / 100) + ' Cr' + '\n  🚀 Distance: ' + $distance + ' jumps' + '\n  💰 Profit: ' + ($profit / 100) + ' Cr'" chance="100"/>
        </do_if>
        
        <!-- Only proceed if trade is valid -->
        <do_if value="$tradeValid">
          <!-- CRITICAL FIX: Validate offers are still available -->
          <!-- ✅ FIX: Use safe operators to access trade properties -->
          <set_value name="$buyOffer" exact="@$trade.$BuyOffer"/>
          <set_value name="$sellOffer" exact="@$trade.$SellOffer"/>
          <set_value name="$buyOfferValid" exact="false"/>
          <set_value name="$sellOfferValid" exact="false"/>
          <do_if value="$buyOffer? and $sellOffer?">
            <set_value name="$buyOfferValid" exact="$buyOffer.available and $buyOffer.amount gt 0"/>
            <set_value name="$sellOfferValid" exact="$sellOffer.available and $sellOffer.amount gt 0"/>
          </do_if>
          <set_value name="$canExecute" exact="true"/>
          
          <do_if value="not $buyOfferValid or not $sellOfferValid">
            <debug_text text="'[GalaxyTrader MK3] ⚠ Trade offer(s) no longer valid for ' + $ship.knownname" chance="100"/>
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
            <set_value name="$canExecute" exact="false"/>
          </do_if>
          
          <!-- CRITICAL FIX: Verify ship can carry the ware -->
          <do_if value="$canExecute">
            <set_value name="$ware" exact="@$buyOffer.ware"/>
            <do_if value="not $ware?">
              <debug_text text="'[GalaxyTrader MK3] ⚠ Trade missing BuyOffer.ware for ' + $ship.knownname" chance="100"/>
              <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
              <set_value name="$canExecute" exact="false"/>
            </do_if>
            <do_if value="$canExecute and $ware?">
              <do_if value="$ship.cargo.{$ware}.max le 0">
                <debug_text text="'[GalaxyTrader MK3] ⚠ Ship ' + $ship.knownname + ' cannot carry ware ' + $ware.name + ' - aborting trade'" chance="100"/>
                <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
                <set_value name="$canExecute" exact="false"/>
              </do_if>
            </do_if>
          </do_if>
          
          <!-- CRITICAL FIX: Final check for illegal wares -->
          <do_if value="$canExecute">
          <set_value name="$allowIllegal" exact="@global.$GT_AIParameters.{$ship}.$AllowIllegal"/>
          <do_if value="not $allowIllegal">
            <!-- Simple type check: is this ware illegal to any faction? -->
            <do_if value="$ware? and $ware.illegal">
              <debug_text text="'[GT-Execution] 🚫 ILLEGAL WARE BLOCKED: ' + $ship.knownname + ' attempted to trade ' + $ware.name + ' (ware type is illegal, AllowIllegal: ' + @$params.$AllowIllegal + ')'" chance="100"/>
              <!-- <debug_text text="'[GT-Execution] 📡 Sending GT_No_Trade_Found signal to ' + $ship.idcode" chance="100"/> -->
              <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
              <!-- <debug_text text="'[GT-Execution] ✅ GT_No_Trade_Found signal sent successfully'" chance="100"/> -->
              <set_value name="$canExecute" exact="false"/>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- ═══════════════════════════════════════════════════════════════════════════ -->
        <!-- OPTIMIZATION 4: Final blacklist validation (catches mid-search updates) -->
        <!-- This check runs ONCE per trade execution (vs. 1.3M times during search) -->
        <!-- If blacklisted, restart search - pre-filtering will catch updated blacklist -->
        <!-- Impact: 12 property lookups once per execution (minimal overhead) -->
        <!-- ═══════════════════════════════════════════════════════════════════════════ -->
        <do_if value="$canExecute">
          <!-- Determine ship's blacklistgroup (same logic as vanilla) -->
          <set_value name="$blacklistgroup" exact="blacklistgroup.civilian"/>
          <do_if value="(@$ship.primarypurpose == purpose.fight) or (@$ship.primarypurpose == purpose.auxiliary)">
            <set_value name="$blacklistgroup" exact="blacklistgroup.military"/>
          </do_if>
          
          <!-- CRITICAL: Check path reachability FIRST (faster to fail on unreachable) -->
          <!-- Extract stations from trade structure (handle both formats) -->
          <!-- ✅ FIX: Use pre-extracted $buyOffer and $sellOffer -->
          <set_value name="$buyStation" exact="null"/>
          <set_value name="$sellStation" exact="null"/>
          <do_if value="$trade.$BuyStation?">
            <set_value name="$buyStation" exact="$trade.$BuyStation"/>
          </do_if>
          <do_else>
            <set_value name="$buyStation" exact="@$buyOffer.owner"/>
          </do_else>
          <do_if value="$trade.$SellStation?">
            <set_value name="$sellStation" exact="$trade.$SellStation"/>
          </do_if>
          <do_else>
            <set_value name="$sellStation" exact="@$sellOffer.owner"/>
          </do_else>
          
          <!-- Use BLACKLIST-AWARE gatedistance so it respects blocked paths from threat system -->
          <!-- Correct syntax: $ship.gatedistance.{$targetSector}.{$blacklistgroup}.{$ship} (NO blacklisttype!) -->
          <set_value name="$buySector" exact="$buyStation.sector"/>
          <set_value name="$sellSector" exact="$sellStation.sector"/>
          <set_value name="$currentSector" exact="$ship.sector"/>
          
          <!-- ✅ ESCAPE LOGIC: Calculate path distances with escape support -->
          <!-- Check if current sector is blacklisted for escape logic -->
          <set_value name="$currentSectorIsBlacklistedForEscape" exact="false"/>
          <do_if value="$blacklistgroup?">
            <set_value name="$currentSectorActivityBlacklisted" exact="@$currentSector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
            <set_value name="$currentSectorTravelBlacklisted" exact="@$currentSector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
            <set_value name="$currentSectorIsBlacklistedForEscape" exact="$currentSectorActivityBlacklisted or $currentSectorTravelBlacklisted"/>
          </do_if>
          
          <!-- ✅ ESCAPE LOGIC: Buy path calculation with escape support -->
          <!-- Buy path: If ship is already in buy sector, distance is 0 (no travel needed) -->
          <set_value name="$buyDistance" exact="-1"/>
          <do_if value="$buySector == $currentSector">
            <!-- Ship already in buy sector - no travel needed -->
            <set_value name="$buyDistance" exact="0"/>
          </do_if>
          <do_elseif value="$currentSectorIsBlacklistedForEscape">
            <!-- Ship escaping from blacklisted sector - use non-blacklist-aware gatedistance to find ANY path -->
            <set_value name="$buyDistance" exact="$ship.gatedistance.{$buySector}"/>
          </do_elseif>
          <do_else>
            <!-- Normal case: Ship needs to travel TO buy sector - use blacklist-aware pathfinding -->
            <set_value name="$buyDistance" exact="$ship.gatedistance.{$buySector}.{$blacklistgroup}.{$ship}"/>
          </do_else>
          
          <!-- Sell path: Calculate based on buy location -->
          <set_value name="$sellDistance" exact="-1"/>
          <do_if value="$sellSector == $buySector">
            <!-- Buy and sell in same sector -->
            <set_value name="$sellDistance" exact="0"/>
          </do_if>
          <do_elseif value="$buySector == $currentSector">
            <!-- ✅ ESCAPE CASE: Ship is in buy sector (same as current) - check path FROM ship's current position to sell sector -->
            <!-- This allows escape: ship in Lasting Vengeance → buy in Lasting Vengeance → sell in safe sector -->
            <!-- ✅ ESCAPE LOGIC: If ship is in blacklisted sector, use NON-blacklist-aware gatedistance to find ANY path -->
            <!-- This allows escape even if all paths go through blacklisted sectors -->
            <set_value name="$currentSectorIsBlacklisted" exact="false"/>
            <do_if value="$blacklistgroup?">
              <set_value name="$currentSectorActivityBlacklisted" exact="@$currentSector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$currentSectorTravelBlacklisted" exact="@$currentSector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$currentSectorIsBlacklisted" exact="$currentSectorActivityBlacklisted or $currentSectorTravelBlacklisted"/>
            </do_if>
            <do_if value="$currentSectorIsBlacklisted">
              <!-- Escape case: Use non-blacklist-aware distance to check if ANY path exists -->
              <set_value name="$sellDistance" exact="$ship.gatedistance.{$sellSector}"/>
            </do_if>
            <do_else>
              <!-- Normal case: Use blacklist-aware distance -->
              <set_value name="$sellDistance" exact="$ship.gatedistance.{$sellSector}.{$blacklistgroup}.{$ship}"/>
            </do_else>
          </do_elseif>
          <do_else>
            <!-- Normal case: Need to travel from buy to sell sector -->
            <set_value name="$sellDistance" exact="$buySector.gatedistance.{$sellSector}.{$blacklistgroup}.{$ship}"/>
          </do_else>
          
          <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
            <!-- ✅ FIX: Use pre-extracted $ware and safe operators -->
            <set_value name="$wareNameForLog" exact="@$ware.name"/>
            <set_value name="$buyStationNameForLog" exact="@$buyStation.knownname"/>
            <set_value name="$buySectorNameForLog" exact="@$buyStation.sector.knownname"/>
            <set_value name="$sellStationNameForLog" exact="@$sellStation.knownname"/>
            <set_value name="$sellSectorNameForLog" exact="@$sellStation.sector.knownname"/>
            <debug_text text="'[GT-Execution] 🚫 PATH BLOCKED: Trade became unreachable - restarting' +
              '\n  Ware: ' + $wareNameForLog +
              '\n  BUY: ' + $buyStationNameForLog + ' (Sector: ' + $buySectorNameForLog + ', Distance: ' + $buyDistance + ')' +
              '\n  SELL: ' + $sellStationNameForLog + ' (Sector: ' + $sellSectorNameForLog + ', Distance: ' + $sellDistance + ')' +
              '\n  Reason: No path exists (disconnected sectors, war, or gates destroyed)' +
              '\n  → Trade execution aborted, ship will search again with updated connectivity'" 
              chance="100"/>
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
            <set_value name="$canExecute" exact="false"/>
          </do_if>
          
          <do_if value="$canExecute">
            <!-- Check buy/sell station blacklists (matches vanilla order.trade.perform) -->
            <!-- Vanilla line 156: checks objectactivity, sectoractivity, sectortravel -->
            <set_value name="$buyStationBlacklisted" exact="@$buyStation.isblacklisted.{blacklisttype.objectactivity}.{$blacklistgroup}.{$ship}"/>
            <set_value name="$buySectorActivityBlacklisted" exact="@$buyStation.sector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
            <set_value name="$buySectorTravelBlacklisted" exact="@$buyStation.sector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
            
            <set_value name="$sellStationBlacklisted" exact="@$sellStation.isblacklisted.{blacklisttype.objectactivity}.{$blacklistgroup}.{$ship}"/>
            <set_value name="$sellSectorActivityBlacklisted" exact="@$sellStation.sector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
            <set_value name="$sellSectorTravelBlacklisted" exact="@$sellStation.sector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
            
            <!-- ✅ ESCAPE LOGIC: Block buying in blacklisted sector (force escape) -->
            <!-- Ship in blacklisted sector must NOT buy in that sector -->
            <!-- Ship must escape by buying from a different (non-blacklisted) sector -->
            <set_value name="$buySectorBlocked" exact="false"/>
            <do_if value="$buySectorActivityBlacklisted or $buySectorTravelBlacklisted">
              <!-- Block buying in blacklisted sector (even if ship is already there) -->
              <set_value name="$buySectorBlocked" exact="true"/>
            </do_if>
            <do_else>
              <!-- Buy sector is not blacklisted - only check station -->
              <set_value name="$buySectorBlocked" exact="$buyStationBlacklisted"/>
            </do_else>
            
            <!-- ✅ ESCAPE LOGIC: Apply escape exceptions for sell sector -->
            <!-- Escape exception: Allow sell sector if ship is already IN it (escape FROM) -->
            <!-- But still block if ship needs to travel TO a blacklisted sector -->
            <set_value name="$sellSectorBlocked" exact="false"/>
            <do_if value="$sellSectorActivityBlacklisted or $sellSectorTravelBlacklisted">
              <do_if value="$sellSector == $currentSector">
                <!-- Ship is already in sell sector - allow escape FROM blacklisted sector -->
                <!-- Only block if station itself is blacklisted -->
                <set_value name="$sellSectorBlocked" exact="$sellStationBlacklisted"/>
              </do_if>
              <do_else>
                <!-- Ship needs to travel TO a blacklisted sector - BLOCK -->
                <set_value name="$sellSectorBlocked" exact="true"/>
              </do_else>
            </do_if>
            <do_else>
              <!-- Sell sector is not blacklisted - only check station -->
              <set_value name="$sellSectorBlocked" exact="$sellStationBlacklisted"/>
            </do_else>
            
            <!-- ✅ ESCAPE LOGIC: Block intra-sector trades in blacklisted sectors -->
            <!-- If ship is in blacklisted sector and both buy/sell are same sector, block to force escape -->
            <set_value name="$currentSectorIsBlacklisted" exact="false"/>
            <do_if value="$blacklistgroup?">
              <set_value name="$currentSectorActivityBlacklisted" exact="@$currentSector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$currentSectorTravelBlacklisted" exact="@$currentSector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$currentSectorIsBlacklisted" exact="$currentSectorActivityBlacklisted or $currentSectorTravelBlacklisted"/>
            </do_if>
            <set_value name="$isIntraSectorTradeInBlacklisted" exact="false"/>
            <do_if value="$currentSectorIsBlacklisted and $buySector == $currentSector and $sellSector == $currentSector">
              <set_value name="$isIntraSectorTradeInBlacklisted" exact="true"/>
              <set_value name="$buySectorBlocked" exact="true"/>  <!-- Block by marking as blacklisted -->
            </do_if>
            
            <!-- Final blacklist check (with escape exceptions applied) -->
            <set_value name="$isBlacklisted" exact="$buySectorBlocked or $sellSectorBlocked"/>
            
            <do_if value="$isBlacklisted">
              <!-- ✅ FIX: Use pre-extracted $ware and safe operators -->
              <set_value name="$wareNameForLog2" exact="@$ware.name"/>
              <set_value name="$buyStationNameForLog2" exact="@$buyStation.knownname"/>
              <set_value name="$buySectorNameForLog2" exact="@$buyStation.sector.knownname"/>
              <set_value name="$sellStationNameForLog2" exact="@$sellStation.knownname"/>
              <set_value name="$sellSectorNameForLog2" exact="@$sellStation.sector.knownname"/>
              <debug_text text="'[GT-Execution] ⚠️ BLACKLIST DETECTED: Trade became unsafe mid-search - restarting' +
                '\n  Ware: ' + $wareNameForLog2 +
                '\n  BUY: ' + $buyStationNameForLog2 + ' (Sector: ' + $buySectorNameForLog2 + ')' +
                '\n    Station: ' + $buyStationBlacklisted + ', SectorActivity: ' + $buySectorActivityBlacklisted + ', SectorTravel: ' + $buySectorTravelBlacklisted +
                '\n  SELL: ' + $sellStationNameForLog2 + ' (Sector: ' + $sellSectorNameForLog2 + ')' +
                '\n    Station: ' + $sellStationBlacklisted + ', SectorActivity: ' + $sellSectorActivityBlacklisted + ', SectorTravel: ' + $sellSectorTravelBlacklisted +
                '\n  → Trade execution aborted, ship will search again (updated blacklist will be applied)'" 
                chance="100"/>
              <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
              <set_value name="$canExecute" exact="false"/>
            </do_if>
          </do_if>
        </do_if>
        <!-- ═══════════════════════════════════════════════════════════════════════════ -->
        
        <!-- Only proceed if all checks passed (inside $tradeValid block) -->
        <do_if value="$canExecute">
          <!-- CRITICAL FIX: Verify sufficient funds -->
          <set_value name="$availableMoney" exact="player.money"/>
          <set_value name="$moneySource" exact="'player'"/>
          
          <!-- Check if ship has a homebase station - use station's money instead -->
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists and $homeBase.isclass.station">
            <set_value name="$availableMoney" exact="$homeBase.money"/>
            <set_value name="$moneySource" exact="'homebase: ' + $homeBase.knownname"/>
          </do_if>
          
          <!-- ✅ FIX: Use safe operators to access trade properties -->
          <set_value name="$tradeAmount" exact="@$trade.$Amount"/>
          <set_value name="$tradeBuyPrice" exact="@$trade.$BuyPrice"/>
          <set_value name="$tradeCost" exact="0"/>
          <do_if value="$tradeAmount? and $tradeBuyPrice?">
            <set_value name="$tradeCost" exact="$tradeAmount * $tradeBuyPrice"/>
          </do_if>
          <do_if value="$availableMoney lt $tradeCost">
            <debug_text text="'[GalaxyTrader MK3] ⚠ INSUFFICIENT FUNDS: ' + $ship.knownname + ' needs ' + ($tradeCost / 100) + ' Cr but only has ' + ($availableMoney / 100) + ' Cr'" chance="100"/>
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
            <set_value name="$canExecute" exact="false"/>
          </do_if>
          
          <do_if value="$canExecute">
            <!-- PHASE 4.1: ActiveTrades tracking DEPRECATED - Now handled by diff patch signals -->
            <!-- The diff patch in order.trade.perform.xml sends signals directly when trades complete/fail -->
            
            <!-- Create X4 native TradePerform orders for buy-sell cycle -->
            <!-- 
              ✅ CRITICAL: internal="true" enables blacklist routing in vanilla pathfinding
              - When internal="true", X4's TradePerform order uses strictblacklist mode
              - This makes move.generic route AROUND blacklisted sectors instead of through them
              - Ships can still reach destinations if an alternate path exists
              - Without this parameter, ships ignore blacklists and fly through hostile sectors
              
              How it works:
              1. create_trade_order with internal="true" creates TradePerform order
              2. TradePerform passes internalorder="true" to move.generic (via order.dock.xml)
              3. move.generic uses strictblacklist="true" when calculating paths
              4. Vanilla pathfinding automatically finds routes that avoid blacklisted sectors
              5. If no valid path exists, order fails gracefully (better than ship destruction)
              
              Reference: ORIGINAL_MODS_DO NOT_MODIFY/x4Original/aiscripts/order.trade.routine.xml
            -->
            <!-- ✅ NEW: Store complete trade LIST for AI validation and execution -->
            <!-- AI script will iterate through list and validate blacklist for each trade -->
            <do_if value="not global.$GT_PendingTrades?">
              <set_value name="global.$GT_PendingTrades" exact="table[]"/>
            </do_if>
            
            <!-- Get trade list from params (if available, otherwise use single trade for backward compat) -->
            <set_value name="$tradeList" exact="@event.param.$TradeList"/>
            <do_if value="not $tradeList? or $tradeList.count == 0">
              <!-- Fallback: wrap single trade in list -->
              <set_value name="$tradeList" exact="[$trade]"/>
            </do_if>
            
            <!-- Store the full trade list -->
            <set_value name="global.$GT_PendingTrades.{$ship}" exact="$tradeList"/>
            
            <!-- DEBUG: Log exact trade list stored for AI validation -->
            <!-- Split into multiple messages if list is large (X4 string limit ~4096 chars) -->
            <set_value name="$maxTradesPerLog" exact="25"/>
            <set_value name="$totalTrades" exact="$tradeList.count"/>
            <set_value name="$currentBatch" exact="0"/>
            
            <do_if value="$totalTrades gt $maxTradesPerLog">
              <!-- Large list: Split into batches -->
              <!-- Calculate number of batches needed (rounds up: (n-1)/k + 1) -->
              <set_value name="$numBatches" exact="(($totalTrades - 1) / $maxTradesPerLog) + 1"/>
              <do_all exact="$numBatches" counter="$batch">
                <set_value name="$startIdx" exact="$batch * $maxTradesPerLog"/>
                <set_value name="$endIdx" exact="[$startIdx + $maxTradesPerLog, $totalTrades].min"/>
                <!-- Ensure endIdx is valid: not less than startIdx, not greater than totalTrades -->
                <set_value name="$actualEndIdx" exact="[[$endIdx, $startIdx + 1].max, $totalTrades].min"/>
                <!-- Ensure we don't loop beyond list bounds -->
                <set_value name="$loopCount" exact="[[$actualEndIdx - $startIdx, $totalTrades - $startIdx].min, 0].max"/>
                <!-- Only process and log if there are trades in this batch -->
                <do_if value="$loopCount gt 0">
                  <set_value name="$logStoredList" exact="'[GT-Execution] 💾 STORED trades for AI validation: ' + $ship.idcode + ' (batch ' + ($batch + 1) + '/' + $numBatches + ', trades ' + $startIdx + '-' + ($actualEndIdx - 1) + ' of ' + $totalTrades + ')'"/>
                  <do_all exact="$loopCount" counter="$offset">
                    <set_value name="$i" exact="$startIdx + $offset"/>
                    <!-- Safety check: ensure index is within bounds -->
                    <do_if value="$i lt $totalTrades">
                      <set_value name="$listTrade" exact="$tradeList.{$i}"/>
                      <set_value name="$logStoredList" exact="$logStoredList + 
                        '\n  [' + $i + '] ' + @$listTrade.$BuyOffer.ware.name + 
                        ' | Buy: ' + @$listTrade.$BuyStation.knownname + ' (Sector: ' + @$listTrade.$BuyStation.sector.knownname + ') @ ' + (@$listTrade.$BuyPrice / 100) + ' Cr' +
                        ' | Sell: ' + @$listTrade.$SellStation.knownname + ' (Sector: ' + @$listTrade.$SellStation.sector.knownname + ') @ ' + (@$listTrade.$SellPrice / 100) + ' Cr' +
                        ' | Score: ' + $listTrade.$Score + ' | Profit: ' + (@$listTrade.$Profit / 100) + ' Cr | ROI: ' + @$listTrade.$ROI + '% | Dist: ' + $listTrade.$Distance + ' jumps'"/>
                    </do_if>
                  </do_all>
                  <debug_text text="$logStoredList" chance="100"/>
                </do_if>
              </do_all>
              <debug_text text="'[GT-Execution] ⚠ AI will iterate through list and validate blacklist for each trade'" chance="100"/>
            </do_if>
            <do_else>
              <!-- Small list: Single message -->
              <set_value name="$logStoredList" exact="'[GT-Execution] 💾 STORED ' + $totalTrades + ' trades for AI validation: ' + $ship.idcode"/>
              <do_all exact="$totalTrades" counter="$i">
                <set_value name="$listTrade" exact="$tradeList.{$i}"/>
                <set_value name="$logStoredList" exact="$logStoredList + 
                  '\n  [' + $i + '] ' + @$listTrade.$BuyOffer.ware.name + 
                  ' | Buy: ' + @$listTrade.$BuyStation.knownname + ' (Sector: ' + @$listTrade.$BuyStation.sector.knownname + ') @ ' + (@$listTrade.$BuyPrice / 100) + ' Cr' +
                  ' | Sell: ' + @$listTrade.$SellStation.knownname + ' (Sector: ' + @$listTrade.$SellStation.sector.knownname + ') @ ' + (@$listTrade.$SellPrice / 100) + ' Cr' +
                  ' | Score: ' + $listTrade.$Score + ' | Profit: ' + (@$listTrade.$Profit / 100) + ' Cr | ROI: ' + @$listTrade.$ROI + '% | Dist: ' + $listTrade.$Distance + ' jumps'"/>
              </do_all>
              <set_value name="$logStoredList" exact="$logStoredList + '\n  ⚠ AI will iterate through list and validate blacklist for each trade'"/>
              <debug_text text="$logStoredList" chance="100"/>
            </do_else>
            
            <!-- NOTE: Orders are NOT created here anymore! -->
            <!-- AI script will validate blacklist and create orders if valid -->
            <!-- This prevents wasted order creation for blacklisted stations -->
            
            <!-- SKIP logbook for now - will be logged after AI validates and creates orders -->
            <!-- Logbook signal was causing cue to complete before GT_Trade_Found could be sent -->
            
            <!-- Update ship statistics -->
            <do_if value="global.$GT_Ships.{$ship}?">
              <set_value name="global.$GT_Ships.{$ship}.$LastUpdate" exact="player.age"/>
            </do_if>
            
            <!-- CRITICAL: Signal AI that trade is ready for validation -->
            <!-- <debug_text text="'[GT-Execution] 📤 SENDING GT_Trade_Found signal to ' + $ship.idcode + ' at game time ' + player.age" chance="100"/> -->
            <signal_objects object="$ship" param="'GT_Trade_Found'"/>
            <!-- <debug_text text="'[GT-Execution] ✅ GT_Trade_Found signal SENT to ' + $ship.idcode + ' at game time ' + player.age" chance="100"/> -->
          </do_if>
        </do_if>
        <!-- ✅ Close $tradeValid block -->
        </do_if>
      </actions>
    </cue>
    
    <!-- PHASE 4.2: TradeCompleted event monitoring REMOVED
         
         The old TradeCompleted cue (140+ lines) has been completely removed and replaced with
         the new diff patch signal system in gt_trading_signals.xml. The new system:
         
         Benefits:
         - Uses order.trade.perform.xml diff patch to inject signals directly from X4 native code
         - Provides richer trade data (actual transferred amounts, quality, exact failure reasons)
         - Eliminates complex buyer/seller matching logic
         - No longer needs ActiveTrades buy/sell phase tracking
         - More reliable and event-driven
         
         What was removed:
         - event_player_trade_completed monitoring (slow, requires matching)
         - Manual buy/sell phase tracking with global.$GT_TradingData.$ActiveTrades
         - Complex buyer/seller identification logic
         - Stale entry cleanup code
         
         The new system handles all of this automatically via diff patch signals.
    -->
    
  </cues>
</mdscript>
