<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GT_Trading_Search" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/md.xsd">
  <cues>
    <!-- ========================================
         GALAXY TRADER MK3 - SEARCH ENGINE
         Core trade route search and matching logic
         ======================================== -->
    
    <!-- Search for Trade Routes (MAIN SEARCH ENGINE) -->
    <cue name="SearchTradeRoutes" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- ✅ PERFORMANCE FIX: Receive parameters directly from event to prevent race conditions -->
        <!-- Handle case where SearchLiveTrades_Resume signals again after batch completion -->
        <set_value name="$params" exact="event.param"/>
        <do_if value="not $params?">
          <!-- Parameters not provided - try to get from search queue or batch data -->
          <set_value name="$shipFromQueue" exact="null"/>
          <do_if value="global.$GT_SearchResult? and global.$GT_SearchResult.$Ship?">
            <!-- Ship stored in SearchResult from live search -->
            <set_value name="$shipFromQueue" exact="global.$GT_SearchResult.$Ship"/>
          </do_if>
          
          <do_if value="$shipFromQueue?">
            <!-- Try to get params from search queue -->
            <do_if value="global.$GT_SearchQueue.$Params? and global.$GT_SearchQueue.$Params.{$shipFromQueue}?">
              <set_value name="$params" exact="global.$GT_SearchQueue.$Params.{$shipFromQueue}"/>
            </do_if>
            <do_else>
              <!-- Reconstruct params from batch data (if still available) -->
              <set_value name="$batchData" exact="@global.$GT_BatchDataList.{$shipFromQueue}"/>
              <do_if value="$batchData?">
                <set_value name="$allowIllegalDefault" exact="false"/>
                <set_value name="$params" exact="table[
                  $Ship = $shipFromQueue,
                  $MaxDistance = @$batchData.$maxDistance,
                  $MinROI = @$batchData.$minROI,
                  $MinAbsoluteProfit = @$batchData.$minAbsoluteProfit,
                  $FactionPriority = @$batchData.$factionPriority,
                  $AllowIllegal = $allowIllegalDefault
                ]"/>
              </do_if>
            </do_else>
          </do_if>
        </do_if>
        
        <!-- Validate params exist -->
        <do_if value="not $params?">
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GT-Search] ⚠️ SearchTradeRoutes called without parameters - cannot proceed'" chance="100"/>
          </do_if>
          <cancel_cue cue="this"/>
        </do_if>
        
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        
        <!-- Create faction priority text for debug output -->
        <set_value name="$factionPriorityText" exact="if $factionPriority == 0 then 'Player Only' else if $factionPriority == 1 then 'Foreign First' else 'Equal Priority'"/>
        
        <!-- Get distance penalty setting (0-100% converted to 0.0-2.0 multiplier) -->
        <set_value name="$distancePenaltyMultiplier" exact="1.0"/> <!-- Default: 50% = 1.0 -->
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$DistancePenalty?">
          <!-- Convert 0-100% to 0.0-2.0: 0%=0.0, 50%=1.0, 100%=2.0 -->
          <set_value name="$distancePenaltyMultiplier" exact="global.$GT_AIParameters.{$ship}.$DistancePenalty / 50.0"/>
        </do_if>

        <!-- Resolve pilot skill and apply feature gates + level-based thresholds -->
        <run_actions ref="md.GT_Ship_Management.Calculate_Skill_Level" result="$skillInfo">
          <param name="ship" value="$ship"/>
        </run_actions>
        <set_value name="$skillLevel" exact="if $skillInfo? and $skillInfo.$Level? then $skillInfo.$Level else 1"/>

        <!-- Feature gates by skill level -->
        <set_value name="$gt_ThreatIntel" exact="$skillLevel ge 6"/>
        <set_value name="$gt_SatelliteIntel" exact="$skillLevel ge 9"/>
        <set_value name="$gt_FleetCoord" exact="$skillLevel ge 12"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$skillLevel ge 15"/>

        <!-- Level-based ROI and Absolute Profit thresholds (0.5x @Lv1 → 2.0x @Lv15) -->
        <set_value name="$roiMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$profitMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$minROI" exact="$minROI * $roiMultiplier"/>
        <set_value name="$minAbsoluteProfit" exact="($minAbsoluteProfit * $profitMultiplier)i"/>
        
        <!-- DEBUG: Trade search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <set_value name="$pilotInfo" exact="'No Pilot'"/>
          <do_if value="$ship.pilot">
            <set_value name="$shownSkill" exact="1"/>
            <do_if value="global.$GT_Pilots.{$ship.pilot}? and global.$GT_Pilots.{$ship.pilot}.$Level?">
              <set_value name="$shownSkill" exact="global.$GT_Pilots.{$ship.pilot}.$Level"/>
            </do_if>
            <do_elseif value="$ship.pilot.skill.management?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.management"/>
            </do_elseif>
            <do_elseif value="$ship.pilot.skill.piloting?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.piloting"/>
            </do_elseif>
            <set_value name="$pilotInfo" exact="$ship.pilot.name + ' (Skill: ' + $shownSkill + ')'"/>
          </do_if>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === TRADE SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nPilot: ' + $pilotInfo + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin ROI: ' + $minROI + '%' + '\nMin Absolute Profit: ' + ($minAbsoluteProfit / 100) + ' Cr' + '\nShip Cargo: ' + ($ship.cargo.capacity.all - $ship.cargo.free.all) + '/' + $ship.cargo.capacity.all" chance="100"/>
        </do_if>
        
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== PHASE 1: CHECK TRADE CACHE WITH AGE VALIDATION ===== -->
        <!-- Track search method for diagnostics -->
        <set_value name="$searchMethod" exact="'cache'"/>
        <set_value name="$cacheChecked" exact="true"/>
        <set_value name="$cacheCount" exact="0"/>
        <do_if value="global.$GT_TradeCache?">
          <set_value name="$cacheCount" exact="global.$GT_TradeCache.count"/>
        </do_if>
        
        <signal_cue_instantly cue="SearchCachedTrades" param="table[
          $Ship = $ship,
          $MaxDistance = $maxDistance,
          $MinROI = $minROI,
          $MinAbsoluteProfit = $minAbsoluteProfit,
          $FactionPriority = $factionPriority,
          $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
          $SkillLevel = $skillLevel,
          $AllowIllegal = $params.$AllowIllegal
        ]"/>
        
        <!-- Extract cache results from global return variable -->
        <set_value name="$foundCachedTrade" exact="@global.$GT_SearchResult.$Found"/>
        <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
        <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
        <set_value name="$cacheBlacklistRejections" exact="@global.$GT_SearchResult.$BlacklistRejections"/>
        <set_value name="$tradeList" exact="@global.$GT_SearchResult.$TradeList"/>
        
        <!-- Initialize rejection statistics (for both cached and live searches) -->
        <set_value name="$tradesRejectedDocking" exact="0"/>
        <!-- ✅ OPTIMIZATION 1: $tradesRejectedBlacklist removed (safety net eliminated) -->
        <set_value name="$tradesRejectedProfit" exact="0"/>
        <set_value name="$tradesRejectedDistance" exact="0"/>
        <set_value name="$tradesRejectedAmount" exact="0"/>
        <set_value name="$offersFound" exact="0"/>
        <set_value name="$stationsEvaluated" exact="0"/>
        <set_value name="$bestRejectedTrade" exact="null"/>
        
        <!-- Check cache diversity: Count unique wares in trade list -->
        <set_value name="$cacheWareCount" exact="0"/>
        <set_value name="$cacheWares" exact="table[]"/>
        <do_if value="$tradeList.count gt 0">
          <do_all exact="$tradeList.count" counter="$i">
            <set_value name="$trade" exact="$tradeList.{$i}"/>
            <set_value name="$ware" exact="@$trade.$BuyOffer.ware"/>
            <do_if value="$ware? and not $cacheWares.{$ware}?">
              <set_value name="$cacheWares.{$ware}" exact="true"/>
              <set_value name="$cacheWareCount" exact="$cacheWareCount + 1"/>
            </do_if>
          </do_all>
        </do_if>
        
        <!-- ===== PHASE 2: LIVE TRADE SEARCH (if no good cached trade OR insufficient diversity) ===== -->
        <!-- Trigger live search if: 
             1. No cached trades found, OR
             2. Cache found trades but diversity is too low (≤2 wares and ≤5 trades)
             This ensures we get diverse wares even if cache has limited options -->
        <set_value name="$shouldDoLiveSearch" exact="not $foundCachedTrade"/>
        <do_if value="$foundCachedTrade and $cacheWareCount le 2 and $tradeList.count le 5">
          <set_value name="$shouldDoLiveSearch" exact="true"/>
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Cache found trades but diversity too low (' + $cacheWareCount + ' wares, ' + $tradeList.count + ' trades) - performing live search for more diverse options'" chance="100"/>
          </do_if>
        </do_if>
        
        <do_if value="$shouldDoLiveSearch">
          <!-- ✅ COOLDOWN MECHANISM: Prevent cache miss → live search loops -->
          <!-- If cache miss triggered live search recently, enforce cooldown before allowing another -->
          <set_value name="$canDoLiveSearch" exact="true"/>
          <set_value name="$cooldownRemaining" exact="0"/>
          <do_if value="not $foundCachedTrade">
            <!-- Check cooldown for cache miss → live search -->
            <set_value name="$hasCooldown" exact="false"/>
            <do_if value="global.$GT_CacheMissCooldowns? and global.$GT_CacheMissCooldowns.{$ship}?">
              <set_value name="$hasCooldown" exact="true"/>
              <set_value name="$cooldownData" exact="global.$GT_CacheMissCooldowns.{$ship}"/>
              <set_value name="$timeSinceLastSearch" exact="player.age - $cooldownData.$LastLiveSearch"/>
              <set_value name="$cooldownRemaining" exact="$cooldownData.$CooldownDuration - $timeSinceLastSearch"/>
              <do_if value="$cooldownRemaining gt 0">
                <!-- Still in cooldown - skip live search -->
                <set_value name="$canDoLiveSearch" exact="false"/>
                <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                  <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Cache miss → live search cooldown active (' + ($cooldownRemaining / 1) + 's remaining of ' + ($cooldownData.$CooldownDuration / 1) + 's) - skipping live search to prevent loop'" chance="100"/>
                </do_if>
              </do_if>
            </do_if>
          </do_if>
          
          <do_if value="$canDoLiveSearch">
            <!-- DEBUG: No cached trade, performing live search -->
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') No suitable cached trade found, performing live market search'" chance="100"/>
            </do_if>
            
            <!-- Initialize cooldown tracking if not exists -->
            <do_if value="not global.$GT_CacheMissCooldowns?">
              <set_value name="global.$GT_CacheMissCooldowns" exact="table[]"/>
            </do_if>
            <do_if value="not $foundCachedTrade">
              <!-- Update cooldown after cache miss → live search -->
              <do_if value="not $hasCooldown">
                <!-- First cache miss for this ship - start at 10 seconds -->
                <set_value name="global.$GT_CacheMissCooldowns.{$ship}" exact="table[
                  $LastLiveSearch = player.age,
                  $CooldownDuration = 10s
                ]"/>
              </do_if>
              <do_else>
                <!-- Increase cooldown (double, max 60s) - cooldownData exists since hasCooldown is true -->
                <set_value name="$newCooldown" exact="$cooldownData.$CooldownDuration * 2"/>
                <do_if value="$newCooldown gt 60s">
                  <set_value name="$newCooldown" exact="60s"/>
                </do_if>
                <set_value name="global.$GT_CacheMissCooldowns.{$ship}" exact="table[
                  $LastLiveSearch = player.age,
                  $CooldownDuration = $newCooldown
                ]"/>
                <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                  <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Cache miss cooldown increased to ' + ($newCooldown / 1) + 's'" chance="100"/>
                </do_if>
              </do_else>
            </do_if>
            
            <!-- Perform live search -->
            <signal_cue_instantly cue="SearchLiveTrades" param="table[
            $Ship = $ship,
            $MaxDistance = $maxDistance,
            $MinROI = $minROI,
            $MinAbsoluteProfit = $minAbsoluteProfit,
            $FactionPriority = $factionPriority,
            $FactionPriorityText = $factionPriorityText,
            $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
            $SkillLevel = $skillLevel,
            $ThreatIntel = $gt_ThreatIntel,
            $FleetCoord = $gt_FleetCoord,
            $AdvancedAnalytics = $gt_AdvancedAnalytics
            ]"/>
            
            <!-- Track that live search was performed -->
            <set_value name="$searchMethod" exact="'live'"/>
          </do_if>
          <do_else>
            <!-- Cooldown active - skip live search, return empty results -->
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Skipping live search due to cooldown - returning empty results'" chance="100"/>
            </do_if>
            <set_value name="$searchMethod" exact="'cache'"/>
            <set_value name="$bestTrade" exact="null"/>
            <set_value name="$bestScore" exact="0"/>
            <set_value name="$tradeList" exact="[]"/>
          </do_else>
          
          <!-- Check if batch processing is still in progress -->
          <set_value name="$waitingForBatch" exact="false"/>
          <do_if value="global.$GT_SearchResult.$WaitingForBatch?">
            <set_value name="$waitingForBatch" exact="global.$GT_SearchResult.$WaitingForBatch"/>
          </do_if>
          
          <!-- If batch processing is in progress, exit early - SearchLiveTrades_Resume will signal back when complete -->
          <do_if value="$waitingForBatch">
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Live search batch processing in progress - waiting for completion'" chance="100"/>
            </do_if>
            <!-- Exit - SearchLiveTrades_Resume will signal this cue again when results are ready -->
            <cancel_cue cue="this"/>
          </do_if>
          
          <!-- Extract live search results from global return variable (batch processing completed) -->
          <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
          <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
          <do_if value="global.$GT_SearchResult.$StationsEvaluated?">
            <set_value name="$stationsEvaluated" exact="global.$GT_SearchResult.$StationsEvaluated"/>
          </do_if>
          <do_if value="global.$GT_SearchResult.$OffersFound?">
            <set_value name="$offersFound" exact="global.$GT_SearchResult.$OffersFound"/>
          </do_if>
          <set_value name="$tradeList" exact="@global.$GT_SearchResult.$TradeList"/>
          <!-- Update rejection statistics from live search (if available) -->
          <do_if value="global.$GT_SearchResult.$TradesRejectedDocking?">
            <set_value name="$tradesRejectedDocking" exact="global.$GT_SearchResult.$TradesRejectedDocking"/>
          </do_if>
          <!-- ✅ OPTIMIZATION 1: $TradesRejectedBlacklist no longer tracked (safety net eliminated) -->
          <do_if value="global.$GT_SearchResult.$TradesRejectedProfit?">
            <set_value name="$tradesRejectedProfit" exact="global.$GT_SearchResult.$TradesRejectedProfit"/>
          </do_if>
          <do_if value="global.$GT_SearchResult.$TradesRejectedDistance?">
            <set_value name="$tradesRejectedDistance" exact="global.$GT_SearchResult.$TradesRejectedDistance"/>
          </do_if>
          <do_if value="global.$GT_SearchResult.$TradesRejectedAmount?">
            <set_value name="$tradesRejectedAmount" exact="global.$GT_SearchResult.$TradesRejectedAmount"/>
          </do_if>
          <do_if value="global.$GT_SearchResult.$BestRejectedTrade?">
            <set_value name="$bestRejectedTrade" exact="global.$GT_SearchResult.$BestRejectedTrade"/>
          </do_if>
          
          <!-- Failed sector filtering now happens during best trade tracking (inside evaluation loop) -->
          <!-- This ensures: 1) All trades are cached for other ships, 2) Best selection excludes failed sectors -->
        </do_if>  <!-- End of live trade search -->
        
        <!-- Execute best trade if found -->
        <do_if value="$bestTrade">
          <!-- DEBUG: Trade execution with full details -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📊 BEST TRADE SELECTED:' + '\n  📦 Ware: ' + $bestTrade.$BuyOffer.ware.name + ' (x' + $bestTrade.$Amount + ')' + '\n  📍 BUY from: ' + $bestTrade.$BuyOffer.owner.knownname + ' @ ' + ($bestTrade.$BuyPrice / 100) + ' Cr' + '\n  📍 SELL to: ' + $bestTrade.$SellOffer.owner.knownname + ' @ ' + ($bestTrade.$SellPrice / 100) + ' Cr' + '\n  🚀 Distance: ' + $bestTrade.$Distance + ' jumps' + '\n  💰 Profit: ' + ($bestTrade.$Profit / 100) + ' Cr' + '\n  📈 ROI: ' + @$bestTrade.$ROI + '%' + '\n  📊 Score: ' + $bestTrade.$Score + '\n  ⚠ Risk: ' + $bestTrade.$Risk" chance="100"/>
          </do_if>
          
          <!-- ✅ OPTIMIZED: Reserve trade route for fleet coordination (inline conflict resolution done during search) -->
          <do_if value="global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
            <do_if value="not global.$GT_ActiveTradeReservations?">
              <set_value name="global.$GT_ActiveTradeReservations" exact="table[]"/>
            </do_if>
            
            <set_value name="global.$GT_ActiveTradeReservations.{$ship}" exact="table[
              $BuyStation = $bestTrade.$BuyOffer.owner,
              $SellStation = $bestTrade.$SellOffer.owner,
              $Ware = $bestTrade.$BuyOffer.ware,
              $Timestamp = player.age
            ]"/>
          </do_if>
          
          <!-- Execute trade -->
          <do_if value="true">
            <!-- DEBUG: Log exact trade list being sent to trading AI -->
            <!-- COMMENTED OUT: Reduces log spam - uncomment if needed for debugging -->
            <!-- <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <set_value name="$logTradeList" exact="'[GT-Search] 📤 SENDING TRADE LIST TO AI: ' + $ship.idcode + ' (' + $tradeList.count + ' trades)'"/>
              <do_all exact="$tradeList.count" counter="$i">
                <set_value name="$listTrade" exact="$tradeList.{$i}"/>
                <set_value name="$logTradeList" exact="$logTradeList + 
                  '\n  [' + $i + '] ' + @$listTrade.$BuyOffer.ware.name + 
                  ' | Buy: ' + @$listTrade.$BuyStation.knownname + ' @ ' + (@$listTrade.$BuyPrice / 100) + ' Cr' +
                  ' | Sell: ' + @$listTrade.$SellStation.knownname + ' @ ' + (@$listTrade.$SellPrice / 100) + ' Cr' +
                  ' | Score: ' + $listTrade.$Score + ' | Profit: ' + (@$listTrade.$Profit / 100) + ' Cr | ROI: ' + @$listTrade.$ROI + '% | Dist: ' + $listTrade.$Distance + ' jumps'"/>
              </do_all>
              <debug_text text="$logTradeList" chance="100"/>
            </do_if> -->
            
            <!-- Signal execution module (which will signal AI after storing trade LIST) -->
            <signal_cue_instantly cue="md.GT_Trading_Execution.ExecuteTrade" param="table[
              $Ship = $ship,
              $Trade = $bestTrade,
              $TradeList = $tradeList
            ]"/>
            
            <!-- GT_Trade_Found signal now sent FROM ExecuteTrade cue after storing pending trade -->
          </do_if>
        </do_if>
        
        <!-- Check if batch processing is still in progress (for both trade found AND no trade found paths) -->
        <set_value name="$waitingForBatch" exact="false"/>
        <do_if value="global.$GT_SearchResult.$WaitingForBatch?">
          <set_value name="$waitingForBatch" exact="global.$GT_SearchResult.$WaitingForBatch"/>
        </do_if>
        
        <do_else>
          <!-- No valid trades found -->
          
          <!-- DEBUG: No trades found (only if not waiting for batch) -->
          <do_if value="not $waitingForBatch and global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <set_value name="$totalRejected" exact="$tradesRejectedDocking + $tradesRejectedProfit + $tradesRejectedDistance + $tradesRejectedAmount"/>
            <!-- Get valid entries count from cache search (if available) -->
            <set_value name="$validEntries" exact="0"/>
            <set_value name="$diverseListCount" exact="0"/>
            <do_if value="global.$GT_SearchResult.$ValidEntries?">
              <set_value name="$validEntries" exact="global.$GT_SearchResult.$ValidEntries"/>
            </do_if>
            <do_if value="global.$GT_SearchResult.$DiverseListCount?">
              <set_value name="$diverseListCount" exact="global.$GT_SearchResult.$DiverseListCount"/>
            </do_if>
            
            <set_value name="$diagnosticInfo" exact="'\n\n🔍 SEARCH CONTEXT:' +
              '\n  Search method: ' + $searchMethod +
              (if $cacheChecked then '\n  Cache checked: Yes (' + $cacheCount + ' entries)' else '\n  Cache checked: No') +
              (if $searchMethod == 'live' and $stationsEvaluated? then '\n  Stations evaluated: ' + $stationsEvaluated else '') +
              (if $searchMethod == 'live' and $offersFound? then '\n  Offers found: ' + $offersFound else '') +
              (if $searchMethod == 'cache' and $validEntries gt 0 then '\n  Valid cached trades found: ' + $validEntries + ' (diverse list: ' + $diverseListCount + ')' else '') +
              (if $totalRejected == 0 and $validEntries == 0 and ($offersFound == 0 or not $offersFound?) then '\n  ⚠️ No trades were evaluated (cache empty or no offers found)' else '') +
              (if $validEntries gt 0 and $diverseListCount == 0 then '\n  ⚠️ All valid trades filtered out during diverse list building (need unique station pairs)' else '')"/>
            
            <!-- Build best rejected trade info safely (extract properties first, then check) -->
            <set_value name="$bestRejectedInfo" exact="''"/>
            <do_if value="$bestRejectedTrade?">
              <!-- Extract properties safely -->
              <set_value name="$rejectedWare" exact="@$bestRejectedTrade.$ware"/>
              <set_value name="$rejectedBuyFrom" exact="@$bestRejectedTrade.$buyFrom"/>
              <set_value name="$rejectedSellTo" exact="@$bestRejectedTrade.$sellTo"/>
              <set_value name="$rejectedBuyPrice" exact="@$bestRejectedTrade.$buyPrice"/>
              <set_value name="$rejectedSellPrice" exact="@$bestRejectedTrade.$sellPrice"/>
              <set_value name="$rejectedProfit" exact="@$bestRejectedTrade.$profit"/>
              <set_value name="$rejectedROI" exact="@$bestRejectedTrade.$roi"/>
              
              <!-- Build info string with safe checks (use @ operator for property access) -->
              <set_value name="$bestRejectedInfo" exact="'\n\n🏆 BEST REJECTED TRADE (still unprofitable):' +
                '\n  Ware: ' + (if $rejectedWare? then @$rejectedWare.name else 'Unknown') +
                '\n  Buy from: ' + (if $rejectedBuyFrom? then @$rejectedBuyFrom.knownname else 'Unknown') + ' @ ' + (if $rejectedBuyPrice? then ($rejectedBuyPrice / 100) else '0') + ' Cr/unit' +
                '\n  Sell to: ' + (if $rejectedSellTo? then @$rejectedSellTo.knownname else 'Unknown') + ' @ ' + (if $rejectedSellPrice? then ($rejectedSellPrice / 100) else '0') + ' Cr/unit' +
                '\n  Best profit found: ' + (if $rejectedProfit? then ($rejectedProfit / 100) else '0') + ' Cr (needed: ' + ($minAbsoluteProfit / 100) + ' Cr)' +
                '\n  Best ROI found: ' + (if $rejectedROI? then $rejectedROI else '0') + '% (needed: ' + $minROI + '%)'"/>
            </do_if>
            
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === NO TRADES FOUND ANALYSIS ===' + 
              '\nShip: ' + $ship.knownname + 
              '\nSector: ' + $ship.sector.knownname + 
              '\nSearch params: Dist=' + $maxDistance + ', MinROI=' + $minROI + '%, MinAbsoluteProfit=' + ($minAbsoluteProfit / 100) + ' Cr' +
              $diagnosticInfo +
              '\n\n📊 REJECTION STATISTICS:' +
              '\n  ⛔ Docking not allowed: ' + $tradesRejectedDocking +
              '\n  💰 Insufficient profit: ' + $tradesRejectedProfit +
              '\n  📏 Distance too far: ' + $tradesRejectedDistance +
              '\n  📦 Amount zero/negative: ' + $tradesRejectedAmount +
              '\n  ━━━━━━━━━━━━━━━━━━━━━━━━' +
              '\n  TOTAL REJECTED: ' + $totalRejected +
              $bestRejectedInfo" 
              chance="100"/>
          </do_if>
          
          <!-- Commented out to reduce log spam -->
          <!-- <debug_text text="'[GalaxyTrader MK3] No profitable trades found for ' + $ship.knownname" chance="100"/> -->
          
          <!-- Player logbook message with rejection statistics -->
          <set_value name="$logEnabled" exact="false"/>
          <do_if value="@$ship.defaultorder.id == 'GalaxyTraderMK3' and @$ship.defaultorder.$logbookentries">
            <set_value name="$logEnabled" exact="true"/>
          </do_if>
          <!-- Subordinates inherit logbook setting from commander -->
          <do_elseif value="@$ship.defaultorder.id == 'Assist' and @$ship.commander.defaultorder.id == 'GalaxyTraderMK3' and @$ship.commander.defaultorder.$logbookentries">
            <set_value name="$logEnabled" exact="true"/>
          </do_elseif>
          
          <do_if value="$logEnabled">
            <set_value name="$totalRejected" exact="$tradesRejectedDocking + $tradesRejectedProfit + $tradesRejectedAmount"/>
            <set_value name="$tradesRejectedBlacklist" exact="0"/> <!-- OPT 1: Blacklist safety net removed, always 0 -->
            <set_value name="$message" exact="{77000,3208}.[$ship.sector.knownname,$maxDistance,($minAbsoluteProfit/100),$totalRejected,$tradesRejectedDocking,$tradesRejectedProfit,$tradesRejectedAmount,$tradesRejectedBlacklist]"/>
            <write_to_logbook 
              category="upkeep" 
              title="'No Trades Available: ' + $ship.knownname" 
              text="$message"
              interaction="showonmap" 
              object="$ship"/>
          </do_if>
          
          <!-- Signal back to AI script: No Trade Found -->
          <!-- CRITICAL: Always send 'blacklist' param to prevent idle timeout escalation -->
          <!-- Reason: With blacklist-aware pre-filtering, we can't distinguish "filtered" from "genuinely empty" -->
          <!-- Better UX: Don't escalate to 60s timeout when ship might just need blacklist adjustment -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'" param2="'blacklist'"/>
        </do_else>
        
        <!-- CRITICAL: Release search lock ONLY if NOT waiting for batch processing -->
        <!-- If waiting for batch, SearchLiveTrades_Resume will signal SearchTradeRoutes again -->
        <!-- and we'll release the lock after processing live search results -->
        <do_if value="not $waitingForBatch">
          <do_if value="global.$GT_SearchLocks.{$ship}?">
            <remove_value name="global.$GT_SearchLocks.{$ship}"/>
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Search lock released (search complete)'" chance="100"/>
            </do_if>
          </do_if>
        </do_if>
        <do_else>
          <!-- Batch processing in progress - keep lock until live search completes -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Search lock retained (waiting for live search batch to complete)'" chance="100"/>
          </do_if>
        </do_else>
        
        <!-- CRITICAL: Clean up AI parameters ONLY if NOT waiting for batch processing -->
        <!-- If waiting for batch, we'll need these parameters when processing live search results -->
        <do_if value="not $waitingForBatch">
          <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
            <remove_value name="global.$GT_AIParameters.{$ship}"/>
          </do_if>
        </do_if>
        
        <!-- ✅ PERFORMANCE FIX: Mark search complete and process next ship in queue -->
        <do_if value="global.$GT_SearchQueue.$Params? and global.$GT_SearchQueue.$Params.{$ship}?">
          <remove_value name="global.$GT_SearchQueue.$Params.{$ship}"/>
        </do_if>
        
        <!-- Decrement active search counter -->
        <set_value name="global.$GT_SearchQueue.$ActiveSearches" operation="subtract"/>
        
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🔍 SEARCH COMPLETE (active: ' + global.$GT_SearchQueue.$ActiveSearches + '/' + global.$GT_SearchQueue.$MaxConcurrent + ', queued: ' + global.$GT_SearchQueue.$Ships.count + ')'" chance="100"/>
        </do_if>
        
        <!-- Continue processing search queue if there are ships waiting -->
        <do_if value="global.$GT_SearchQueue.$Ships.count gt 0">
          <signal_cue_instantly cue="md.GT_Trading_Queue.ProcessSearchQueue"/>
        </do_if>
      </actions>
    </cue>
    
    <!-- Search Cached Trades (Sub-module) -->
    <cue name="SearchCachedTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$allowIllegal" exact="@$params.$AllowIllegal"/> <!-- Default to false if not provided -->
        
        <!-- Get ware basket for filtering (from global AI parameters) -->
        <set_value name="$wareBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
        
        <!-- ✅ NEW: Collect top 20 trades instead of just best one -->
        <set_value name="$tradeList" exact="[]"/>
        <set_value name="$maxTradesToReturn" exact="20"/>
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== DETERMINE HOME SECTOR (same logic as live search) ===== -->
        <set_value name="$homeBase" exact="null"/>
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="not $homeBase? or not $homeBase.exists">
            <set_value name="$homeBase" exact="$ship.sector"/>
          </do_if>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <!-- DEBUG: Log home sector determination -->
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
          <debug_text text="'[GT-Cache-DEBUG] (' + $ship.idcode + ') Home sector resolution:' + 
            '\n  HomeBase: ' + @$homeBase.knownname + 
            '\n  HomeSector: ' + @$homeSector.knownname + 
            '\n  Ship current sector: ' + @$ship.sector.knownname" 
            chance="100"/>
        </do_if>
        
        <!-- Cache age check removed - not needed, individual entries have $Timestamp -->
        <set_value name="$cacheAge" exact="0s"/>
        
        <!-- Get failed trades for this ship -->
        <set_value name="$failedTrades" exact="[]"/>
        <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
          <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
        </do_if>
        
        <!-- ✅ CACHE REPLENISHMENT: Force live search if cache too small -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count lt 10">
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 1">
            <debug_text text="'[GT-Cache] ⚠ Cache too small (' + global.$GT_TradeCache.count + ' entries) - forcing live search to replenish'" chance="100"/>
          </do_if>
          
          <!-- Return empty result via global variable to trigger live search -->
          <set_value name="global.$GT_SearchResult" exact="table[
            $Found = false,
            $BestTrade = null,
            $BestScore = 0,
            $BlacklistRejections = 0,
            $TradeList = []
          ]"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- ✅ LIST-BASED CACHE: Iterate through flat list of trade entries -->
        <!-- NOTE: No per-ware limiting needed for cache (small size, pre-validated entries) -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count gt 0">
          <set_value name="$cacheMaxAge" exact="600s"/>  <!-- 10 minutes -->
          <set_value name="$checkedEntries" exact="0"/>
          <set_value name="$validEntries" exact="0"/>
          <set_value name="$expiredEntries" exact="0"/>
          <set_value name="$tradesByWareBeforeFiltering" exact="table[]"/>
          
          <!-- DEBUG: Log cache status -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
            <debug_text text="'[GT-Cache-DEBUG] Cache has ' + global.$GT_TradeCache.count + ' trade entries'" chance="100"/>
          </do_if>
          
          <!-- Iterate through flat list of cached trades BACKWARDS to safely remove invalid entries -->
          <!-- When we remove entry N, entries 1 to N-1 remain at same indices (already processed) -->
          <set_value name="$cacheCount" exact="global.$GT_TradeCache.count"/>
          <do_all exact="$cacheCount" counter="$idx" reverse="true">
            <set_value name="$i" exact="$idx"/>
            <set_value name="$cacheEntry" exact="global.$GT_TradeCache.{$i}"/>
            <set_value name="$checkedEntries" exact="$checkedEntries + 1"/>
            
            <!-- Track ware in statistics (even if entry will be filtered) -->
            <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
            <do_if value="$ware?">
              <do_if value="not $tradesByWareBeforeFiltering.{$ware}?">
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="table[
                  $total=0, 
                  $filtered=0, 
                  $valid=0,
                  $invalidStructure=0,
                  $expired=0,
                  $offersNoLongerExist=0,
                  $offersNotAvailable=0,
                  $insufficientAmount=0,
                  $stationNotOperational=0,
                  $failedSectorPair=0,
                  $outOfRange=0,
                  $unreachable=0,
                  $illegal=0,
                  $wareBasket=0,
                  $distanceConstraint=0,
                  $profitConstraint=0,
                  $efficiencyThreshold=0,
                  $stationsWaresNoLongerExist=0,
                  $freshOffersNotAvailable=0,
                  $insufficientTradeableAmount=0,
                  $roiBelowThreshold=0,
                  $profitTooLow=0,
                  $roiDropTooHigh=0
                ]"/>
              </do_if>
              <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
              <set_value name="$wareStats.$total" exact="$wareStats.$total + 1"/>
              <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
            </do_if>
            
            <!-- Validate cache entry structure -->
            <do_if value="not $cacheEntry? or not $cacheEntry.$BuyOffer? or not $cacheEntry.$SellOffer? or not $cacheEntry.$Timestamp?">
              <!-- Track as filtered (invalid structure) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$invalidStructure" exact="$wareStats.$invalidStructure + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- Check if entry is too old (TTL filter) -->
            <set_value name="$entryAge" exact="player.age - $cacheEntry.$Timestamp"/>
            <do_if value="$entryAge gt $cacheMaxAge">
              <set_value name="$expiredEntries" exact="$expiredEntries + 1"/>
              <!-- Track as filtered (expired) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$expired" exact="$wareStats.$expired + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <remove_value name="global.$GT_TradeCache.{$idx}"/>
              <continue/>
            </do_if>
            
            <!-- Validate offers still exist and are available -->
            <do_if value="not $cacheEntry.$BuyOffer.exists or not $cacheEntry.$SellOffer.exists">
              <!-- Track as filtered (offers no longer exist) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$offersNoLongerExist" exact="$wareStats.$offersNoLongerExist + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers are still available (not out of stock) -->
            <do_if value="not $cacheEntry.$BuyOffer.available or not $cacheEntry.$SellOffer.available">
              <!-- Track as filtered (offers not available) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$offersNotAvailable" exact="$wareStats.$offersNotAvailable + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- ✅ REMOVED: Pre-query amount check - amount validation happens after querying fresh offers -->
            <!-- Rationale: Even if cached amount dropped, trade may still be valid if ROI is within dropoff tolerance -->
            <!-- Amount validation now happens at line 1067 after querying fresh offers -->
            
            <!-- Validate stations still operational -->
            <do_if value="not @$cacheEntry.$BuyOffer.owner.isoperational or not @$cacheEntry.$SellOffer.owner.isoperational">
              <!-- Track as filtered (station not operational) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$stationNotOperational" exact="$wareStats.$stationNotOperational + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Filter out sector pairs that previously failed for THIS ship -->
            <!-- One failure in a sector pair blocks ALL station combinations in that route -->
            <do_if value="$failedTrades.count gt 0">
              <set_value name="$skipThisCacheEntry" exact="false"/>
              <do_all exact="$failedTrades.count" counter="$failIdx">
                <set_value name="$failedTrade" exact="$failedTrades.{$failIdx}"/>
                
                <!-- Check if SECTOR PAIR matches (buy sector → sell sector) -->
                <!-- CRITICAL: Validate failed trade has complete sector data before comparing -->
                <do_if value="$failedTrade.$BuySector? and $failedTrade.$SellSector?">
                  <do_if value="@$cacheEntry.$BuyOffer.owner.sector == @$failedTrade.$BuySector and 
                                @$cacheEntry.$SellOffer.owner.sector == @$failedTrade.$SellSector">
                    <set_value name="$skipThisCacheEntry" exact="true"/>
                    <break/>
                  </do_if>
                </do_if>
              </do_all>
              
              <do_if value="$skipThisCacheEntry">
                <!-- Track as filtered (failed sector pair) - $total already incremented above -->
                <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                <do_if value="$ware?">
                  <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                  <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                  <set_value name="$wareStats.$failedSectorPair" exact="$wareStats.$failedSectorPair + 1"/>
                  <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                </do_if>
                <continue/> <!-- Skip to next cache entry -->
              </do_if>
            </do_if>
            
            <!-- 
              TWO-STAGE DISTANCE VALIDATION:
              1. Range check: Is trade within ship's operational range from home base? (NO blacklist)
              2. Reachability check: Can ship reach it from current position? (basic connectivity)
            -->
            
            <!-- STAGE 1: Range check from home base (no blacklist) -->
            <set_value name="$rangeCheckBuy" exact="$homeSector.gatedistance.{$cacheEntry.$BuyOffer.owner.sector}"/>
            
            <do_if value="$cacheEntry.$BuyOffer.owner.sector == $cacheEntry.$SellOffer.owner.sector">
              <set_value name="$rangeCheckSell" exact="0"/>
            </do_if>
            <do_else>
              <set_value name="$rangeCheckSell" exact="$cacheEntry.$BuyOffer.owner.sector.gatedistance.{$cacheEntry.$SellOffer.owner.sector}"/>
            </do_else>
            
            <set_value name="$totalRangeDistance" exact="$rangeCheckBuy + $rangeCheckSell"/>
            
            <!-- Skip if outside operational range -->
            <do_if value="$rangeCheckBuy lt 0 or $rangeCheckSell lt 0 or $totalRangeDistance gt $maxDistance">
              <!-- Track as filtered (out of range) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$outOfRange" exact="$wareStats.$outOfRange + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- STAGE 2: Basic reachability check from current position -->
            <!-- Use BLACKLIST-AWARE gatedistance so blocked paths return -1 -->
            <set_value name="$buySector" exact="$cacheEntry.$BuyOffer.owner.sector"/>
            <set_value name="$buyDistance" exact="$ship.gatedistance.{$buySector}.{blacklistgroup.civilian}.{$ship}"/>
            
            <!-- Sell distance: BuyOffer station to SellOffer station -->
            <do_if value="$cacheEntry.$BuyOffer.owner.sector == $cacheEntry.$SellOffer.owner.sector">
              <set_value name="$sellDistance" exact="0"/>
            </do_if>
            <do_else>
              <set_value name="$sellSector" exact="$cacheEntry.$SellOffer.owner.sector"/>
              <set_value name="$sellDistance" exact="$buySector.gatedistance.{$sellSector}.{blacklistgroup.civilian}.{$ship}"/>
            </do_else>
            
            <!-- If trade route is unreachable (disconnected sectors), skip this trade -->
            <!-- NOTE: This is an early check for efficiency, but we also check later at line 749 -->
            <!-- Track here to ensure all unreachable entries are counted -->
            <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
              <!-- Track as filtered (unreachable) - $total already incremented above -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$unreachable" exact="$wareStats.$unreachable + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <!-- Commented out to reduce log spam - uncomment if needed for debugging -->
              <!-- <debug_text text="'[GT-Cache] ⚠ PATH BLOCKED: Trade route unreachable (disconnected sectors)' +
                '\n  Ship: ' + $ship.idcode +
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name +
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + ' (distance: ' + $buyDistance + ')' +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + ' (distance: ' + $sellDistance + ')'"
                chance="100"/> -->
              <continue/>
            </do_if>
            
            <!-- Safe defaults for null values (should be rare - only if sectors are completely disconnected) -->
            <do_if value="not $buyDistance? or typeof $buyDistance != datatype.integer">
              <set_value name="$buyDistance" exact="-1"/>
            </do_if>
            <do_if value="not $sellDistance? or typeof $sellDistance != datatype.integer">
              <set_value name="$sellDistance" exact="-1"/>
            </do_if>
            
            <!-- NOTE: Unreachable check already handled at line 714 (early exit for efficiency) -->
            <!-- No need to check again here - unreachable entries already filtered and tracked -->
            
            <!-- Note: Station/sector blacklist checks removed - vanilla will handle when trade executes -->
            
            <!-- Calculate total distance (ship → buy → sell) for filtering/validation -->
            <set_value name="$currentDistance" exact="$buyDistance + $sellDistance"/>
            
            <!-- ✅ ILLEGAL WARE FILTER: Skip illegal wares if ship doesn't allow illegal trades -->
            <do_if value="not $allowIllegal and $cacheEntry.$BuyOffer.ware.illegal">
              <!-- Track ware for statistics -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$illegal" exact="$wareStats.$illegal + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- ✅ WARE BASKET FILTER: Only consider manually selected wares -->
            <!-- ✅ CRITICAL: Initialize $wareBasket safely (memory:10529400 - ? checks existence, not null) -->
            <!-- Step 1: Initialize to safe default FIRST -->
            <set_value name="$wareBasket" exact="[]"/>
            <!-- Step 2: Check if source exists -->
            <do_if value="global.$GT_AIParameters.{$ship}.$WareBasket?">
              <!-- Step 3: Get value with @ (returns null if missing) -->
              <set_value name="$tempBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
              <!-- Step 4: Extract count property with @ to check if result is valid list -->
              <set_value name="$tempCount" exact="@$tempBasket.count"/>
              <!-- Step 5: Check if COUNT result exists and is valid (>= 0 means it's a list, not null) -->
              <do_if value="$tempCount? and $tempCount ge 0">
                <!-- Step 6: Now safe to use the original temp value -->
                <set_value name="$wareBasket" exact="$tempBasket"/>
              </do_if>
            </do_if>
            <do_if value="$wareBasket.count gt 0">
              <!-- Use explicit loop for reliable list membership check -->
              <set_value name="$wareInBasket" exact="false"/>
              <do_all exact="$wareBasket.count" counter="$i">
                <do_if value="$wareBasket.{$i} == $cacheEntry.$BuyOffer.ware">
                  <set_value name="$wareInBasket" exact="true"/>
                  <break/>
                </do_if>
              </do_all>
              <do_if value="not $wareInBasket">
                <!-- Track ware for statistics -->
                <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                <do_if value="$ware?">
                  <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                  <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                  <set_value name="$wareStats.$wareBasket" exact="$wareStats.$wareBasket + 1"/>
                  <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                </do_if>
                <continue/>
              </do_if>
            </do_if>
            
            <!-- CRITICAL: Validate prices haven't changed unfavorably (allow 10% variance) -->
            <!-- ❌ REMOVED: Stale price check was filtering out valid entries before querying fresh offers!
                 The old logic read prices from cached tradeoffer objects which are stale.
                 We should only validate against fresh prices AFTER querying fresh offers. -->
            
            <!-- Check distance constraint (use current blacklist-aware distance) -->
            <do_if value="$currentDistance gt $maxDistance">
              <!-- Track ware for statistics -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$distanceConstraint" exact="$wareStats.$distanceConstraint + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- Check profit constraint -->
            <do_if value="$cacheEntry.$Profit? and $cacheEntry.$Profit lt $minAbsoluteProfit">
              <!-- Track ware for statistics -->
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$profitConstraint" exact="$wareStats.$profitConstraint + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- Calculate current score with distance penalty (use blacklist-aware distance) -->
            <set_value name="$adjustedDistance" exact="$currentDistance * $distancePenaltyMultiplier"/>
            <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($cacheEntry.$Profit / $adjustedDistance) else $cacheEntry.$Profit"/>
            
            <!-- Apply faction priority boost -->
            <do_if value="$factionPriority == 0">
              <!-- Player Only: Boost player-owned stations by 20% -->
              <do_if value="$cacheEntry.$BuyOffer.owner.owner == faction.player or $cacheEntry.$SellOffer.owner.owner == faction.player">
                <!-- Boost player-owned stations by 20% -->
                <!-- Avoid money type conversion by using addition instead of multiplication -->
                <set_value name="$boost" exact="$efficiency / 5"/>
                <set_value name="$efficiency" exact="$efficiency + $boost"/>
              </do_if>
            </do_if>
            <do_elseif value="$factionPriority == 1">
              <!-- Foreign First: Boost non-player stations by 20% -->
              <do_if value="$cacheEntry.$BuyOffer.owner.owner != faction.player and $cacheEntry.$SellOffer.owner.owner != faction.player">
                <!-- Boost non-player stations by 20% -->
                <!-- Avoid money type conversion by using addition instead of multiplication -->
                <set_value name="$boost" exact="$efficiency / 5"/>
                <set_value name="$efficiency" exact="$efficiency + $boost"/>
              </do_if>
            </do_elseif>
            <!-- Equal Priority (2): No boost applied -->
            
            <!-- ✅ CACHE AS HINT: Re-query FRESH trade offers from the cached stations -->
            <!-- Query entries that are either:
                1. Better than current best (might improve our best trade), OR
                2. We haven't reached max trades yet (need to build diverse list)
                3. CRITICAL: Efficiency comparison only makes sense WITHIN same ware, NOT across wares
                4. For diversity: If we don't have trades for this ware yet, query based on profit/ROI only
            -->
            <!-- Get cache threshold early (needed for diversity check) -->
            <set_value name="$cacheThreshold" exact="20"/>
            <do_if value="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold?">
              <set_value name="$cacheThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
            </do_if>
            
            <set_value name="$shouldQuery" exact="false"/>
            <do_if value="$efficiency gt $bestScore">
              <!-- Always query if better than current best -->
              <set_value name="$shouldQuery" exact="true"/>
            </do_if>
            <do_elseif value="$tradeList.count lt $maxTradesToReturn">
              <!-- Check if we already have trades for this ware -->
              <set_value name="$hasTradesForThisWare" exact="false"/>
              <set_value name="$currentWare" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$currentWare?">
                <do_all exact="$tradeList.count" counter="$i">
                  <do_if value="$tradeList.{$i}.$BuyOffer.ware == $currentWare">
                    <set_value name="$hasTradesForThisWare" exact="true"/>
                    <break/>
                  </do_if>
                </do_all>
              </do_if>
              
              <!-- Calculate whether to query based on ware diversity -->
              <do_if value="$hasTradesForThisWare">
                <!-- We already have trades for this ware - use efficiency threshold (compare within same ware) -->
                <!-- Use 50% of best score as threshold (only meaningful for same ware) -->
                <set_value name="$efficiencyThreshold" exact="$bestScore / 2"/>
                <do_if value="$bestScore == 0 or $efficiency ge $efficiencyThreshold">
                  <set_value name="$shouldQuery" exact="true"/>
                </do_if>
              </do_if>
              <do_else>
                <!-- We don't have trades for this ware yet - query based on profitability only (not efficiency vs other wares) -->
                <!-- Efficiency can't be compared across different wares, so just check if trade is profitable -->
                <do_if value="$cacheEntry.$Profit? and $cacheEntry.$Profit ge $minAbsoluteProfit">
                  <do_if value="$cacheEntry.$ROI? and $cacheEntry.$ROI ge $cacheThreshold">
                    <set_value name="$shouldQuery" exact="true"/>
                  </do_if>
                </do_if>
              </do_else>
            </do_elseif>
            
            <!-- Track entries that are skipped due to efficiency threshold -->
            <do_if value="not $shouldQuery">
              <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
              <do_if value="$ware?">
                <do_if value="not $tradesByWareBeforeFiltering.{$ware}?">
                  <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="table[
                    $total=0, 
                    $filtered=0, 
                    $valid=0,
                    $invalidStructure=0,
                    $expired=0,
                    $offersNoLongerExist=0,
                    $offersNotAvailable=0,
                    $insufficientAmount=0,
                    $stationNotOperational=0,
                    $failedSectorPair=0,
                    $outOfRange=0,
                    $unreachable=0,
                    $illegal=0,
                    $wareBasket=0,
                    $distanceConstraint=0,
                    $profitConstraint=0,
                    $efficiencyThreshold=0,
                    $stationsWaresNoLongerExist=0,
                    $freshOffersNotAvailable=0,
                    $insufficientTradeableAmount=0,
                    $roiBelowThreshold=0,
                    $profitTooLow=0,
                    $roiDropTooHigh=0
                  ]"/>
                </do_if>
                <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                <set_value name="$wareStats.$efficiencyThreshold" exact="$wareStats.$efficiencyThreshold + 1"/>
                <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
              </do_if>
              <!-- Skip to next entry (efficiency too low to query) -->
              <continue/>
            </do_if>
            
            <do_if value="$shouldQuery">
              <!-- ✅ CRITICAL FIX: Get ware and station objects from cached IDs, not stale tradeoffer references! -->
              <!-- Ware objects don't go stale, so we can use the cached ware object directly -->
              <set_value name="$ware" exact="$cacheEntry.$BuyOffer.ware"/>
              
              <!-- Stations: Try using cached station references first (faster) -->
              <set_value name="$buyStation" exact="$cacheEntry.$BuyOffer.owner"/>
              <set_value name="$sellStation" exact="$cacheEntry.$SellOffer.owner"/>
              
              <!-- Validate stations still exist and are operational -->
              <do_if value="$buyStation.exists and $buyStation.isoperational and $sellStation.exists and $sellStation.isoperational and $ware">
                <!-- Query FRESH sell offer from buy station (ship buys from their sell offer) -->
                <find_sell_offer seller="$buyStation" wares="$ware" result="$freshBuyOffer">
                  <match_seller tradesknownto="$ship.owner"/>
                </find_sell_offer>
                
                <!-- Query FRESH buy offer from sell station (ship sells to their buy offer) -->
                <find_buy_offer buyer="$sellStation" wares="$ware" result="$freshSellOffer">
                  <match_buyer tradesknownto="$ship.owner"/>
                </find_buy_offer>
              </do_if>
              <do_else>
                <!-- Stations or ware no longer exist/operational - skip this entry -->
                <set_value name="$freshBuyOffer" exact="null"/>
                <set_value name="$freshSellOffer" exact="null"/>
                
                <!-- Track as filtered (stations/wares no longer exist) -->
                <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                <do_if value="$ware?">
                  <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                  <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                  <set_value name="$wareStats.$stationsWaresNoLongerExist" exact="$wareStats.$stationsWaresNoLongerExist + 1"/>
                  <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                </do_if>
                
                <continue/>
              </do_else>
              
              <!-- Validate fresh offers exist and are available -->
              <do_if value="$freshBuyOffer and $freshBuyOffer.available and $freshSellOffer and $freshSellOffer.available">
                <!-- Calculate fresh prices and profit -->
                <set_value name="$freshBuyPrice" exact="$freshBuyOffer.unitprice"/>
                <set_value name="$freshSellPrice" exact="$freshSellOffer.unitprice"/>
                
                <!-- Calculate max cargo capacity for this ware (same fix as live search) -->
                <set_value name="$maxCargoCapacity" exact="($ship.cargo.free.all / $freshBuyOffer.ware.volume)i"/>
                <set_value name="$freshMaxAmount" exact="[$freshBuyOffer.amount, $freshSellOffer.amount, $maxCargoCapacity].min"/>
                
                <!-- Skip if no tradeable amount -->
                <do_if value="$freshMaxAmount le 0">
                  <!-- Track as filtered (insufficient tradeable amount) -->
                  <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                  <do_if value="$ware?">
                    <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                    <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                    <set_value name="$wareStats.$insufficientTradeableAmount" exact="$wareStats.$insufficientTradeableAmount + 1"/>
                    <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                  </do_if>
                  <continue/>
                </do_if>
                <do_if value="$freshMaxAmount gt 0">
                  <set_value name="$freshProfit" exact="($freshSellPrice - $freshBuyPrice) * $freshMaxAmount"/>
                  
                  <!-- ✅ CORRECT LOGIC: Calculate fresh ROI and check relative percentage drop -->
                  <do_if value="$freshProfit gt 0">
                    <!-- Calculate fresh ROI as percentage -->
                    <set_value name="$freshROI" exact="(($freshSellPrice - $freshBuyPrice) * 100) / $freshBuyPrice"/>
                    
                    <!-- Get cache threshold from global settings (default 20%) -->
                    <set_value name="$cacheThreshold" exact="20"/>
                    <do_if value="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold?">
                      <set_value name="$cacheThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
                    </do_if>
                    
                    <!-- Get cached original ROI -->
                    <set_value name="$cachedROI" exact="@$cacheEntry.$ROI"/>
                    <do_if value="not $cachedROI? or $cachedROI le 0">
                      <set_value name="$cachedROI" exact="$cacheThreshold"/>  <!-- Fallback for old cache entries -->
                    </do_if>
                    
                    <!-- Get dropoff tolerance from global settings (default 15%) -->
                    <set_value name="$dropoffTolerance" exact="@global.$GT_GlobalSettings.$Fleet.$CacheDropoffTolerance"/>
                    <do_if value="not $dropoffTolerance?">
                      <set_value name="$dropoffTolerance" exact="15"/>  <!-- Default 15% -->
                    </do_if>
                    
                    <!-- Calculate relative percentage drop: ((original - current) / original) * 100 -->
                    <set_value name="$roiDrop" exact="0"/>
                    <do_if value="$cachedROI gt 0">
                      <set_value name="$roiDrop" exact="(($cachedROI - $freshROI) * 100) / $cachedROI"/>
                    </do_if>
                    
                    <!-- Check if fresh ROI meets minimum threshold AND relative drop is within tolerance -->
                    <do_if value="$freshROI ge $cacheThreshold and $freshProfit ge $minAbsoluteProfit and $roiDrop le $dropoffTolerance">
                      <!-- ✅ CACHE HIT: Fresh trade meets threshold and within dropoff tolerance! -->
                      <set_value name="$trade" exact="table[
                        $BuyOffer = $freshBuyOffer,
                        $SellOffer = $freshSellOffer,
                        $BuyStation = $freshBuyOffer.owner,
                        $SellStation = $freshSellOffer.owner,
                        $Amount = $freshMaxAmount,
                        $Profit = $freshProfit,
                        $ROI = $freshROI,
                        $BuyPrice = $freshBuyPrice,
                        $SellPrice = $freshSellPrice,
                        $Distance = $cacheEntry.$Distance,
                        $Score = $efficiency,
                        $Risk = 0
                      ]"/>
                      
                      <!-- ✅ NEW: Add to trade list (up to max) with STATION PAIR DEDUPLICATION -->
                      <!-- Prevent duplicate station pairs in the same retrieval (even if cache has duplicates) -->
                      <set_value name="$stationPairExists" exact="false"/>
                      <set_value name="$currentBuyStation" exact="$trade.$BuyStation"/>
                      <set_value name="$currentSellStation" exact="$trade.$SellStation"/>
                      <do_all exact="$tradeList.count" counter="$j">
                        <set_value name="$existingBuyStation" exact="$tradeList.{$j}.$BuyStation"/>
                        <set_value name="$existingSellStation" exact="$tradeList.{$j}.$SellStation"/>
                        <do_if value="$existingBuyStation == $currentBuyStation and $existingSellStation == $currentSellStation">
                          <set_value name="$stationPairExists" exact="true"/>
                          <break/>
                        </do_if>
                      </do_all>
                      
                      <!-- Only add if station pair is unique and we haven't reached max -->
                      <do_if value="not $stationPairExists and $tradeList.count lt $maxTradesToReturn">
                        <append_to_list name="$tradeList" exact="$trade"/>
                        
                        <!-- Track valid trade per ware -->
                        <set_value name="$tradeWare" exact="@$trade.$BuyOffer.ware"/>
                        <do_if value="$tradeWare?">
                          <do_if value="not $tradesByWareBeforeFiltering.{$tradeWare}?">
                            <set_value name="$tradesByWareBeforeFiltering.{$tradeWare}" exact="table[$total=0, $filtered=0, $valid=0]"/>
                          </do_if>
                          <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$tradeWare}"/>
                          <set_value name="$wareStats.$valid" exact="$wareStats.$valid + 1"/>
                          <set_value name="$tradesByWareBeforeFiltering.{$tradeWare}" exact="$wareStats"/>
                        </do_if>
                      </do_if>
                      
                      <!-- Also track best trade for backward compatibility -->
                      <do_if value="$efficiency gt $bestScore">
                        <set_value name="$bestScore" exact="$efficiency"/>
                        <set_value name="$bestTrade" exact="$trade"/>
                      </do_if>
                      
                      <set_value name="$foundCachedTrade" exact="true"/>
                      <set_value name="$validEntries" exact="$validEntries + 1"/>
                      
                    </do_if>
                    <do_else>
                      <!-- ✅ CACHE MAINTENANCE: ROI dropped below threshold - DELETE stale cache entry -->
                      <!-- Track why entry was rejected for statistics -->
                      <set_value name="$rejectionReason" exact="''"/>
                      <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                      <do_if value="$ware?">
                        <do_if value="not $tradesByWareBeforeFiltering.{$ware}?">
                          <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="table[
                            $total=0, 
                            $filtered=0, 
                            $valid=0,
                            $invalidStructure=0,
                            $expired=0,
                            $offersNoLongerExist=0,
                            $offersNotAvailable=0,
                            $insufficientAmount=0,
                            $stationNotOperational=0,
                            $failedSectorPair=0,
                            $outOfRange=0,
                            $unreachable=0,
                            $illegal=0,
                            $wareBasket=0,
                            $distanceConstraint=0,
                            $profitConstraint=0,
                            $efficiencyThreshold=0,
                            $stationsWaresNoLongerExist=0,
                            $freshOffersNotAvailable=0,
                            $insufficientTradeableAmount=0,
                            $roiBelowThreshold=0,
                            $profitTooLow=0,
                            $roiDropTooHigh=0
                          ]"/>
                        </do_if>
                        <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                        <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                        
                        <!-- Track specific rejection reasons -->
                        <do_if value="$freshROI lt $cacheThreshold">
                          <set_value name="$wareStats.$roiBelowThreshold" exact="$wareStats.$roiBelowThreshold + 1"/>
                          <set_value name="$rejectionReason" exact="$rejectionReason + 'ROI below threshold (' + $freshROI + '% lt ' + $cacheThreshold + '%)'"/>
                        </do_if>
                        <do_if value="$freshProfit lt $minAbsoluteProfit">
                          <set_value name="$wareStats.$profitTooLow" exact="$wareStats.$profitTooLow + 1"/>
                          <do_if value="$rejectionReason != ''">
                            <set_value name="$rejectionReason" exact="$rejectionReason + ', '"/>
                          </do_if>
                          <set_value name="$rejectionReason" exact="$rejectionReason + 'Profit too low (' + ($freshProfit/100) + ' Cr lt ' + ($minAbsoluteProfit/100) + ' Cr)'"/>
                        </do_if>
                        <do_if value="$roiDrop gt $dropoffTolerance">
                          <set_value name="$wareStats.$roiDropTooHigh" exact="$wareStats.$roiDropTooHigh + 1"/>
                          <do_if value="$rejectionReason != ''">
                            <set_value name="$rejectionReason" exact="$rejectionReason + ', '"/>
                          </do_if>
                          <set_value name="$rejectionReason" exact="$rejectionReason + 'ROI drop too high (' + $roiDrop + '% gt ' + $dropoffTolerance + '%)'"/>
                        </do_if>
                        
                        <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                      </do_if>
                      
                      <remove_value name="global.$GT_TradeCache.{$idx}"/>
                      <!-- Skip to next entry (idx will auto-increment) -->
                      <continue/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <!-- Track filtered trade per ware (rejected due to zero/negative profit) -->
                    <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                    <do_if value="$ware?">
                      <do_if value="not $tradesByWareBeforeFiltering.{$ware}?">
                        <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="table[
                          $total=0, 
                          $filtered=0, 
                          $valid=0,
                          $invalidStructure=0,
                          $expired=0,
                          $offersNoLongerExist=0,
                          $offersNotAvailable=0,
                          $insufficientAmount=0,
                          $stationNotOperational=0,
                          $failedSectorPair=0,
                          $outOfRange=0,
                          $unreachable=0,
                          $illegal=0,
                          $wareBasket=0,
                          $distanceConstraint=0,
                          $profitConstraint=0,
                          $efficiencyThreshold=0,
                          $stationsWaresNoLongerExist=0,
                          $freshOffersNotAvailable=0,
                          $insufficientTradeableAmount=0,
                          $roiBelowThreshold=0,
                          $profitTooLow=0,
                          $roiDropTooHigh=0
                        ]"/>
                      </do_if>
                      <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                      <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                      <set_value name="$wareStats.$profitTooLow" exact="$wareStats.$profitTooLow + 1"/>
                      <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                    </do_if>
                  </do_else>
                </do_if>
              </do_if>
              <do_else>
                <!-- Track as filtered (fresh offers not available) -->
                <set_value name="$ware" exact="@$cacheEntry.$BuyOffer.ware"/>
                <do_if value="$ware?">
                  <set_value name="$wareStats" exact="$tradesByWareBeforeFiltering.{$ware}"/>
                  <set_value name="$wareStats.$filtered" exact="$wareStats.$filtered + 1"/>
                  <set_value name="$wareStats.$freshOffersNotAvailable" exact="$wareStats.$freshOffersNotAvailable + 1"/>
                  <set_value name="$tradesByWareBeforeFiltering.{$ware}" exact="$wareStats"/>
                </do_if>
              </do_else>
            </do_if>
          </do_all>
          
          <!-- ✅ BUILD DIVERSE LIST: Top 5 per ware (same logic as SearchLiveTrades_Resume) -->
          <do_if value="$tradeList.count gt 0">
            
            <!-- Group trades by ware -->
            <set_value name="$tradesByWare" exact="table[]"/>
            <do_all exact="$tradeList.count" counter="$i">
              <set_value name="$trade" exact="$tradeList.{$i}"/>
              <set_value name="$ware" exact="$trade.$BuyOffer.ware"/>
              <do_if value="not $tradesByWare.{$ware}?">
                <set_value name="$tradesByWare.{$ware}" exact="[]"/>
              </do_if>
              <append_to_list name="$tradesByWare.{$ware}" exact="$trade"/>
            </do_all>
            
            <!-- DEBUG: Log wares found -->
            <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <set_value name="$wareDebug" exact="'[GT-Cache] Found ' + $tradesByWare.keys.count + ' wares with trades:'"/>
              <do_all exact="$tradesByWare.keys.count" counter="$wareIdx">
                <set_value name="$ware" exact="$tradesByWare.keys.{$wareIdx}"/>
                <set_value name="$wareCount" exact="$tradesByWare.{$ware}.count"/>
                <set_value name="$wareDebug" exact="$wareDebug + '\n  - ' + @$ware.name + ': ' + $wareCount + ' trades'"/>
              </do_all>
              <debug_text text="$wareDebug" chance="100"/>
            </do_if>
            
            <!-- Select top 5 per ware by Score -->
            <set_value name="$diverseList" exact="[]"/>
            <do_all exact="$tradesByWare.keys.count" counter="$wareIdx">
              <set_value name="$ware" exact="$tradesByWare.keys.{$wareIdx}"/>
              <set_value name="$wareTrades" exact="$tradesByWare.{$ware}"/>
              
              <!-- Simple selection sort to get top 5 by Score with STATION PAIR DIVERSITY -->
              <set_value name="$top3" exact="[]"/>
              <set_value name="$maxCount" exact="[$wareTrades.count, 5].min"/>
              <do_all exact="$maxCount" counter="$rank">
                <set_value name="$maxScore" exact="-999999999"/>
                <set_value name="$maxIdx" exact="-1"/>
                <do_all exact="$wareTrades.count" counter="$i">
                  <set_value name="$trade" exact="$wareTrades.{$i}"/>
                  <set_value name="$buyStation" exact="$trade.$BuyStation"/>
                  <set_value name="$sellStation" exact="$trade.$SellStation"/>
                  
                  <!-- ✅ STATION PAIR DIVERSITY: Check if this station pair already exists in top3 -->
                  <set_value name="$stationPairExists" exact="false"/>
                  <do_all exact="$top3.count" counter="$j">
                    <set_value name="$existingBuyStation" exact="$top3.{$j}.$BuyStation"/>
                    <set_value name="$existingSellStation" exact="$top3.{$j}.$SellStation"/>
                    <do_if value="$existingBuyStation == $buyStation and $existingSellStation == $sellStation">
                      <set_value name="$stationPairExists" exact="true"/>
                      <break/>
                    </do_if>
                  </do_all>
                  
                  <!-- Only consider if station pair is unique and Score is better -->
                  <do_if value="not $stationPairExists and $trade.$Score gt $maxScore">
                    <set_value name="$maxScore" exact="$trade.$Score"/>
                    <set_value name="$maxIdx" exact="$i"/>
                  </do_if>
                </do_all>
                <do_if value="$maxIdx ge 0">
                  <append_to_list name="$top3" exact="$wareTrades.{$maxIdx}"/>
                </do_if>
                <!-- If we couldn't find a unique station pair, break early (we have all unique pairs already) -->
                <do_if value="$maxIdx lt 0">
                  <break/>
                </do_if>
              </do_all>
              
              <!-- Add up to 5 trades per ware (if less than 5, still include what we have) -->
              <do_if value="$top3.count gt 0">
                <do_all exact="$top3.count" counter="$i">
                  <append_to_list name="$diverseList" exact="$top3.{$i}"/>
                </do_all>
              </do_if>
            </do_all>
            
            <!-- DEBUG: Log diverse list result -->
            <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <debug_text text="'[GT-Cache] Diverse list built: ' + $diverseList.count + ' trades from ' + $tradesByWare.keys.count + ' wares'" chance="100"/>
            </do_if>
            
            <!-- Update tradeList to be the diverse list -->
            <set_value name="$tradeList" exact="$diverseList"/>
            
            <!-- Update bestTrade and bestScore from diverse list for backward compatibility -->
            <set_value name="$bestTrade" exact="null"/>
            <set_value name="$bestScore" exact="0"/>
            <do_all exact="$tradeList.count" counter="$i">
              <set_value name="$trade" exact="$tradeList.{$i}"/>
              <do_if value="$trade.$Score gt $bestScore">
                <set_value name="$bestScore" exact="$trade.$Score"/>
                <set_value name="$bestTrade" exact="$trade"/>
              </do_if>
            </do_all>
          </do_if>
          
          <!-- ✅ RESET COOLDOWN: If cache hit, reset cooldown for this ship -->
          <do_if value="$foundCachedTrade">
            <do_if value="global.$GT_CacheMissCooldowns? and global.$GT_CacheMissCooldowns.{$ship}?">
              <!-- Cache worked - reset cooldown to allow immediate live search if needed in future -->
              <remove_value name="global.$GT_CacheMissCooldowns.{$ship}"/>
            </do_if>
          </do_if>
          
          <!-- DEBUG: Log cache retrieval results -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled">
            <do_if value="@global.$GT_Config.$Debug.$LogLevel ge 2">
              <do_if value="$foundCachedTrade">
                <debug_text text="'[GT-Cache] ✅ Cache HIT for ' + $ship.idcode + ': Found cached trade (Score: ' + $bestScore + ', checked: ' + $checkedEntries + ', valid: ' + $validEntries + ', expired: ' + $expiredEntries + ', diverse list: ' + $tradeList.count + ' trades)'" chance="100"/>
              </do_if>
              <do_else>
                <!-- Log why cache miss occurred -->
                <set_value name="$missReason" exact="''"/>
                <do_if value="$checkedEntries == 0">
                  <set_value name="$missReason" exact="'Cache empty'"/>
                </do_if>
                <do_else>
                  <!-- Count filtered entries from statistics -->
                  <set_value name="$totalFiltered" exact="0"/>
                  <set_value name="$filterBreakdown" exact="''"/>
                  <do_all exact="$tradesByWareBeforeFiltering.keys.count" counter="$wIdx">
                    <set_value name="$w" exact="$tradesByWareBeforeFiltering.keys.{$wIdx}"/>
                    <set_value name="$wStats" exact="$tradesByWareBeforeFiltering.{$w}"/>
                    <set_value name="$totalFiltered" exact="$totalFiltered + $wStats.$filtered"/>
                    <!-- Build breakdown for top filter reasons -->
                    <set_value name="$topFilters" exact="''"/>
                    <do_if value="$wStats.$outOfRange gt 0">
                      <set_value name="$topFilters" exact="$topFilters + (if $topFilters != '' then ', ' else '') + $wStats.$outOfRange + ' outOfRange'"/>
                    </do_if>
                    <do_if value="$wStats.$distanceConstraint gt 0">
                      <set_value name="$topFilters" exact="$topFilters + (if $topFilters != '' then ', ' else '') + $wStats.$distanceConstraint + ' tooFar'"/>
                    </do_if>
                    <do_if value="$wStats.$unreachable gt 0">
                      <set_value name="$topFilters" exact="$topFilters + (if $topFilters != '' then ', ' else '') + $wStats.$unreachable + ' unreachable'"/>
                    </do_if>
                    <do_if value="$wStats.$efficiencyThreshold gt 0">
                      <set_value name="$topFilters" exact="$topFilters + (if $topFilters != '' then ', ' else '') + $wStats.$efficiencyThreshold + ' lowEfficiency'"/>
                    </do_if>
                    <do_if value="$wStats.$roiBelowThreshold gt 0">
                      <set_value name="$topFilters" exact="$topFilters + (if $topFilters != '' then ', ' else '') + $wStats.$roiBelowThreshold + ' roiLow'"/>
                    </do_if>
                    <do_if value="$wStats.$profitTooLow gt 0">
                      <set_value name="$topFilters" exact="$topFilters + (if $topFilters != '' then ', ' else '') + $wStats.$profitTooLow + ' profitLow'"/>
                    </do_if>
                    <do_if value="$topFilters != ''">
                      <set_value name="$filterBreakdown" exact="$filterBreakdown + (if $filterBreakdown != '' then ' | ' else '') + @$w.name + ': [' + $topFilters + ']'"/>
                    </do_if>
                  </do_all>
                  <set_value name="$missReason" exact="$totalFiltered + ' filtered (' + (if $filterBreakdown != '' then $filterBreakdown else 'no details') + ')'"/>
                </do_else>
                <debug_text text="'[GT-Cache] ❌ Cache MISS for ' + $ship.idcode + ': No valid cached trades (checked: ' + $checkedEntries + ', expired: ' + $expiredEntries + ', ' + $missReason + ', maxDistance: ' + $maxDistance + ')'" chance="100"/>
              </do_else>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- Return results via global variable (include valid entries count for diagnostics) -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $Found = ($foundCachedTrade and $tradeList.count gt 0),
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $TradeList = $tradeList,
          $ValidEntries = $validEntries,
          $DiverseListCount = $tradeList.count
        ]"/>
      </actions>
    </cue>
    
    <!-- Search Live Trades (Sub-module) -->
    <cue name="SearchLiveTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <!-- Extract all parameters -->
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        <set_value name="$factionPriorityText" exact="$params.$FactionPriorityText"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$gt_ThreatIntel" exact="$params.$ThreatIntel"/>
        <set_value name="$gt_FleetCoord" exact="$params.$FleetCoord"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$params.$AdvancedAnalytics"/>
        
        <!-- NOTE: Do NOT clear failed trades here - we need to check them AFTER finding best trade -->
        <!-- Failed trades are only cleared on success (in gt_trading_signals.xml) -->
        
        <!-- VERSION LOG - COMMENTED OUT (reduces log spam) -->
        <!-- <debug_text text="'[GT-Search] 🚀 CODE VERSION: 2025-10-25-v5 (Score Bug Fixed) | Ship: ' + $ship.idcode" chance="100"/> -->
        
        <!-- Get failed trades for this ship (needed for filtering during best trade selection) -->
        <set_value name="$failedTrades" exact="[]"/>
        <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
          <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
        </do_if>
        
        <!-- ✅ NEW: Collect top 20 trades instead of just best one -->
        <set_value name="$tradeList" exact="[]"/>
        <set_value name="$maxTradesToReturn" exact="20"/>
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$stationsEvaluated" exact="0"/>
        <set_value name="$offersFound" exact="0"/>
        
        <!-- ===== DETERMINE HOME SECTOR ===== -->
        <set_value name="$homeBase" exact="null"/>
        <set_value name="$homeBaseSource" exact="'unknown'"/>
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
          <set_value name="$homeBaseSource" exact="'order parameters'"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists">
            <set_value name="$homeBaseSource" exact="'defaultorder'"/>
          </do_if>
          <do_else>
            <set_value name="$homeBase" exact="$ship.sector"/>
            <set_value name="$homeBaseSource" exact="'ship.sector (fallback)'"/>
          </do_else>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🏠 Home base: ' + @$homeBase.knownname + ' (sector: ' + $homeSector.knownname + ') [source: ' + $homeBaseSource + ']'" chance="100"/>
        </do_if>
        
        <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
        <!-- ✅ NATIVE ACTION REFACTORING: Use C++ trade offer search instead of MD loops  -->
        <!-- Replaces 2000+ station iterations with single galaxy-wide native C++ queries  -->
        <!-- Performance: 10-100× faster, ZERO stutter (C++ code executes in one frame)   -->
        <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
        
        <!-- Get AI parameters for filtering -->
        <set_value name="$allowIllegal" exact="@global.$GT_AIParameters.{$ship}.$AllowIllegal"/>
        
        <!-- ✅ CRITICAL: Initialize $wareBasket safely (memory:10529400 - ? checks existence, not null) -->
        <!-- Step 1: Initialize to safe default FIRST -->
        <set_value name="$wareBasket" exact="[]"/>
        <!-- Step 2: Check if source exists -->
        <do_if value="global.$GT_AIParameters.{$ship}.$WareBasket?">
          <!-- Step 3: Get value with @ (returns null if missing) -->
          <set_value name="$tempBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
          <!-- Step 4: Extract count property with @ to check if result is valid list -->
          <set_value name="$tempCount" exact="@$tempBasket.count"/>
          <!-- Step 5: Check if COUNT result exists and is valid (>= 0 means it's a list, not null) -->
          <do_if value="$tempCount? and $tempCount ge 0">
            <!-- Step 6: Now safe to use the original temp value -->
            <set_value name="$wareBasket" exact="$tempBasket"/>
          </do_if>
        </do_if>
        
        <!-- Determine ship's blacklistgroup -->
        <set_value name="$blacklistgroup" exact="blacklistgroup.civilian"/>
        <do_if value="(@$ship.primarypurpose == purpose.fight) or (@$ship.primarypurpose == purpose.auxiliary)">
          <set_value name="$blacklistgroup" exact="blacklistgroup.military"/>
        </do_if>
        
        <!-- ✅ NATIVE C++ ACTION: Find all sell offers (ship buys FROM these stations) -->
        <!-- This single call replaces ~2000 station iterations! -->
        <do_if value="$wareBasket.count gt 0">
          <!-- Manual ware selection: query specific wares -->
          <find_sell_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allSellOffers" 
            wares="$wareBasket" 
            multiple="true">
            <match_seller tradesknownto="$ship.owner">
              <!-- ✅ UNIVERSAL CACHE: No blacklist filtering in native query -->
              <!-- Blacklist filtering happens per-ship during cache retrieval -->
            </match_seller>
            <relativeprice max="0.5"/>  <!-- Only reasonably priced offers -->
          </find_sell_offer>
        </do_if>
        <do_else>
          <!-- Auto wares: query all compatible wares -->
          <find_sell_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allSellOffers" 
            multiple="true">
            <match_seller tradesknownto="$ship.owner">
              <!-- ✅ UNIVERSAL CACHE: No blacklist filtering in native query -->
              <!-- Blacklist filtering happens per-ship during cache retrieval -->
            </match_seller>
            <relativeprice max="0.5"/>
          </find_sell_offer>
        </do_else>
        
        <!-- ✅ NATIVE C++ ACTION: Find all buy offers (ship sells TO these stations) -->
        <!-- Note: $wareBasket already initialized above as empty list if null -->
        <do_if value="$wareBasket.count gt 0">
          <find_buy_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allBuyOffers" 
            wares="$wareBasket" 
            multiple="true">
            <match_buyer tradesknownto="$ship.owner">
              <!-- ✅ UNIVERSAL CACHE: No blacklist filtering in native query -->
              <!-- Blacklist filtering happens per-ship during cache retrieval -->
            </match_buyer>
          </find_buy_offer>
        </do_if>
        <do_else>
          <find_buy_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allBuyOffers" 
            multiple="true">
            <match_buyer tradesknownto="$ship.owner">
              <!-- ✅ UNIVERSAL CACHE: No blacklist filtering in native query -->
              <!-- Blacklist filtering happens per-ship during cache retrieval -->
            </match_buyer>
          </find_buy_offer>
        </do_else>
        
        <!-- Initialize counters -->
        <set_value name="$totalFilteredIllegal" exact="0"/>
        <set_value name="$stationsSkipped" exact="0"/>
        <set_value name="$tradesRejectedDocking" exact="0"/>
        <!-- ✅ OPTIMIZATION 1: $tradesRejectedBlacklist removed (safety net eliminated) -->
        <set_value name="$tradesRejectedProfit" exact="0"/>
        <set_value name="$tradesRejectedDistance" exact="0"/>
        <set_value name="$tradesRejectedAmount" exact="0"/>
        <set_value name="$offersFound" exact="$allSellOffers.count + $allBuyOffers.count"/>
        <set_value name="$stationsEvaluated" exact="0"/>  <!-- Not applicable with native actions -->
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ NATIVE ACTIONS: Collected ' + $allSellOffers.count + ' sell + ' + $allBuyOffers.count + ' buy offers (instant C++ query)'" chance="100"/>
        </do_if>
        
        <!-- ✅ UNIVERSAL CACHE: Native actions filtered by:
             - known stations (tradesknownto)
             - price (relativeprice max=0.5)
             ❌ NO blacklist filtering (ship-specific, applied at retrieval)
             ❌ NO illegal ware filtering (ship-specific, applied at retrieval)
             ✅ Distance range filtering only (universal validation)
        -->
        
        <!-- ===== PRE-FILTER DISTANCE (RANGE-ONLY) ===== -->
        <!-- ✅ UNIVERSAL CACHE: Filter by distance range only (from home sector) -->
        <!-- Path validation is ship-specific and happens during cache retrieval -->
        <do_if value="($allSellOffers.count gt 0 or $allBuyOffers.count gt 0) and $maxDistance? and $maxDistance gt 0">
          <set_value name="$sellOffersDistanceFiltered" exact="0"/>
          <set_value name="$buyOffersDistanceFiltered" exact="0"/>
          
          <!-- Filter sell offers by distance range (range-only, NOT path-aware) -->
          <do_if value="$allSellOffers.count gt 0">
            <set_value name="$reachableSellOffers" exact="[]"/>
            <do_all exact="$allSellOffers.count" counter="$i">
              <set_value name="$offer" exact="$allSellOffers.{$i}"/>
              <set_value name="$targetSector" exact="$offer.owner.sector"/>
              
              <!-- Calculate range-only distance (NO blacklist params) -->
              <set_value name="$distance" exact="if $targetSector == $homeSector then 0 else $homeSector.gatedistance.{$targetSector}"/>
              
              <!-- Keep offer if within max distance and path exists (distance >= 0) -->
              <do_if value="$distance ge 0 and $distance le $maxDistance">
                <append_to_list name="$reachableSellOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$sellOffersDistanceFiltered" exact="$sellOffersDistanceFiltered + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allSellOffers" exact="$reachableSellOffers"/>
          </do_if>
          
          <!-- Filter buy offers by distance range (range-only, NOT path-aware) -->
          <do_if value="$allBuyOffers.count gt 0">
            <set_value name="$reachableBuyOffers" exact="[]"/>
            <do_all exact="$allBuyOffers.count" counter="$i">
              <set_value name="$offer" exact="$allBuyOffers.{$i}"/>
              <set_value name="$targetSector" exact="$offer.owner.sector"/>
              
              <!-- Calculate range-only distance (NO blacklist params) -->
              <set_value name="$distance" exact="if $targetSector == $homeSector then 0 else $homeSector.gatedistance.{$targetSector}"/>
              
              <!-- Keep offer if within max distance and path exists (distance >= 0) -->
              <do_if value="$distance ge 0 and $distance le $maxDistance">
                <append_to_list name="$reachableBuyOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$buyOffersDistanceFiltered" exact="$buyOffersDistanceFiltered + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allBuyOffers" exact="$reachableBuyOffers"/>
          </do_if>
          
          <!-- Debug logging -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <do_if value="$sellOffersDistanceFiltered gt 0 or $buyOffersDistanceFiltered gt 0">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📏 PRE-FILTERED distance (range-only): ' + $sellOffersDistanceFiltered + ' sell, ' + $buyOffersDistanceFiltered + ' buy (max: ' + $maxDistance + ' jumps)'" chance="100"/>
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ✅ Offers within range: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- ===== CROSS-STATION TRADE MATCHING ===== -->
        <do_if value="$allSellOffers.count gt 0 and $allBuyOffers.count gt 0">
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Total offers before indexing: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
          </do_if>
          
          <!-- ✅ OPTIMIZATION: Calculate available money ONCE (before loops, not inside) -->
          <set_value name="$availableMoney" exact="player.money"/>
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists and $homeBase.isclass.station">
            <set_value name="$availableMoney" exact="$homeBase.money"/>
          </do_if>
          
          <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
          <!-- ✅ CRITICAL OPTIMIZATION: Index & Limit BEFORE Distance Calculation -->
          <!-- OLD: Calculate gatedistance for 3,859 stations, THEN limit to top 5 per ware -->
          <!-- NEW: Limit to top 5 per ware FIRST, THEN calculate gatedistance for ~250 stations -->
          <!-- Impact: 3,859 → 250 pathfinding calls = 93.5% reduction = ELIMINATES STUTTER! -->
          <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
          
          <!-- STEP 1: Index offers by ware (fast O(n) operation) -->
          <set_value name="$sellOffersByWare" exact="table[]"/>
          <set_value name="$buyOffersByWare" exact="table[]"/>
          
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$offer" exact="$allSellOffers.{$i}"/>
            <do_if value="not $sellOffersByWare.{$offer.ware}?">
              <set_value name="$sellOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$sellOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <do_all exact="$allBuyOffers.count" counter="$j">
            <set_value name="$offer" exact="$allBuyOffers.{$j}"/>
            <do_if value="not $buyOffersByWare.{$offer.ware}?">
              <set_value name="$buyOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$buyOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <!-- STEP 2: Per-ware sort & limit (reduces to ~5 per ware × 50 wares = ~250 stations) -->
          <set_value name="$maxOffersPerWare" exact="2000"/>
          <set_value name="$limitedSellOffers" exact="[]"/>
          <set_value name="$limitedBuyOffers" exact="[]"/>
          
          <!-- Process each ware's sell offers -->
          <do_all exact="$sellOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$sellOffersByWare.keys.{$wareIdx}"/>
            <set_value name="$offersForWare" exact="$sellOffersByWare.{$ware}"/>
            
            <!-- Sort by relativeprice (lowest = cheapest to buy from) -->
            <sort_trades name="$offersForWare" tradelist="$offersForWare" sorter="relativeprice"/>
            
            <!-- Take top N offers -->
            <set_value name="$limitCount" exact="[$offersForWare.count, $maxOffersPerWare].min"/>
            <do_all exact="$limitCount" counter="$idx">
              <append_to_list name="$limitedSellOffers" exact="$offersForWare.{$idx}"/>
            </do_all>
          </do_all>
          
          <!-- Process each ware's buy offers -->
          <do_all exact="$buyOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$buyOffersByWare.keys.{$wareIdx}"/>
            <set_value name="$offersForWare" exact="$buyOffersByWare.{$ware}"/>
            
            <!-- Sort by relativeprice (highest = best buyers) -->
            <sort_trades name="$offersForWare" tradelist="$offersForWare" sorter="relativeprice"/>
            
            <!-- Take LAST N offers (highest payers) -->
            <do_if value="$offersForWare.count gt $maxOffersPerWare">
              <set_value name="$startIndex" exact="$offersForWare.count - $maxOffersPerWare + 1"/>
              <do_all exact="$maxOffersPerWare" counter="$idx">
                <set_value name="$actualIndex" exact="$startIndex + $idx - 1"/>
                <append_to_list name="$limitedBuyOffers" exact="$offersForWare.{$actualIndex}"/>
              </do_all>
            </do_if>
            <do_else>
              <!-- Less than limit, take all -->
              <do_all exact="$offersForWare.count" counter="$idx">
                <append_to_list name="$limitedBuyOffers" exact="$offersForWare.{$idx}"/>
              </do_all>
            </do_else>
          </do_all>
          
          <!-- Replace original lists with limited lists -->
          <set_value name="$allSellOffers" exact="$limitedSellOffers"/>
          <set_value name="$allBuyOffers" exact="$limitedBuyOffers"/>
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ OPTIMIZED: Limited to ' + $allSellOffers.count + ' sell + ' + $allBuyOffers.count + ' buy offers (top ' + $maxOffersPerWare + ' per ware)'" chance="100"/>
          </do_if>
          
          <!-- STEP 3: NOW calculate distances for LIMITED set only (93.5% fewer calls!) -->
          <!-- Re-index limited offers by ware for matching -->
          <set_value name="$sellOffersByWare" exact="table[]"/>
          <set_value name="$buyOffersByWare" exact="table[]"/>
          
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$offer" exact="$allSellOffers.{$i}"/>
            <do_if value="not $sellOffersByWare.{$offer.ware}?">
              <set_value name="$sellOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$sellOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <do_all exact="$allBuyOffers.count" counter="$j">
            <set_value name="$offer" exact="$allBuyOffers.{$j}"/>
            <do_if value="not $buyOffersByWare.{$offer.ware}?">
              <set_value name="$buyOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$buyOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <!-- STEP 4: Calculate distances for LIMITED offers only (RANGE-ONLY, not path-aware) -->
          <set_value name="$stationDistanceCache" exact="table[]"/>
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$sellStation" exact="$allSellOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$sellStation}?">
              <!-- ✅ UNIVERSAL CACHE: Use range-only distance (NO blacklist params) -->
              <set_value name="$targetSector" exact="$sellStation.sector"/>
              <do_if value="$targetSector == $homeSector">
                <!-- Same sector - distance is 0 -->
                <set_value name="$stationDistanceCache.{$sellStation}" exact="0"/>
              </do_if>
              <do_else>
                <!-- Range-only distance (universal validation) -->
                <set_value name="$stationDistanceCache.{$sellStation}" exact="$homeSector.gatedistance.{$targetSector}"/>
              </do_else>
            </do_if>
          </do_all>
          <do_all exact="$allBuyOffers.count" counter="$i">
            <set_value name="$buyStation" exact="$allBuyOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$buyStation}?">
              <!-- ✅ UNIVERSAL CACHE: Use range-only distance (NO blacklist params) -->
              <set_value name="$targetSector" exact="$buyStation.sector"/>
              <do_if value="$targetSector == $homeSector">
                <!-- Same sector - distance is 0 -->
                <set_value name="$stationDistanceCache.{$buyStation}" exact="0"/>
              </do_if>
              <do_else>
                <!-- Range-only distance (universal validation) -->
                <set_value name="$stationDistanceCache.{$buyStation}" exact="$homeSector.gatedistance.{$targetSector}"/>
              </do_else>
            </do_if>
          </do_all>
          
          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
          <!-- ✅ BATCH PROCESSOR PREPARATION: Build data structures for per-ware processing -->
          <!-- Trade matching will be done by batch processor (one ware per batch, 5ms delay) -->
          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
          
          <!-- Get failed trades and reserved routes -->
          <set_value name="$failedTrades" exact="[]"/>
          <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
            <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
          </do_if>
          
          <set_value name="$reservedRoutes" exact="[]"/>
          <do_if value="global.$GT_ActiveTradeReservations? and global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
            <do_all exact="global.$GT_ActiveTradeReservations.keys.count" counter="$resIdx">
              <set_value name="$otherShip" exact="global.$GT_ActiveTradeReservations.keys.{$resIdx}"/>
              <do_if value="$otherShip != $ship and $otherShip.exists">
                <set_value name="$otherRoute" exact="global.$GT_ActiveTradeReservations.{$otherShip}"/>
                <do_if value="$otherRoute.$BuyStation? and $otherRoute.$SellStation? and $otherRoute.$Ware?">
                  <do_if value="$otherRoute.$BuyStation.idcode? and $otherRoute.$SellStation.idcode?">
                    <set_value name="$cacheKey" exact="$otherRoute.$BuyStation.idcode + '_' + $otherRoute.$SellStation.idcode + '_' + $otherRoute.$Ware"/>
                    <append_to_list name="$reservedRoutes" exact="$cacheKey"/>
                  </do_if>
                </do_if>
              </do_if>
            </do_all>
          </do_if>
          
          <!-- Build list of wares that have BOTH sell and buy offers -->
          <set_value name="$wareKeysList" exact="[]"/>
          <do_all exact="$sellOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$sellOffersByWare.keys.{$wareIdx}"/>
            <do_if value="$buyOffersByWare.{$ware}?">
              <append_to_list name="$wareKeysList" exact="$ware"/>
            </do_if>
          </do_all>
          
          <!-- Build sell offers list (one entry per ware) -->
          <set_value name="$sellOffersList" exact="[]"/>
          <do_all exact="$wareKeysList.count" counter="$i">
            <set_value name="$ware" exact="$wareKeysList.{$i}"/>
            <append_to_list name="$sellOffersList" exact="table[
              $ware = $ware,
              $offers = $sellOffersByWare.{$ware}
            ]"/>
          </do_all>
          
          <!-- Build buy offers list (one entry per ware) -->
          <set_value name="$buyOffersList" exact="[]"/>
          <do_all exact="$wareKeysList.count" counter="$i">
            <set_value name="$ware" exact="$wareKeysList.{$i}"/>
            <append_to_list name="$buyOffersList" exact="table[
              $ware = $ware,
              $offers = $buyOffersByWare.{$ware}
            ]"/>
          </do_all>
          
          <!-- Generate unique batch index (use ship object as key - X4 supports object keys) -->
          <set_value name="$batchIndex" exact="'' + player.age + $ship.idcode"/>
          
          <!-- ✅ CRITICAL: Ensure global.$GT_BatchDataList is initialized as TABLE (not list) -->
          <!-- Previous versions initialized this as a list - must always ensure it's a table -->
          <!-- Strategy: Check migration flag, if not migrated yet, clear and convert -->
          <!-- After migration, it's safe to assume it's a table (SystemInit ensures it) -->
          <do_if value="not global.$GT_BatchDataListMigrated?">
            <!-- First time in this session - clear if exists (might be list from old save) -->
            <do_if value="global.$GT_BatchDataList?">
              <remove_value name="global.$GT_BatchDataList"/>
            </do_if>
            <!-- Initialize as table -->
            <set_value name="global.$GT_BatchDataList" exact="table[]"/>
            <!-- Also ensure results list is a table -->
            <do_if value="global.$GT_BatchResultsList?">
              <remove_value name="global.$GT_BatchResultsList"/>
            </do_if>
            <set_value name="global.$GT_BatchResultsList" exact="table[]"/>
            <!-- Mark as migrated -->
            <set_value name="global.$GT_BatchDataListMigrated" exact="true"/>
          </do_if>
          
          <!-- Store state for batch processor - build state table first, then assign -->
          <!-- ✅ CRITICAL: Use ship object as key (not string) - X4 supports object keys in tables -->
          <set_value name="$stateData" exact="table[
            $batchId = $batchIndex,
            $waitingCue = null,
            $ship = $ship,
            $wareKeysList = $wareKeysList,
            $sellOffersList = $sellOffersList,
            $buyOffersList = $buyOffersList,
            $stationDistanceCache = $stationDistanceCache,
            $tradeList = [],
            $crossStationBestScore = 0,
            $crossStationBestTrade = null,
            $nonConflictedBestScore = 0,
            $nonConflictedBestTrade = null,
            $reservedRoutes = $reservedRoutes,
            $failedTrades = $failedTrades,
            $currentWareIndex = 0,
            $tradesPerWare = table[],
            $maxTradesPerWare = 5,
            $batchSize = 1,
            $earlyExitThreshold = 100,
            $maxDistance = $maxDistance,
            $distancePenaltyMultiplier = $distancePenaltyMultiplier,
            $factionPriority = $factionPriority,
            $minROI = $minROI,
            $minAbsoluteProfit = $minAbsoluteProfit,
            $gt_AdvancedAnalytics = $gt_AdvancedAnalytics,
            $availableMoney = $availableMoney,
            $tradesRejectedProfit = 0,
            $tradesRejectedDocking = 0,
            $tradesRejectedAmount = 0,
            $tradesRejectedDistance = 0,
            $bestRejectedProfit = null,
            $bestRejectedTrade = null,
            $homeSector = $homeSector
          ]"/>
          
          <!-- ✅ CRITICAL FIX: Use ship object as table key (X4 supports object keys, not variable string keys) -->
          <set_value name="global.$GT_BatchDataList.{$ship}" exact="$stateData"/>
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GT-Batch] (' + $ship.idcode + ') Prepared batch data: ' + $wareKeysList.count + ' wares, batchIndex=' + $batchIndex" chance="100"/>
          </do_if>
          
          <!-- Signal batch processor to start first batch (pass ship object as key) -->
          <signal_cue_instantly cue="md.GT_Trading_Batch_Processor.ProcessTradeMatchingBatch" param="$ship"/>
          
          <!-- Exit - SearchLiveTrades_Resume will handle results -->
          <!-- Include offer counts for diagnostics (even though batch processing hasn't completed yet) -->
          <set_value name="$totalSellOffers" exact="0"/>
          <set_value name="$totalBuyOffers" exact="0"/>
          <do_all exact="$sellOffersList.count" counter="$i">
            <set_value name="$wareOffers" exact="$sellOffersList.{$i}.$offers"/>
            <set_value name="$totalSellOffers" exact="$totalSellOffers + $wareOffers.count"/>
          </do_all>
          <do_all exact="$buyOffersList.count" counter="$i">
            <set_value name="$wareOffers" exact="$buyOffersList.{$i}.$offers"/>
            <set_value name="$totalBuyOffers" exact="$totalBuyOffers + $wareOffers.count"/>
          </do_all>
          
          <!-- Note: StationsEvaluated not calculated during preparation, will be updated by batch processor -->
          <set_value name="global.$GT_SearchResult" exact="table[
            $Found = false,
            $BestTrade = null,
            $BestScore = 0,
            $TradeList = [],
            $WaitingForBatch = true,
            $Ship = $ship,
            $OffersFound = $totalSellOffers + $totalBuyOffers,
            $StationsEvaluated = 0
          ]"/>
        </do_if>
      </actions>
    </cue>
    
    <!-- ═══════════════════════════════════════════════════════════════════════════ -->
    <!-- SearchLiveTrades_Resume: Process batch processor results with ship-specific filtering -->
    <!-- This cue receives completed batch processing results and applies ship-specific filters -->
    <!-- (ware basket, illegal wares, blacklists, path availability) before returning results -->
    <!-- ═══════════════════════════════════════════════════════════════════════════ -->
    <cue name="SearchLiveTrades_Resume" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- 1. Retrieve ship object from signal (used as table key) -->
        <set_value name="$ship" exact="event.param"/>
        
        <!-- 2. Retrieve results from batch processor using ship object as key -->
        <set_value name="$results" exact="@global.$GT_BatchResultsList.{$ship}"/>
        
        <!-- Validate results exist -->
        <do_if value="not $results?">
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GT-Resume] ⚠️ Batch results not found for ship ' + $ship.idcode" chance="100"/>
          </do_if>
          <set_value name="global.$GT_SearchResult" exact="table[
            $Found = false,
            $BestTrade = null,
            $BestScore = 0,
            $TradeList = []
          ]"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- Extract results -->
        <set_value name="$ship" exact="$results.$ship"/>
        <set_value name="$tradeList" exact="$results.$tradeList"/>
        <set_value name="$crossStationBestTrade" exact="$results.$crossStationBestTrade"/>
        <set_value name="$crossStationBestScore" exact="$results.$crossStationBestScore"/>
        <set_value name="$nonConflictedBestTrade" exact="$results.$nonConflictedBestTrade"/>
        <set_value name="$nonConflictedBestScore" exact="$results.$nonConflictedBestScore"/>
        <!-- Extract rejection statistics from batch processor -->
        <set_value name="$tradesRejectedProfit" exact="0"/>
        <set_value name="$tradesRejectedDocking" exact="0"/>
        <set_value name="$tradesRejectedAmount" exact="0"/>
        <set_value name="$tradesRejectedDistance" exact="0"/>
        <do_if value="$results.$tradesRejectedProfit?">
          <set_value name="$tradesRejectedProfit" exact="$results.$tradesRejectedProfit"/>
        </do_if>
        <do_if value="$results.$tradesRejectedDocking?">
          <set_value name="$tradesRejectedDocking" exact="$results.$tradesRejectedDocking"/>
        </do_if>
        <do_if value="$results.$tradesRejectedAmount?">
          <set_value name="$tradesRejectedAmount" exact="$results.$tradesRejectedAmount"/>
        </do_if>
        <do_if value="$results.$tradesRejectedDistance?">
          <set_value name="$tradesRejectedDistance" exact="$results.$tradesRejectedDistance"/>
        </do_if>
        <set_value name="$bestRejectedTrade" exact="null"/>
        <do_if value="$results.$bestRejectedTrade?">
          <set_value name="$bestRejectedTrade" exact="$results.$bestRejectedTrade"/>
        </do_if>
        
        <!-- Get maxDistance from batch data (still stored for reference) -->
        <set_value name="$maxDistance" exact="null"/>
        <set_value name="$batchData" exact="@global.$GT_BatchDataList.{$ship}"/>
        <do_if value="$batchData? and $batchData.$maxDistance?">
          <set_value name="$maxDistance" exact="$batchData.$maxDistance"/>
        </do_if>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GT-Resume] (' + $ship.idcode + ') Processing ' + $tradeList.count + ' trades from batch processor (maxDistance: ' + $maxDistance + ')'" chance="100"/>
        </do_if>
        
        <!-- 3. Apply ship-specific filtering -->
        <!-- 3a. Get ship settings -->
        <set_value name="$blacklistgroup" exact="blacklistgroup.civilian"/>
        <do_if value="(@$ship.primarypurpose == purpose.fight) or (@$ship.primarypurpose == purpose.auxiliary)">
          <set_value name="$blacklistgroup" exact="blacklistgroup.military"/>
        </do_if>
        <set_value name="$allowIllegal" exact="@global.$GT_AIParameters.{$ship}.$AllowIllegal"/>
        <!-- ✅ CRITICAL: Initialize $wareBasket safely (memory:10529400 - ? checks existence, not null) -->
        <!-- Step 1: Initialize to safe default FIRST -->
        <set_value name="$wareBasket" exact="[]"/>
        <!-- Step 2: Check if source exists -->
        <do_if value="global.$GT_AIParameters.{$ship}.$WareBasket?">
          <!-- Step 3: Get value with @ (returns null if missing) -->
          <set_value name="$tempBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
          <!-- Step 4: Extract count property with @ to check if result is valid list -->
          <set_value name="$tempCount" exact="@$tempBasket.count"/>
          <!-- Step 5: Check if COUNT result exists and is valid (>= 0 means it's a list, not null) -->
          <do_if value="$tempCount? and $tempCount ge 0">
            <!-- Step 6: Now safe to use the original temp value -->
            <set_value name="$wareBasket" exact="$tempBasket"/>
          </do_if>
        </do_if>
        
        <!-- 3b. Filter tradeList -->
        <set_value name="$filteredTradeList" exact="[]"/>
        <!-- ✅ Track filtering statistics -->
        <set_value name="$filteredByWareBasket" exact="0"/>
        <set_value name="$filteredByIllegal" exact="0"/>
        <set_value name="$filteredByBlacklist" exact="0"/>
        <set_value name="$filteredByPathBlocked" exact="0"/>
        <set_value name="$tradesByWareStats" exact="table[]"/>
        
        <do_all exact="$tradeList.count" counter="$i">
          <set_value name="$trade" exact="$tradeList.{$i}"/>
          <set_value name="$ware" exact="$trade.$BuyOffer.ware"/>
          
          <!-- Initialize ware stats if needed -->
          <do_if value="not $tradesByWareStats.{$ware}?">
            <set_value name="$tradesByWareStats.{$ware}" exact="table[$total=0, $filteredByWareBasket=0, $filteredByIllegal=0, $filteredByBlacklist=0, $filteredByPathBlocked=0, $valid=0]"/>
          </do_if>
          <set_value name="$wareStats" exact="$tradesByWareStats.{$ware}"/>
          <set_value name="$wareStats.$total" exact="$wareStats.$total + 1"/>
          
          <!-- Ware filter check -->
          <set_value name="$wareAllowed" exact="true"/>
          <do_if value="$wareBasket.count gt 0">
            <set_value name="$wareInBasket" exact="false"/>
            <do_all exact="$wareBasket.count" counter="$j">
              <do_if value="$wareBasket.{$j} == $ware">
                <set_value name="$wareInBasket" exact="true"/>
                <break/>
              </do_if>
            </do_all>
            <set_value name="$wareAllowed" exact="$wareInBasket"/>
            <do_if value="not $wareAllowed">
              <set_value name="$filteredByWareBasket" exact="$filteredByWareBasket + 1"/>
              <set_value name="$wareStats.$filteredByWareBasket" exact="$wareStats.$filteredByWareBasket + 1"/>
            </do_if>
          </do_if>
          
          <!-- Illegal ware check -->
          <do_if value="$wareAllowed and not $allowIllegal and @$ware.illegal">
            <set_value name="$wareAllowed" exact="false"/>
            <set_value name="$filteredByIllegal" exact="$filteredByIllegal + 1"/>
            <set_value name="$wareStats.$filteredByIllegal" exact="$wareStats.$filteredByIllegal + 1"/>
          </do_if>
          
          <!-- Blacklist check -->
          <set_value name="$isBlacklisted" exact="false"/>
          <do_if value="$wareAllowed">
            <set_value name="$buySector" exact="@$trade.$BuyStation.sector"/>
            <set_value name="$sellSector" exact="@$trade.$SellStation.sector"/>
            <set_value name="$currentSector" exact="$ship.sector"/>
            
            <!-- Buy sector: Check if ship needs to travel there -->
            <do_if value="$buySector != $currentSector">
              <set_value name="$buySectorActivityBlacklisted" exact="@$buySector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$buySectorTravelBlacklisted" exact="@$buySector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$isBlacklisted" exact="$buySectorActivityBlacklisted or $buySectorTravelBlacklisted"/>
              <do_if value="$isBlacklisted">
                <set_value name="$filteredByBlacklist" exact="$filteredByBlacklist + 1"/>
                <set_value name="$wareStats.$filteredByBlacklist" exact="$wareStats.$filteredByBlacklist + 1"/>
              </do_if>
            </do_if>
            
            <!-- Sell sector: Always check (ship must leave if blacklisted) -->
            <do_if value="not $isBlacklisted">
              <set_value name="$sellSectorActivityBlacklisted" exact="@$sellSector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$sellSectorTravelBlacklisted" exact="@$sellSector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$isBlacklisted" exact="$sellSectorActivityBlacklisted or $sellSectorTravelBlacklisted"/>
              <do_if value="$isBlacklisted">
                <set_value name="$filteredByBlacklist" exact="$filteredByBlacklist + 1"/>
                <set_value name="$wareStats.$filteredByBlacklist" exact="$wareStats.$filteredByBlacklist + 1"/>
              </do_if>
            </do_if>
            
            <!-- Path availability check (blacklist-aware) -->
            <do_if value="not $isBlacklisted">
              <set_value name="$buyPathDistance" exact="$ship.gatedistance.{$buySector}.{$blacklistgroup}.{$ship}"/>
              <set_value name="$sellPathDistance" exact="$buySector.gatedistance.{$sellSector}.{$blacklistgroup}.{$ship}"/>
              <do_if value="$buyPathDistance lt 0 or $sellPathDistance lt 0">
                <set_value name="$isBlacklisted" exact="true"/>
                <set_value name="$filteredByPathBlocked" exact="$filteredByPathBlocked + 1"/>
                <set_value name="$wareStats.$filteredByPathBlocked" exact="$wareStats.$filteredByPathBlocked + 1"/>
              </do_if>
            </do_if>
          </do_if>
          
          <!-- Add to filtered list if valid -->
          <do_if value="$wareAllowed and not $isBlacklisted">
            <append_to_list name="$filteredTradeList" exact="$trade"/>
            <set_value name="$wareStats.$valid" exact="$wareStats.$valid + 1"/>
          </do_if>
          
          <!-- Update ware stats -->
          <set_value name="$tradesByWareStats.{$ware}" exact="$wareStats"/>
        </do_all>
        
        <!-- DEBUG: Log filtering statistics -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <set_value name="$filteringStats" exact="'[GT-Resume] (' + $ship.idcode + ') Filtering statistics:' +
            '\n  Total trades: ' + $tradeList.count +
            '\n  Filtered by ware basket: ' + $filteredByWareBasket +
            '\n  Filtered by illegal: ' + $filteredByIllegal +
            '\n  Filtered by blacklist: ' + $filteredByBlacklist +
            '\n  Filtered by path blocked: ' + $filteredByPathBlocked +
            '\n  Valid trades: ' + $filteredTradeList.count"/>
          <debug_text text="$filteringStats" chance="100"/>
          
          <!-- Log per-ware statistics -->
          <do_if value="$tradesByWareStats.keys.count gt 0">
            <set_value name="$wareStatsLog" exact="'[GT-Resume] (' + $ship.idcode + ') Per-ware filtering:'"/>
            <do_all exact="$tradesByWareStats.keys.count" counter="$wareIdx">
              <set_value name="$ware" exact="$tradesByWareStats.keys.{$wareIdx}"/>
              <set_value name="$stats" exact="$tradesByWareStats.{$ware}"/>
              <set_value name="$wareStatsLog" exact="$wareStatsLog + 
                '\n  - ' + @$ware.name + ': ' + $stats.$total + ' checked, ' +
                $stats.$filteredByWareBasket + ' basket, ' +
                $stats.$filteredByIllegal + ' illegal, ' +
                $stats.$filteredByBlacklist + ' blacklist, ' +
                $stats.$filteredByPathBlocked + ' path, ' +
                $stats.$valid + ' valid'"/>
            </do_all>
            <debug_text text="$wareStatsLog" chance="100"/>
          </do_if>
        </do_if>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GT-Resume] (' + $ship.idcode + ') After ship-specific filtering: ' + $filteredTradeList.count + ' trades (from ' + $tradeList.count + ')'" chance="100"/>
        </do_if>
        
        <!-- 4. Build diverse list: Top 5 per ware (minimum-maximum) with early exit -->
        <!-- DEBUG: Log trades before diverse list building -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GT-Resume] (' + $ship.idcode + ') Building diverse list from ' + $filteredTradeList.count + ' filtered trades'" chance="100"/>
        </do_if>
        
        <set_value name="$tradesByWare" exact="table[]"/>
        <do_all exact="$filteredTradeList.count" counter="$i">
          <set_value name="$trade" exact="$filteredTradeList.{$i}"/>
          <set_value name="$ware" exact="$trade.$BuyOffer.ware"/>
          <do_if value="not $tradesByWare.{$ware}?">
            <set_value name="$tradesByWare.{$ware}" exact="[]"/>
          </do_if>
          <append_to_list name="$tradesByWare.{$ware}" exact="$trade"/>
        </do_all>
        
        <!-- DEBUG: Log wares found -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <set_value name="$wareDebug" exact="'[GT-Resume] (' + $ship.idcode + ') Found ' + $tradesByWare.keys.count + ' wares with trades:'"/>
          <do_all exact="$tradesByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$tradesByWare.keys.{$wareIdx}"/>
            <set_value name="$wareCount" exact="$tradesByWare.{$ware}.count"/>
            <set_value name="$wareDebug" exact="$wareDebug + '\n  - ' + @$ware.name + ': ' + $wareCount + ' trades'"/>
          </do_all>
          <debug_text text="$wareDebug" chance="100"/>
        </do_if>
        
        <!-- ✅ EARLY EXIT: Sort trades by distance (shortest first) per ware, break when exceeding maxDistance -->
        <!-- This matches the old implementation pattern: pre-sort by distance, break early when limit reached -->
        <set_value name="$diverseList" exact="[]"/>
        <set_value name="$currentSector" exact="$ship.sector"/>
        <do_all exact="$tradesByWare.keys.count" counter="$wareIdx">
          <set_value name="$ware" exact="$tradesByWare.keys.{$wareIdx}"/>
          <set_value name="$wareTrades" exact="$tradesByWare.{$ware}"/>
          
          <!-- ✅ STEP 1: Sort this ware's trades by distance (ship to buy station) for early exit -->
          <!-- Calculate distance for each trade and create distance-sorted list -->
          <set_value name="$tradesWithDistance" exact="[]"/>
          <do_all exact="$wareTrades.count" counter="$i">
            <set_value name="$trade" exact="$wareTrades.{$i}"/>
            <set_value name="$buySector" exact="@$trade.$BuyStation.sector"/>
            <set_value name="$tradeDistance" exact="-1"/>
            <do_if value="$buySector == $currentSector">
              <set_value name="$tradeDistance" exact="0"/>
            </do_if>
            <do_else>
              <!-- Calculate blacklist-aware distance from ship to buy station -->
              <set_value name="$tradeDistance" exact="$ship.gatedistance.{$buySector}.{$blacklistgroup}.{$ship}"/>
            </do_else>
            <!-- Only include trades with valid distance (>= 0 means reachable) -->
            <do_if value="$tradeDistance ge 0">
              <append_to_list name="$tradesWithDistance" exact="table[
                $Trade = $trade,
                $Distance = $tradeDistance
              ]"/>
            </do_if>
          </do_all>
          
          <!-- ✅ STEP 2: Sort by distance (simple selection sort - shortest first) -->
          <set_value name="$sortedTrades" exact="[]"/>
          <do_all exact="$tradesWithDistance.count" counter="$sortIdx">
            <set_value name="$minDistance" exact="999999999"/>
            <set_value name="$minIdx" exact="-1"/>
            <do_all exact="$tradesWithDistance.count" counter="$i">
              <set_value name="$alreadySorted" exact="false"/>
              <do_all exact="$sortedTrades.count" counter="$j">
                <do_if value="$sortedTrades.{$j}.$Trade == $tradesWithDistance.{$i}.$Trade">
                  <set_value name="$alreadySorted" exact="true"/>
                  <break/>
                </do_if>
              </do_all>
              <do_if value="not $alreadySorted and $tradesWithDistance.{$i}.$Distance lt $minDistance">
                <set_value name="$minDistance" exact="$tradesWithDistance.{$i}.$Distance"/>
                <set_value name="$minIdx" exact="$i"/>
              </do_if>
            </do_all>
            <do_if value="$minIdx ge 0">
              <append_to_list name="$sortedTrades" exact="$tradesWithDistance.{$minIdx}"/>
            </do_if>
          </do_all>
          
          <!-- ✅ STEP 3: Select top 5 by Score, with early exit when distance exceeds maxDistance -->
          <set_value name="$top3" exact="[]"/>
          <set_value name="$skippedDueToDistance" exact="0"/>
          <do_all exact="$sortedTrades.count" counter="$i">
            <!-- Early exit: If this trade exceeds maxDistance, all subsequent trades are also too far (sorted by distance) -->
            <do_if value="$maxDistance? and $sortedTrades.{$i}.$Distance gt $maxDistance">
              <set_value name="$skippedDueToDistance" exact="$sortedTrades.count - $i"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Resume] (' + $ship.idcode + ') ⚡ EARLY EXIT for ware ' + @$ware.name + ': Reached distance limit at trade ' + $i + '/' + $sortedTrades.count + ' (skipped ' + $skippedDueToDistance + ' trades)'" chance="100"/>
              </do_if>
              <break/>
            </do_if>
            
            <!-- Trade is within distance - select top 5 by Score with STATION PAIR DIVERSITY -->
            <set_value name="$trade" exact="$sortedTrades.{$i}.$Trade"/>
            <set_value name="$buyStation" exact="$trade.$BuyStation"/>
            <set_value name="$sellStation" exact="$trade.$SellStation"/>
            
            <!-- ✅ STATION PAIR DIVERSITY: Check if this station pair already exists in top3 -->
            <set_value name="$stationPairExists" exact="false"/>
            <do_all exact="$top3.count" counter="$j">
              <set_value name="$existingBuyStation" exact="$top3.{$j}.$BuyStation"/>
              <set_value name="$existingSellStation" exact="$top3.{$j}.$SellStation"/>
              <do_if value="$existingBuyStation == $buyStation and $existingSellStation == $sellStation">
                <set_value name="$stationPairExists" exact="true"/>
                <break/>
              </do_if>
            </do_all>
            
            <!-- Skip if station pair already exists (ensure diversity) -->
            <do_if value="not $stationPairExists">
              <set_value name="$shouldAdd" exact="false"/>
              <do_if value="$top3.count lt 5">
                <!-- Still building initial top 5 - add unique station pair -->
                <set_value name="$shouldAdd" exact="true"/>
              </do_if>
              <do_else>
                <!-- Top 5 full - check if this trade's Score is better than worst -->
                <set_value name="$worstScore" exact="999999999"/>
                <set_value name="$worstIdx" exact="-1"/>
                <do_all exact="5" counter="$j">
                  <do_if value="$top3.{$j}.$Score lt $worstScore">
                    <set_value name="$worstScore" exact="$top3.{$j}.$Score"/>
                    <set_value name="$worstIdx" exact="$j"/>
                  </do_if>
                </do_all>
                <do_if value="$trade.$Score gt $worstScore">
                  <!-- Replace worst with this trade (unique station pair) -->
                  <set_value name="$shouldAdd" exact="true"/>
                </do_if>
              </do_else>
              <do_if value="$shouldAdd">
                <do_if value="$top3.count lt 5">
                  <append_to_list name="$top3" exact="$trade"/>
                </do_if>
                <do_else>
                  <!-- Replace worst trade in top5 -->
                  <set_value name="$worstScore" exact="999999999"/>
                  <set_value name="$worstIdx" exact="-1"/>
                  <do_all exact="5" counter="$j">
                    <do_if value="$top3.{$j}.$Score lt $worstScore">
                      <set_value name="$worstScore" exact="$top3.{$j}.$Score"/>
                      <set_value name="$worstIdx" exact="$j"/>
                    </do_if>
                  </do_all>
                  <do_if value="$worstIdx ge 0">
                    <set_value name="$top3.{$worstIdx}" exact="$trade"/>
                  </do_if>
                </do_else>
              </do_if>
            </do_if>
          </do_all>
          
          <!-- Add up to 5 trades per ware (if less than 5, still include what we have) -->
          <do_if value="$top3.count gt 0">
            <do_all exact="$top3.count" counter="$i">
              <append_to_list name="$diverseList" exact="$top3.{$i}"/>
            </do_all>
          </do_if>
        </do_all>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GT-Resume] (' + $ship.idcode + ') Diverse list: ' + $diverseList.count + ' trades (top 5 per ware)'" chance="100"/>
        </do_if>
        
        <!-- 5. Cache maintenance: Delete old entries (if cache was refreshed) -->
        <!-- TODO: Track if new trades were added to cache during this search -->
        <!-- For now, assume cache was refreshed if batch processor ran -->
        <set_value name="$cacheRefreshed" exact="true"/>
        <do_if value="$cacheRefreshed and global.$GT_TradeCache?">
          <set_value name="$cacheMaxAge" exact="15min"/>
          <set_value name="$cacheCount" exact="global.$GT_TradeCache.count"/>
          <set_value name="$deletedCount" exact="0"/>
          <do_all exact="$cacheCount" counter="$i" reverse="true">
            <set_value name="$entry" exact="global.$GT_TradeCache.{$i}"/>
            <do_if value="$entry? and $entry.$Timestamp?">
              <set_value name="$entryAge" exact="player.age - $entry.$Timestamp"/>
              <do_if value="$entryAge gt $cacheMaxAge">
                <remove_value name="global.$GT_TradeCache.{$i}"/>
                <set_value name="$deletedCount" operation="add"/>
              </do_if>
            </do_if>
          </do_all>
          <do_if value="$deletedCount gt 0 and global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GT-Resume] (' + $ship.idcode + ') Cache cleanup: Deleted ' + $deletedCount + ' entries older than 15 minutes'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- 6. Select best trade (for backward compatibility) -->
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <do_if value="$nonConflictedBestTrade?">
          <!-- Prefer non-conflicted from filtered list -->
          <set_value name="$bestTrade" exact="$nonConflictedBestTrade"/>
          <set_value name="$bestScore" exact="$nonConflictedBestScore"/>
        </do_if>
        <do_elseif value="$crossStationBestTrade?">
          <set_value name="$bestTrade" exact="$crossStationBestTrade"/>
          <set_value name="$bestScore" exact="$crossStationBestScore"/>
        </do_elseif>
        <do_else>
          <!-- Fallback: Find best from diverse list -->
          <do_all exact="$diverseList.count" counter="$i">
            <set_value name="$trade" exact="$diverseList.{$i}"/>
            <do_if value="$trade.$Score gt $bestScore">
              <set_value name="$bestScore" exact="$trade.$Score"/>
              <set_value name="$bestTrade" exact="$trade"/>
            </do_if>
          </do_all>
        </do_else>
        
        <!-- 7. Extract original parameters BEFORE cleanup (so they're available when signaling) -->
        <!-- Extract original parameters from search queue (stored when search was queued) -->
        <set_value name="$originalParams" exact="null"/>
        <do_if value="global.$GT_SearchQueue.$Params? and global.$GT_SearchQueue.$Params.{$ship}?">
          <!-- Parameters are stored in search queue when search was initiated -->
          <set_value name="$originalParams" exact="global.$GT_SearchQueue.$Params.{$ship}"/>
        </do_if>
        <do_else>
          <!-- Fallback: Reconstruct parameters from batch data (before cleanup) -->
          <set_value name="$batchData" exact="@global.$GT_BatchDataList.{$ship}"/>
          <do_if value="$batchData?">
            <set_value name="$allowIllegalDefault" exact="false"/>
            <set_value name="$originalParams" exact="table[
              $Ship = $ship,
              $MaxDistance = @$batchData.$maxDistance,
              $MinROI = @$batchData.$minROI,
              $MinAbsoluteProfit = @$batchData.$minAbsoluteProfit,
              $FactionPriority = @$batchData.$factionPriority,
              $AllowIllegal = $allowIllegalDefault
            ]"/>
          </do_if>
        </do_else>
        
        <!-- 8. Return results (including rejection statistics for diagnostics) -->
        <set_value name="$waitingFlag" exact="false"/>
        <set_value name="global.$GT_SearchResult" exact="table[
          $Found = ($diverseList.count gt 0),
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $TradeList = $diverseList,
          $TradesRejectedProfit = $tradesRejectedProfit,
          $TradesRejectedDocking = $tradesRejectedDocking,
          $TradesRejectedAmount = $tradesRejectedAmount,
          $TradesRejectedDistance = $tradesRejectedDistance,
          $BestRejectedTrade = $bestRejectedTrade,
          $WaitingForBatch = $waitingFlag
        ]"/>
        
        <!-- 9. Cleanup batch data (using ship object as key) -->
        <remove_value name="global.$GT_BatchDataList.{$ship}"/>
        <remove_value name="global.$GT_BatchResultsList.{$ship}"/>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GT-Resume] (' + $ship.idcode + ') Complete. Returning ' + $diverseList.count + ' diverse trades. Best score: ' + $bestScore" chance="100"/>
        </do_if>
        
        <!-- 10. Signal SearchTradeRoutes again with original parameters so it can read the live search results -->
        <do_if value="$originalParams?">
          <signal_cue_instantly cue="md.GT_Trading_Search.SearchTradeRoutes" param="$originalParams"/>
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GT-Resume] (' + $ship.idcode + ') Signaled SearchTradeRoutes to continue with live search results (' + $diverseList.count + ' trades)'" chance="100"/>
          </do_if>
        </do_if>
        <do_else>
          <!-- Fallback: Could not find original parameters, but results are already in global.$GT_SearchResult -->
          <!-- SearchTradeRoutes will be signaled by another mechanism or will read results on next check -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GT-Resume] (' + $ship.idcode + ') ⚠️ Could not find original parameters to signal SearchTradeRoutes - results stored in global.$GT_SearchResult'" chance="100"/>
          </do_if>
        </do_else>
      </actions>
    </cue>
    
    <!-- Search for Sell Opportunities -->
    <cue name="SearchSellOpportunities" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- Receive parameters directly -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minProfit" exact="$params.$MinProfit"/>
        
        <!-- DEBUG: Sell search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === SELL SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin Profit: ' + $minProfit + ' Cr'" chance="100"/>
        </do_if>
        
        <!-- Find best sell location for current cargo -->
        <set_value name="$bestOffer" exact="null"/>
        <set_value name="$bestPrice" exact="0"/>
        <set_value name="$bestAmount" exact="0"/>
        
        <!-- Get ship's current cargo -->
        <set_value name="$currentCargo" exact="$ship.cargo.list"/>
        
        <do_if value="$currentCargo.count gt 0">
          <!-- ✅ CRITICAL FIX: Sell ONE ware at a time (first ware in list) -->
          <!-- After this trade completes, ship will loop back and sell next ware -->
          <!-- This prevents multiple concurrent trade orders for the same ship -->
          
          <set_value name="$selectedWare" exact="$currentCargo.{1}"/>
          <set_value name="$selectedAmount" exact="$ship.cargo.{$selectedWare}.count"/>
          
          <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Cargo contains ' + $currentCargo.count + ' ware types, selling first: ' + @$selectedWare.name + ' x' + $selectedAmount + ' (after sale, will retry for remaining wares)'" chance="100"/>
          
          <!-- Find buy offers for the selected ware -->
          <!-- ✅ CRITICAL: tradepartner="$ship" ensures only executable offers (relations, permissions, F6 limitations) -->
          <find_buy_offer tradepartner="$ship" space="player.galaxy" result="$buyOffers" multiple="true" wares="$selectedWare">
            <match_buyer tradesknownto="$ship.owner">
              <match_gate_distance object="$ship" max="$maxDistance"/>
            </match_buyer>
          </find_buy_offer>
          
          <!-- Find best price -->
          <do_all exact="$buyOffers.count" counter="$j">
            <set_value name="$offer" exact="$buyOffers.{$j}"/>
            <set_value name="$station" exact="$offer.owner"/>
            
            <!-- ✅ NOTE: tradepartner="$ship" in find_buy_offer already filters by faction relations -->
            <!-- No explicit check needed - C++ engine handles it -->
            
            <!-- ✅ VALIDATION: Check blacklists before considering offer -->
            <set_value name="$isBlacklisted" exact="false"/>
            
            <!-- Check station blacklist (object activity) -->
            <do_if value="@$station.isblacklisted.{blacklisttype.objectactivity}.{blacklistgroup.civilian}.{$ship}">
              <set_value name="$isBlacklisted" exact="true"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (station blacklisted)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- Check sector blacklist (sector activity) -->
            <do_if value="not $isBlacklisted and @$station.sector.isblacklisted.{blacklisttype.sectoractivity}.{blacklistgroup.civilian}.{$ship}">
              <set_value name="$isBlacklisted" exact="true"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (sector activity blacklisted)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- Check sector blacklist (travel) -->
            <do_if value="not $isBlacklisted and @$station.sector.isblacklisted.{blacklisttype.sectortravel}.{blacklistgroup.civilian}.{$ship}">
              <set_value name="$isBlacklisted" exact="true"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (sector travel blacklisted)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- ✅ VALIDATION: Check if path to station goes through blacklisted sectors -->
            <!-- Uses blacklist-aware gatedistance - returns -1 if path blocked by blacklisted sector -->
            <!-- Vanilla pattern: order.dock.xml:503 -->
            <do_if value="not $isBlacklisted">
              <set_value name="$pathDistance" exact="$ship.gatedistance.{$station.sector}.{blacklistgroup.civilian}.{$ship}"/>
              
              <do_if value="$pathDistance lt 0">
                <!-- Path goes through blacklisted sector or no path exists -->
                <set_value name="$isBlacklisted" exact="true"/>
                <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                  <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (path goes through blacklisted sector)'" chance="100"/>
                </do_if>
              </do_if>
            </do_if>
            
            <!-- ✅ VALIDATION: Check operational status -->
            <set_value name="$isOperational" exact="$station.isoperational and not @$station.isclosingdown"/>
            <do_if value="not $isBlacklisted and not $isOperational">
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (not operational)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- ✅ VALIDATION: Check docking permission -->
            <set_value name="$canDock" exact="$station.dockingallowed.{$ship}"/>
            <do_if value="not $isBlacklisted and $isOperational and not $canDock">
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (docking not allowed)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- Only consider valid, non-blacklisted, operational, dockable offers -->
            <do_if value="not $isBlacklisted and $isOperational and $canDock and $offer.available">
              <set_value name="$tradeAmount" exact="[$selectedAmount, $offer.amount].min"/>
              <set_value name="$profit" exact="$offer.unitprice * $tradeAmount"/>
              
              <do_if value="$profit gt $bestPrice">
                <set_value name="$bestOffer" exact="$offer"/>
                <set_value name="$bestPrice" exact="$profit"/>
                <set_value name="$bestAmount" exact="$tradeAmount"/>
                
                <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                  <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Best offer now: ' + @$station.knownname + ' - ' + $offer.ware.name + ' x' + $tradeAmount + ' @ ' + $offer.unitprice + ' Cr/unit (profit: ' + $profit + ' Cr)'" chance="100"/>
                </do_if>
              </do_if>
            </do_if>
          </do_all>
          
          <!-- Execute best sell if found -->
          <do_if value="$bestOffer and $bestPrice gt $minProfit">
            <!-- ✅ CRITICAL: Validate offer is STILL valid before creating order -->
            <!-- Offers can become invalid between search and order creation -->
            <set_value name="$offerStillValid" exact="$bestOffer.available and $bestOffer.amount gt 0"/>
            
            <do_if value="$offerStillValid">
              <debug_text text="'[GalaxyTrader MK3] ' + $ship.knownname + ' found sell opportunity'" chance="100"/>
              
              <!-- Create trade order with blacklist routing enabled -->
              <!-- internal="true" ensures pathfinding routes around blacklisted sectors -->
              <create_trade_order object="$ship" tradeoffer="$bestOffer" amount="$bestAmount" immediate="false" internal="true"/>
              
              <!-- Signal back to AI script: Trade Found -->
              <signal_objects object="$ship" param="'GT_Trade_Found'"/>
            </do_if>
            <do_else>
              <!-- Offer became invalid - don't create order -->
              <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Best offer became invalid before order creation - retrying'" chance="100"/>
              
              <!-- Signal back to AI script: No Trade Found (will retry) -->
              <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
            </do_else>
          </do_if>
          <do_else>
            <!-- Signal back to AI script: No Trade Found -->
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
          </do_else>
        </do_if>
        <do_else>
          <!-- Signal back to AI script: No Trade Found (no cargo) -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
        </do_else>
        
        <!-- CRITICAL: Clean up AI parameters -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
      </actions>
    </cue>
  </cues>
</mdscript>
