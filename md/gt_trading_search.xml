<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GT_Trading_Search" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/md.xsd">
  <cues>
    <!-- ========================================
         GALAXY TRADER MK3 - SEARCH ENGINE
         Core trade route search and matching logic
         ======================================== -->
    
    <!-- Search for Trade Routes (MAIN SEARCH ENGINE) -->
    <cue name="SearchTradeRoutes" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- ✅ PERFORMANCE FIX: Receive parameters directly from event to prevent race conditions -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        
        <!-- Create faction priority text for debug output -->
        <set_value name="$factionPriorityText" exact="if $factionPriority == 0 then 'Player Only' else if $factionPriority == 1 then 'Foreign First' else 'Equal Priority'"/>
        
        <!-- Get distance penalty setting (0-100% converted to 0.0-2.0 multiplier) -->
        <set_value name="$distancePenaltyMultiplier" exact="1.0"/> <!-- Default: 50% = 1.0 -->
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$DistancePenalty?">
          <!-- Convert 0-100% to 0.0-2.0: 0%=0.0, 50%=1.0, 100%=2.0 -->
          <set_value name="$distancePenaltyMultiplier" exact="global.$GT_AIParameters.{$ship}.$DistancePenalty / 50.0"/>
        </do_if>

        <!-- Resolve pilot skill and apply feature gates + level-based thresholds -->
        <run_actions ref="md.GT_Ship_Management.Calculate_Skill_Level" result="$skillInfo">
          <param name="ship" value="$ship"/>
        </run_actions>
        <set_value name="$skillLevel" exact="if $skillInfo? and $skillInfo.$Level? then $skillInfo.$Level else 1"/>

        <!-- Feature gates by skill level -->
        <set_value name="$gt_ThreatIntel" exact="$skillLevel ge 6"/>
        <set_value name="$gt_SatelliteIntel" exact="$skillLevel ge 9"/>
        <set_value name="$gt_FleetCoord" exact="$skillLevel ge 12"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$skillLevel ge 15"/>

        <!-- Level-based ROI and Absolute Profit thresholds (0.5x @Lv1 → 2.0x @Lv15) -->
        <set_value name="$roiMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$profitMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$minROI" exact="$minROI * $roiMultiplier"/>
        <set_value name="$minAbsoluteProfit" exact="($minAbsoluteProfit * $profitMultiplier)i"/>
        
        <!-- DEBUG: Trade search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <set_value name="$pilotInfo" exact="'No Pilot'"/>
          <do_if value="$ship.pilot">
            <set_value name="$shownSkill" exact="1"/>
            <do_if value="global.$GT_Pilots.{$ship.pilot}? and global.$GT_Pilots.{$ship.pilot}.$Level?">
              <set_value name="$shownSkill" exact="global.$GT_Pilots.{$ship.pilot}.$Level"/>
            </do_if>
            <do_elseif value="$ship.pilot.skill.management?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.management"/>
            </do_elseif>
            <do_elseif value="$ship.pilot.skill.piloting?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.piloting"/>
            </do_elseif>
            <set_value name="$pilotInfo" exact="$ship.pilot.name + ' (Skill: ' + $shownSkill + ')'"/>
          </do_if>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === TRADE SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nPilot: ' + $pilotInfo + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin ROI: ' + $minROI + '%' + '\nMin Absolute Profit: ' + ($minAbsoluteProfit / 100) + ' Cr' + '\nShip Cargo: ' + ($ship.cargo.capacity.all - $ship.cargo.free.all) + '/' + $ship.cargo.capacity.all" chance="100"/>
        </do_if>
        
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== PHASE 1: CHECK TRADE CACHE WITH AGE VALIDATION ===== -->
        <signal_cue_instantly cue="SearchCachedTrades" param="table[
          $Ship = $ship,
          $MaxDistance = $maxDistance,
          $MinROI = $minROI,
          $MinAbsoluteProfit = $minAbsoluteProfit,
          $FactionPriority = $factionPriority,
          $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
          $SkillLevel = $skillLevel,
          $AllowIllegal = $params.$AllowIllegal
        ]"/>
        
        <!-- Extract cache results from global return variable -->
        <set_value name="$foundCachedTrade" exact="@global.$GT_SearchResult.$Found"/>
        <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
        <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
        <set_value name="$cacheBlacklistRejections" exact="@global.$GT_SearchResult.$BlacklistRejections"/>
        <set_value name="$tradeList" exact="@global.$GT_SearchResult.$TradeList"/>
        
        <!-- Initialize rejection statistics (for both cached and live searches) -->
        <set_value name="$tradesRejectedDocking" exact="0"/>
        <!-- ✅ OPTIMIZATION 1: $tradesRejectedBlacklist removed (safety net eliminated) -->
        <set_value name="$tradesRejectedProfit" exact="0"/>
        <set_value name="$tradesRejectedDistance" exact="0"/>
        <set_value name="$tradesRejectedAmount" exact="0"/>
        
        <!-- ===== PHASE 2: LIVE TRADE SEARCH (if no good cached trade) ===== -->
        <do_if value="not $foundCachedTrade">
          <!-- DEBUG: No cached trade, performing live search -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') No suitable cached trade found, performing live market search'" chance="100"/>
          </do_if>
        
          <!-- Perform live search -->
          <signal_cue_instantly cue="SearchLiveTrades" param="table[
            $Ship = $ship,
            $MaxDistance = $maxDistance,
            $MinROI = $minROI,
            $MinAbsoluteProfit = $minAbsoluteProfit,
            $FactionPriority = $factionPriority,
            $FactionPriorityText = $factionPriorityText,
            $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
            $SkillLevel = $skillLevel,
            $ThreatIntel = $gt_ThreatIntel,
            $FleetCoord = $gt_FleetCoord,
            $AdvancedAnalytics = $gt_AdvancedAnalytics
          ]"/>
          
          <!-- Extract live search results from global return variable -->
          <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
          <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
          <set_value name="$stationsEvaluated" exact="@global.$GT_SearchResult.$StationsEvaluated"/>
          <set_value name="$offersFound" exact="@global.$GT_SearchResult.$OffersFound"/>
          <set_value name="$tradeList" exact="@global.$GT_SearchResult.$TradeList"/>
          <!-- Update rejection statistics from live search (if available) -->
          <do_if value="global.$GT_SearchResult.$TradesRejectedDocking?">
            <set_value name="$tradesRejectedDocking" exact="global.$GT_SearchResult.$TradesRejectedDocking"/>
          </do_if>
          <!-- ✅ OPTIMIZATION 1: $TradesRejectedBlacklist no longer tracked (safety net eliminated) -->
          <do_if value="global.$GT_SearchResult.$TradesRejectedProfit?">
            <set_value name="$tradesRejectedProfit" exact="global.$GT_SearchResult.$TradesRejectedProfit"/>
          </do_if>
          <do_if value="global.$GT_SearchResult.$TradesRejectedDistance?">
            <set_value name="$tradesRejectedDistance" exact="global.$GT_SearchResult.$TradesRejectedDistance"/>
          </do_if>
          <do_if value="global.$GT_SearchResult.$TradesRejectedAmount?">
            <set_value name="$tradesRejectedAmount" exact="global.$GT_SearchResult.$TradesRejectedAmount"/>
          </do_if>
          
          <!-- Failed sector filtering now happens during best trade tracking (inside evaluation loop) -->
          <!-- This ensures: 1) All trades are cached for other ships, 2) Best selection excludes failed sectors -->
        </do_if>  <!-- End of live trade search -->
        
        <!-- Execute best trade if found -->
        <do_if value="$bestTrade">
          <!-- DEBUG: Trade execution with full details -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📊 BEST TRADE SELECTED:' + '\n  📦 Ware: ' + $bestTrade.$BuyOffer.ware.name + ' (x' + $bestTrade.$Amount + ')' + '\n  📍 BUY from: ' + $bestTrade.$BuyOffer.owner.knownname + ' @ ' + ($bestTrade.$BuyPrice / 100) + ' Cr' + '\n  📍 SELL to: ' + $bestTrade.$SellOffer.owner.knownname + ' @ ' + ($bestTrade.$SellPrice / 100) + ' Cr' + '\n  🚀 Distance: ' + $bestTrade.$Distance + ' jumps' + '\n  💰 Profit: ' + ($bestTrade.$Profit / 100) + ' Cr' + '\n  📈 ROI: ' + @$bestTrade.$ROI + '%' + '\n  📊 Score: ' + $bestTrade.$Score + '\n  ⚠ Risk: ' + $bestTrade.$Risk" chance="100"/>
          </do_if>
          
          <!-- ✅ OPTIMIZED: Reserve trade route for fleet coordination (inline conflict resolution done during search) -->
          <do_if value="global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
            <do_if value="not global.$GT_ActiveTradeReservations?">
              <set_value name="global.$GT_ActiveTradeReservations" exact="table[]"/>
            </do_if>
            
            <set_value name="global.$GT_ActiveTradeReservations.{$ship}" exact="table[
              $BuyStation = $bestTrade.$BuyOffer.owner,
              $SellStation = $bestTrade.$SellOffer.owner,
              $Ware = $bestTrade.$BuyOffer.ware,
              $Timestamp = player.age
            ]"/>
          </do_if>
          
          <!-- Execute trade -->
          <do_if value="true">
            <!-- Signal execution module (which will signal AI after storing trade LIST) -->
            <signal_cue_instantly cue="md.GT_Trading_Execution.ExecuteTrade" param="table[
              $Ship = $ship,
              $Trade = $bestTrade,
              $TradeList = $tradeList
            ]"/>
            
            <!-- GT_Trade_Found signal now sent FROM ExecuteTrade cue after storing pending trade -->
          </do_if>
        </do_if>
        <do_else>
          <!-- No valid trades found -->
          <!-- DEBUG: No trades found -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === NO TRADES FOUND ANALYSIS ===' + 
              '\nShip: ' + $ship.knownname + 
              '\nSector: ' + $ship.sector.knownname + 
              '\nSearch params: Dist=' + $maxDistance + ', MinROI=' + $minROI + '%, MinAbsoluteProfit=' + ($minAbsoluteProfit / 100) + ' Cr' +
              '\n\n📊 REJECTION STATISTICS:' +
              '\n  ⛔ Docking not allowed: ' + $tradesRejectedDocking +
              '\n  💰 Insufficient profit: ' + $tradesRejectedProfit +
              '\n  📏 Distance too far: ' + $tradesRejectedDistance +
              '\n  📦 Amount zero/negative: ' + $tradesRejectedAmount +
              '\n  ━━━━━━━━━━━━━━━━━━━━━━━━' +
              '\n  TOTAL REJECTED: ' + ($tradesRejectedDocking + $tradesRejectedProfit + $tradesRejectedDistance + $tradesRejectedAmount) +
              (if $bestRejectedTrade? then 
                '\n\n🏆 BEST REJECTED TRADE (still unprofitable):' +
                '\n  Ware: ' + @$bestRejectedTrade.$ware.name +
                '\n  Buy from: ' + @$bestRejectedTrade.$buyFrom.knownname + ' @ ' + $bestRejectedTrade.$buyPrice + ' Cr/unit' +
                '\n  Sell to: ' + @$bestRejectedTrade.$sellTo.knownname + ' @ ' + $bestRejectedTrade.$sellPrice + ' Cr/unit' +
                '\n  Best profit found: ' + $bestRejectedTrade.$profit + ' Cr (needed: ' + $minAbsoluteProfit + ' Cr)' +
                '\n  Best ROI found: ' + $bestRejectedTrade.$roi + '% (needed: ' + $minROI + '%)'
               else '')" 
              chance="100"/>
          </do_if>
          
          <!-- Commented out to reduce log spam -->
          <!-- <debug_text text="'[GalaxyTrader MK3] No profitable trades found for ' + $ship.knownname" chance="100"/> -->
          
          <!-- Player logbook message with rejection statistics -->
          <set_value name="$logEnabled" exact="false"/>
          <do_if value="@$ship.defaultorder.id == 'GalaxyTraderMK3' and @$ship.defaultorder.$logbookentries">
            <set_value name="$logEnabled" exact="true"/>
          </do_if>
          <!-- Subordinates inherit logbook setting from commander -->
          <do_elseif value="@$ship.defaultorder.id == 'Assist' and @$ship.commander.defaultorder.id == 'GalaxyTraderMK3' and @$ship.commander.defaultorder.$logbookentries">
            <set_value name="$logEnabled" exact="true"/>
          </do_elseif>
          
          <do_if value="$logEnabled">
            <set_value name="$totalRejected" exact="$tradesRejectedDocking + $tradesRejectedProfit + $tradesRejectedAmount"/>
            <set_value name="$tradesRejectedBlacklist" exact="0"/> <!-- OPT 1: Blacklist safety net removed, always 0 -->
            <set_value name="$message" exact="{77000,3208}.[$ship.sector.knownname,$maxDistance,($minAbsoluteProfit/100),$totalRejected,$tradesRejectedDocking,$tradesRejectedProfit,$tradesRejectedAmount,$tradesRejectedBlacklist]"/>
            <write_to_logbook 
              category="upkeep" 
              title="'No Trades Available: ' + $ship.knownname" 
              text="$message"
              interaction="showonmap" 
              object="$ship"/>
          </do_if>
          
          <!-- Signal back to AI script: No Trade Found -->
          <!-- CRITICAL: Always send 'blacklist' param to prevent idle timeout escalation -->
          <!-- Reason: With blacklist-aware pre-filtering, we can't distinguish "filtered" from "genuinely empty" -->
          <!-- Better UX: Don't escalate to 60s timeout when ship might just need blacklist adjustment -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'" param2="'blacklist'"/>
        </do_else>
        
        <!-- CRITICAL: Release search lock for this ship -->
        <do_if value="global.$GT_SearchLocks.{$ship}?">
          <remove_value name="global.$GT_SearchLocks.{$ship}"/>
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Search lock released'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- CRITICAL: Clean up AI parameters for this ship -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
        
        <!-- ✅ PERFORMANCE FIX: Mark search complete and process next ship in queue -->
        <do_if value="global.$GT_SearchQueue.$Params? and global.$GT_SearchQueue.$Params.{$ship}?">
          <remove_value name="global.$GT_SearchQueue.$Params.{$ship}"/>
        </do_if>
        
        <!-- Decrement active search counter -->
        <set_value name="global.$GT_SearchQueue.$ActiveSearches" operation="subtract"/>
        
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🔍 SEARCH COMPLETE (active: ' + global.$GT_SearchQueue.$ActiveSearches + '/' + global.$GT_SearchQueue.$MaxConcurrent + ', queued: ' + global.$GT_SearchQueue.$Ships.count + ')'" chance="100"/>
        </do_if>
        
        <!-- Continue processing search queue if there are ships waiting -->
        <do_if value="global.$GT_SearchQueue.$Ships.count gt 0">
          <signal_cue_instantly cue="md.GT_Trading_Queue.ProcessSearchQueue"/>
        </do_if>
      </actions>
    </cue>
    
    <!-- Search Cached Trades (Sub-module) -->
    <cue name="SearchCachedTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$allowIllegal" exact="@$params.$AllowIllegal"/> <!-- Default to false if not provided -->
        
        <!-- Get ware basket for filtering (from global AI parameters) -->
        <set_value name="$wareBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
        
        <!-- ✅ NEW: Collect top 20 trades instead of just best one -->
        <set_value name="$tradeList" exact="[]"/>
        <set_value name="$maxTradesToReturn" exact="20"/>
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== DETERMINE HOME SECTOR (same logic as live search) ===== -->
        <set_value name="$homeBase" exact="null"/>
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="not $homeBase? or not $homeBase.exists">
            <set_value name="$homeBase" exact="$ship.sector"/>
          </do_if>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <!-- DEBUG: Log home sector determination -->
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
          <debug_text text="'[GT-Cache-DEBUG] (' + $ship.idcode + ') Home sector resolution:' + 
            '\n  HomeBase: ' + @$homeBase.knownname + 
            '\n  HomeSector: ' + @$homeSector.knownname + 
            '\n  Ship current sector: ' + @$ship.sector.knownname" 
            chance="100"/>
        </do_if>
        
        <!-- Cache age check removed - not needed, individual entries have $Timestamp -->
        <set_value name="$cacheAge" exact="0s"/>
        
        <!-- Get failed trades for this ship -->
        <set_value name="$failedTrades" exact="[]"/>
        <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
          <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
        </do_if>
        
        <!-- ✅ CACHE REPLENISHMENT: Force live search if cache too small -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count lt 10">
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 1">
            <debug_text text="'[GT-Cache] ⚠ Cache too small (' + global.$GT_TradeCache.count + ' entries) - forcing live search to replenish'" chance="100"/>
          </do_if>
          
          <!-- Return empty result via global variable to trigger live search -->
          <set_value name="global.$GT_SearchResult" exact="table[
            $Found = false,
            $BestTrade = null,
            $BestScore = 0,
            $BlacklistRejections = 0,
            $TradeList = []
          ]"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- ✅ LIST-BASED CACHE: Iterate through flat list of trade entries -->
        <!-- NOTE: No per-ware limiting needed for cache (small size, pre-validated entries) -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count gt 0">
          <set_value name="$cacheMaxAge" exact="600s"/>  <!-- 10 minutes -->
          <set_value name="$checkedEntries" exact="0"/>
          <set_value name="$validEntries" exact="0"/>
          <set_value name="$expiredEntries" exact="0"/>
          
          <!-- DEBUG: Log cache status -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
            <debug_text text="'[GT-Cache-DEBUG] Cache has ' + global.$GT_TradeCache.count + ' trade entries'" chance="100"/>
          </do_if>
          
          <!-- Iterate through flat list of cached trades BACKWARDS to safely remove invalid entries -->
          <!-- When we remove entry N, entries 1 to N-1 remain at same indices (already processed) -->
          <set_value name="$cacheCount" exact="global.$GT_TradeCache.count"/>
          <do_all exact="$cacheCount" counter="$idx" reverse="true">
            <set_value name="$i" exact="$idx"/>
            <set_value name="$cacheEntry" exact="global.$GT_TradeCache.{$i}"/>
            <set_value name="$checkedEntries" exact="$checkedEntries + 1"/>
            
            <!-- Validate cache entry structure -->
            <do_if value="not $cacheEntry? or not $cacheEntry.$BuyOffer? or not $cacheEntry.$SellOffer? or not $cacheEntry.$Timestamp?">
              <continue/>
            </do_if>
            
            <!-- Check if entry is too old (TTL filter) -->
            <set_value name="$entryAge" exact="player.age - $cacheEntry.$Timestamp"/>
            <do_if value="$entryAge gt $cacheMaxAge">
              <set_value name="$expiredEntries" exact="$expiredEntries + 1"/>
              <continue/>
            </do_if>
            
            <!-- Validate offers still exist and are available -->
            <do_if value="not $cacheEntry.$BuyOffer.exists or not $cacheEntry.$SellOffer.exists">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers are still available (not out of stock) -->
            <do_if value="not $cacheEntry.$BuyOffer.available or not $cacheEntry.$SellOffer.available">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers have sufficient amount -->
            <do_if value="$cacheEntry.$BuyOffer.amount lt $cacheEntry.$Amount or $cacheEntry.$SellOffer.amount lt $cacheEntry.$Amount">
              <continue/>
            </do_if>
            
            <!-- Validate stations still operational -->
            <do_if value="not @$cacheEntry.$BuyOffer.owner.isoperational or not @$cacheEntry.$SellOffer.owner.isoperational">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Filter out sector pairs that previously failed for THIS ship -->
            <!-- One failure in a sector pair blocks ALL station combinations in that route -->
            <do_if value="$failedTrades.count gt 0">
              <set_value name="$skipThisCacheEntry" exact="false"/>
              <do_all exact="$failedTrades.count" counter="$failIdx">
                <set_value name="$failedTrade" exact="$failedTrades.{$failIdx}"/>
                
                <!-- Check if SECTOR PAIR matches (buy sector → sell sector) -->
                <!-- CRITICAL: Validate failed trade has complete sector data before comparing -->
                <do_if value="$failedTrade.$BuySector? and $failedTrade.$SellSector?">
                  <do_if value="@$cacheEntry.$BuyOffer.owner.sector == @$failedTrade.$BuySector and 
                                @$cacheEntry.$SellOffer.owner.sector == @$failedTrade.$SellSector">
                    <set_value name="$skipThisCacheEntry" exact="true"/>
                    <debug_text text="'[GT-Cache] ⛔ FILTERED sector pair: ' + 
                      @$failedTrade.$BuySector.knownname + ' → ' + @$failedTrade.$SellSector.knownname +
                      ' (reason: ' + $failedTrade.$Reason + ')'"
                      chance="100"/>
                    <break/>
                  </do_if>
                </do_if>
              </do_all>
              
              <do_if value="$skipThisCacheEntry">
                <continue/> <!-- Skip to next cache entry -->
              </do_if>
            </do_if>
            
            <!-- 
              TWO-STAGE DISTANCE VALIDATION:
              1. Range check: Is trade within ship's operational range from home base? (NO blacklist)
              2. Reachability check: Can ship reach it from current position? (basic connectivity)
            -->
            
            <!-- STAGE 1: Range check from home base (no blacklist) -->
            <set_value name="$rangeCheckBuy" exact="$homeSector.gatedistance.{$cacheEntry.$BuyOffer.owner.sector}"/>
            
            <do_if value="$cacheEntry.$BuyOffer.owner.sector == $cacheEntry.$SellOffer.owner.sector">
              <set_value name="$rangeCheckSell" exact="0"/>
            </do_if>
            <do_else>
              <set_value name="$rangeCheckSell" exact="$cacheEntry.$BuyOffer.owner.sector.gatedistance.{$cacheEntry.$SellOffer.owner.sector}"/>
            </do_else>
            
            <set_value name="$totalRangeDistance" exact="$rangeCheckBuy + $rangeCheckSell"/>
            
            <!-- Skip if outside operational range -->
            <do_if value="$rangeCheckBuy lt 0 or $rangeCheckSell lt 0 or $totalRangeDistance gt $maxDistance">
              <continue/>
            </do_if>
            
            <!-- STAGE 2: Basic reachability check from current position -->
            <!-- Use BLACKLIST-AWARE gatedistance so blocked paths return -1 -->
            <set_value name="$buySector" exact="$cacheEntry.$BuyOffer.owner.sector"/>
            <set_value name="$buyDistance" exact="$ship.gatedistance.{$buySector}.{blacklistgroup.civilian}.{$ship}"/>
            
            <!-- Sell distance: BuyOffer station to SellOffer station -->
            <do_if value="$cacheEntry.$BuyOffer.owner.sector == $cacheEntry.$SellOffer.owner.sector">
              <set_value name="$sellDistance" exact="0"/>
            </do_if>
            <do_else>
              <set_value name="$sellSector" exact="$cacheEntry.$SellOffer.owner.sector"/>
              <set_value name="$sellDistance" exact="$buySector.gatedistance.{$sellSector}.{blacklistgroup.civilian}.{$ship}"/>
            </do_else>
            
            <!-- If trade route is unreachable (disconnected sectors), skip this trade -->
            <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
              <debug_text text="'[GT-Cache] ⚠ PATH BLOCKED: Trade route unreachable (disconnected sectors)' +
                '\n  Ship: ' + $ship.idcode +
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name +
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + ' (distance: ' + $buyDistance + ')' +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + ' (distance: ' + $sellDistance + ')'"
                chance="100"/>
              <continue/>
            </do_if>
            
            <!-- DEBUG: Log distance calculations for first few entries -->
            <do_if value="$i le 3 and @global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <debug_text text="'[GT-Cache-DEBUG] Entry ' + $i + ' Two-stage distance check:' + 
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$BuyOffer.owner.sector.knownname + ')' +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$SellOffer.owner.sector.knownname + ')' +
                '\n  STAGE 1 - Range check (from home ' + @$homeSector.knownname + '):' +
                '\n    Buy: ' + $rangeCheckBuy + ' jumps, Sell: ' + $rangeCheckSell + ' jumps, Total: ' + $totalRangeDistance + ' jumps' +
                '\n  STAGE 2 - Reachability check (from current ' + @$ship.sector.knownname + '):' +
                '\n    Buy: ' + $buyDistance + ' jumps, Sell: ' + $sellDistance + ' jumps' +
                '\n  Note: Vanilla will handle blacklist routing when trade is executed'" 
                chance="100"/>
            </do_if>
            
            <!-- Safe defaults for null values (should be rare - only if sectors are completely disconnected) -->
            <do_if value="not $buyDistance? or typeof $buyDistance != datatype.integer">
              <set_value name="$buyDistance" exact="-1"/>
            </do_if>
            <do_if value="not $sellDistance? or typeof $sellDistance != datatype.integer">
              <set_value name="$sellDistance" exact="-1"/>
            </do_if>
            
            <!-- Filter unreachable trades (negative = no path exists or blocked by blacklist) -->
            <!-- Note: gatedistance with blacklist params now respects threat intelligence -->
            <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
              <!-- REACHABILITY CHECK FAILED: No path exists (disconnected or blacklisted) -->
              <debug_text text="'[GT-Cache] ⛔ UNREACHABLE: Cached trade blocked (path disconnected or blacklisted)' + 
                '\n  Ship: ' + $ship.idcode + ' (currently in: ' + $ship.sector.knownname + ')' +
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$BuyOffer.owner.sector.knownname + ')' +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$SellOffer.owner.sector.knownname + ')' +
                '\n  Range check (from home): PASSED (within ' + $maxDistance + ' jumps)' +
                '\n  Reachability check (from current sector): FAILED' +
                '\n    - Buy distance: ' + $buyDistance + ' jumps (from ' + $ship.sector.knownname + ')' +
                '\n    - Sell distance: ' + $sellDistance + ' jumps' +
                '\n  → Trade filtered: No safe route from current position through non-blacklisted sectors' +
                '\n  → Skipping for this ship, but KEEPING in cache for other ships in different locations'" 
                chance="100"/>
              
              <!-- ✅ POSITION-AWARE: Skip unreachable entry for THIS ship, but keep in global cache for other ships -->
              <!-- Path blocking is position-specific - other ships in different locations may be able to reach this trade -->
              <continue/>
            </do_if>
            
            <!-- Note: Station/sector blacklist checks removed - vanilla will handle when trade executes -->
            
            <!-- Calculate total distance -->
            <set_value name="$currentDistance" exact="$buyDistance + $sellDistance"/>
            
            <!-- Basic staleness check: if distance changed significantly, routes may have changed -->
            <!-- This can happen due to gate construction/destruction, not just blacklist changes -->
            <do_if value="$cacheEntry.$Distance? and $buyDistance ge 0 and $sellDistance ge 0">
              <set_value name="$distanceChange" exact="$currentDistance - $cacheEntry.$Distance"/>
              
              <!-- If distance increased by more than 50%, routes changed - remove stale entry -->
              <do_if value="$currentDistance gt ($cacheEntry.$Distance * 1.5)">
                <debug_text text="'[GT-Cache] ⚠️ STALE CACHE ENTRY: Routes changed after cache creation' + 
                  '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                  '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + 
                  '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + 
                  '\n  Cached distance: ' + $cacheEntry.$Distance + ' jumps' +
                  '\n  Current distance: ' + $currentDistance + ' jumps' +
                  '\n  Change: +' + $distanceChange + ' jumps (+' + (($distanceChange * 100) / $cacheEntry.$Distance) + '%)' +
                  '\n  → REMOVING STALE ENTRY: Route significantly changed due to blacklist update'" 
                  chance="100"/>
                
                <!-- Remove stale cache entry -->
                <remove_value name="global.$GT_TradeCache.{$i}"/>
                <set_value name="$expiredEntries" operation="add"/>
                <continue/>
              </do_if>
              
              <!-- LOG: Detect alternative routing (distance increased but not enough to invalidate) -->
              <do_if value="$currentDistance gt $cacheEntry.$Distance">
                <debug_text text="'[GT-Cache] ⚠️ ALTERNATIVE ROUTE: Blacklist forcing detour' + 
                  '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                  '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + 
                  '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + 
                  '\n  Original distance: ' + $cacheEntry.$Distance + ' jumps' +
                  '\n  Blacklist-aware distance: ' + $currentDistance + ' jumps' +
                  '\n  Detour: +' + $distanceChange + ' jumps (avoiding blacklisted sectors)'" 
                  chance="100"/>
              </do_if>
            </do_if>
            
            <!-- ✅ ILLEGAL WARE FILTER: Skip illegal wares if ship doesn't allow illegal trades -->
            <do_if value="not $allowIllegal and $cacheEntry.$BuyOffer.ware.illegal">
              <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Cache] ⛔ Skipping cached trade for ' + $cacheEntry.$BuyOffer.ware.name + ' (illegal ware, AllowIllegal=' + $allowIllegal + ') - continuing to next entry'" chance="100"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- ✅ WARE BASKET FILTER: Only consider manually selected wares -->
            <do_if value="$wareBasket? and $wareBasket.count gt 0">
              <!-- Use explicit loop for reliable list membership check -->
              <set_value name="$wareInBasket" exact="false"/>
              <do_all exact="$wareBasket.count" counter="$i">
                <do_if value="$wareBasket.{$i} == $cacheEntry.$BuyOffer.ware">
                  <set_value name="$wareInBasket" exact="true"/>
                  <break/>
                </do_if>
              </do_all>
              <do_if value="not $wareInBasket">
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⛔ Skipping cached trade for ' + $cacheEntry.$BuyOffer.ware.name + ' (not in ware basket) - continuing to next entry'" chance="100"/>
                </do_if>
                <continue/>
              </do_if>
            </do_if>
            
            <!-- CRITICAL: Validate prices haven't changed unfavorably (allow 10% variance) -->
            <!-- ❌ REMOVED: Stale price check was filtering out valid entries before querying fresh offers!
                 The old logic read prices from cached tradeoffer objects which are stale.
                 We should only validate against fresh prices AFTER querying fresh offers. -->
            
            <!-- Check distance constraint (use current blacklist-aware distance) -->
            <do_if value="$currentDistance gt $maxDistance">
              <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Cache] ⛔ Trade exceeds max distance (' + $currentDistance + ' > ' + $maxDistance + ')'" chance="100"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- Check profit constraint -->
            <do_if value="$cacheEntry.$Profit? and $cacheEntry.$Profit lt $minAbsoluteProfit">
              <continue/>
            </do_if>
            
            <!-- Calculate current score with distance penalty (use blacklist-aware distance) -->
            <set_value name="$adjustedDistance" exact="$currentDistance * $distancePenaltyMultiplier"/>
            <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($cacheEntry.$Profit / $adjustedDistance) else $cacheEntry.$Profit"/>
            
            <!-- Apply faction priority boost -->
            <do_if value="$factionPriority == 0">
              <!-- Player Only: Boost player-owned stations by 20% -->
              <do_if value="$cacheEntry.$BuyOffer.owner.owner == faction.player or $cacheEntry.$SellOffer.owner.owner == faction.player">
                <!-- Boost player-owned stations by 20% -->
                <!-- Avoid money type conversion by using addition instead of multiplication -->
                <set_value name="$boost" exact="$efficiency / 5"/>
                <set_value name="$efficiency" exact="$efficiency + $boost"/>
              </do_if>
            </do_if>
            <do_elseif value="$factionPriority == 1">
              <!-- Foreign First: Boost non-player stations by 20% -->
              <do_if value="$cacheEntry.$BuyOffer.owner.owner != faction.player and $cacheEntry.$SellOffer.owner.owner != faction.player">
                <!-- Boost non-player stations by 20% -->
                <!-- Avoid money type conversion by using addition instead of multiplication -->
                <set_value name="$boost" exact="$efficiency / 5"/>
                <set_value name="$efficiency" exact="$efficiency + $boost"/>
              </do_if>
            </do_elseif>
            <!-- Equal Priority (2): No boost applied -->
            
            <!-- ✅ DEBUG: Log each entry being considered -->
            <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <set_value name="$willQuery" exact="if $efficiency gt $bestScore then 'YES' else 'NO'"/>
              <debug_text text="'[GT-Cache-DEBUG] Entry ' + $i + ': Ware=' + @$cacheEntry.$WareName + ', CachedEff=' + $efficiency + ', BestScore=' + $bestScore + ', WillQuery=' + $willQuery" chance="100"/>
            </do_if>
            
            <!-- ✅ CACHE AS HINT: Re-query FRESH trade offers from the cached stations -->
            <do_if value="$efficiency gt $bestScore">
              <!-- ✅ CRITICAL FIX: Get ware and station objects from cached IDs, not stale tradeoffer references! -->
              <!-- Ware objects don't go stale, so we can use the cached ware object directly -->
              <set_value name="$ware" exact="$cacheEntry.$BuyOffer.ware"/>
              
              <!-- Stations: Try using cached station references first (faster) -->
              <set_value name="$buyStation" exact="$cacheEntry.$BuyOffer.owner"/>
              <set_value name="$sellStation" exact="$cacheEntry.$SellOffer.owner"/>
              
              <!-- Validate stations still exist and are operational -->
              <do_if value="$buyStation.exists and $buyStation.isoperational and $sellStation.exists and $sellStation.isoperational and $ware">
                <!-- Query FRESH sell offer from buy station (ship buys from their sell offer) -->
                <find_sell_offer seller="$buyStation" wares="$ware" result="$freshBuyOffer">
                  <match_seller tradesknownto="$ship.owner"/>
                </find_sell_offer>
                
                <!-- Query FRESH buy offer from sell station (ship sells to their buy offer) -->
                <find_buy_offer buyer="$sellStation" wares="$ware" result="$freshSellOffer">
                  <match_buyer tradesknownto="$ship.owner"/>
                </find_buy_offer>
              </do_if>
              <do_else>
                <!-- Stations or ware no longer exist/operational - skip this entry -->
                <set_value name="$freshBuyOffer" exact="null"/>
                <set_value name="$freshSellOffer" exact="null"/>
                
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <set_value name="$buyExists" exact="if $buyStation.exists then '1' else '0'"/>
                  <set_value name="$sellExists" exact="if $sellStation.exists then '1' else '0'"/>
                  <debug_text text="'[GT-Cache] ⚠ Cached stations no longer valid: Buy=' + $buyExists + ', Sell=' + $sellExists" chance="100"/>
                </do_if>
              </do_else>
              
              <!-- Validate fresh offers exist and are available -->
              <do_if value="$freshBuyOffer and $freshBuyOffer.available and $freshSellOffer and $freshSellOffer.available">
                <!-- Calculate fresh prices and profit -->
                <set_value name="$freshBuyPrice" exact="$freshBuyOffer.unitprice"/>
                <set_value name="$freshSellPrice" exact="$freshSellOffer.unitprice"/>
                
                <!-- Calculate max cargo capacity for this ware (same fix as live search) -->
                <set_value name="$maxCargoCapacity" exact="($ship.cargo.free.all / $freshBuyOffer.ware.volume)i"/>
                <set_value name="$freshMaxAmount" exact="[$freshBuyOffer.amount, $freshSellOffer.amount, $maxCargoCapacity].min"/>
                
                <!-- Skip if no tradeable amount -->
                <do_if value="$freshMaxAmount gt 0">
                  <set_value name="$freshProfit" exact="($freshSellPrice - $freshBuyPrice) * $freshMaxAmount"/>
                  
                  <!-- ✅ CORRECT LOGIC: Calculate fresh ROI and check relative percentage drop -->
                  <do_if value="$freshProfit gt 0">
                    <!-- Calculate fresh ROI as percentage -->
                    <set_value name="$freshROI" exact="(($freshSellPrice - $freshBuyPrice) * 100) / $freshBuyPrice"/>
                    
                    <!-- Get cache threshold from global settings (default 20%) -->
                    <set_value name="$cacheThreshold" exact="20"/>
                    <do_if value="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold?">
                      <set_value name="$cacheThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
                    </do_if>
                    
                    <!-- Get cached original ROI -->
                    <set_value name="$cachedROI" exact="@$cacheEntry.$ROI"/>
                    <do_if value="not $cachedROI? or $cachedROI le 0">
                      <set_value name="$cachedROI" exact="$cacheThreshold"/>  <!-- Fallback for old cache entries -->
                    </do_if>
                    
                    <!-- Get dropoff tolerance from global settings (default 15%) -->
                    <set_value name="$dropoffTolerance" exact="@global.$GT_GlobalSettings.$Fleet.$CacheDropoffTolerance"/>
                    <do_if value="not $dropoffTolerance?">
                      <set_value name="$dropoffTolerance" exact="15"/>  <!-- Default 15% -->
                    </do_if>
                    
                    <!-- Calculate relative percentage drop: ((original - current) / original) * 100 -->
                    <set_value name="$roiDrop" exact="0"/>
                    <do_if value="$cachedROI gt 0">
                      <set_value name="$roiDrop" exact="(($cachedROI - $freshROI) * 100) / $cachedROI"/>
                    </do_if>
                    
                    <!-- Check if fresh ROI meets minimum threshold AND relative drop is within tolerance -->
                    <do_if value="$freshROI ge $cacheThreshold and $freshProfit ge $minAbsoluteProfit and $roiDrop le $dropoffTolerance">
                      <!-- ✅ CACHE HIT: Fresh trade meets threshold and within dropoff tolerance! -->
                      <set_value name="$trade" exact="table[
                        $BuyOffer = $freshBuyOffer,
                        $SellOffer = $freshSellOffer,
                        $BuyStation = $freshBuyOffer.owner,
                        $SellStation = $freshSellOffer.owner,
                        $Amount = $freshMaxAmount,
                        $Profit = $freshProfit,
                        $ROI = $freshROI,
                        $BuyPrice = $freshBuyPrice,
                        $SellPrice = $freshSellPrice,
                        $Distance = $cacheEntry.$Distance,
                        $Score = $efficiency,
                        $Risk = 0
                      ]"/>
                      
                      <!-- ✅ NEW: Add to trade list (up to max) -->
                      <do_if value="$tradeList.count lt $maxTradesToReturn">
                        <append_to_list name="$tradeList" exact="$trade"/>
                      </do_if>
                      
                      <!-- Also track best trade for backward compatibility -->
                      <do_if value="$efficiency gt $bestScore">
                        <set_value name="$bestScore" exact="$efficiency"/>
                        <set_value name="$bestTrade" exact="$trade"/>
                      </do_if>
                      
                      <set_value name="$foundCachedTrade" exact="true"/>
                      <set_value name="$validEntries" exact="$validEntries + 1"/>
                      
                      <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                        <debug_text text="'[GT-Cache] ✅ FRESH offers validated for cached trade: ' + $ware.name + ' (CachedROI=' + $cachedROI + '%, FreshROI=' + $freshROI + '%, Drop=' + $roiDrop + '%, Tolerance=' + $dropoffTolerance + '%, Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                      </do_if>
                    </do_if>
                    <do_else>
                      <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                        <debug_text text="'[GT-Cache] ⚠ Fresh trade rejected: ' + $ware.name + ' (CachedROI=' + $cachedROI + '%, FreshROI=' + $freshROI + '%, Drop=' + $roiDrop + '%, Tolerance=' + $dropoffTolerance + '%, Threshold=' + $cacheThreshold + '%, Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                      </do_if>
                    </do_else>
                  </do_if>
                  <do_else>
                    <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                      <debug_text text="'[GT-Cache] ⚠ Fresh trade not profitable: ' + $ware.name + ' (Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                    </do_if>
                  </do_else>
                </do_if>
              </do_if>
              <do_else>
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⚠ Fresh offers not available for cached trade: ' + $ware.name" chance="100"/>
                </do_if>
              </do_else>
            </do_if>
          </do_all>
          
          <!-- DEBUG: Log cache retrieval results -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled">
            <do_if value="@global.$GT_Config.$Debug.$LogLevel ge 2">
              <do_if value="$foundCachedTrade">
                <debug_text text="'[GT-Cache] ✅ Cache HIT for ' + $ship.idcode + ': Found cached trade (Score: ' + $bestScore + ', checked: ' + $checkedEntries + ', valid: ' + $validEntries + ', expired: ' + $expiredEntries + ')'" chance="100"/>
              </do_if>
              <do_else>
                <debug_text text="'[GT-Cache] ❌ Cache MISS for ' + $ship.idcode + ': No valid cached trades (checked: ' + $checkedEntries + ', expired: ' + $expiredEntries + ')'" chance="100"/>
              </do_else>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- Return results via global variable -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $Found = $foundCachedTrade,
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $TradeList = $tradeList
        ]"/>
      </actions>
    </cue>
    
    <!-- Search Live Trades (Sub-module) -->
    <cue name="SearchLiveTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <!-- Extract all parameters -->
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        <set_value name="$factionPriorityText" exact="$params.$FactionPriorityText"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$gt_ThreatIntel" exact="$params.$ThreatIntel"/>
        <set_value name="$gt_FleetCoord" exact="$params.$FleetCoord"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$params.$AdvancedAnalytics"/>
        
        <!-- NOTE: Do NOT clear failed trades here - we need to check them AFTER finding best trade -->
        <!-- Failed trades are only cleared on success (in gt_trading_signals.xml) -->
        
        <!-- VERSION LOG - COMMENTED OUT (reduces log spam) -->
        <!-- <debug_text text="'[GT-Search] 🚀 CODE VERSION: 2025-10-25-v5 (Score Bug Fixed) | Ship: ' + $ship.idcode" chance="100"/> -->
        
        <!-- Get failed trades for this ship (needed for filtering during best trade selection) -->
        <set_value name="$failedTrades" exact="[]"/>
        <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
          <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
        </do_if>
        
        <!-- ✅ NEW: Collect top 20 trades instead of just best one -->
        <set_value name="$tradeList" exact="[]"/>
        <set_value name="$maxTradesToReturn" exact="20"/>
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$stationsEvaluated" exact="0"/>
        <set_value name="$offersFound" exact="0"/>
        
        <!-- ===== DETERMINE HOME SECTOR ===== -->
        <set_value name="$homeBase" exact="null"/>
        <set_value name="$homeBaseSource" exact="'unknown'"/>
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
          <set_value name="$homeBaseSource" exact="'order parameters'"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists">
            <set_value name="$homeBaseSource" exact="'defaultorder'"/>
          </do_if>
          <do_else>
            <set_value name="$homeBase" exact="$ship.sector"/>
            <set_value name="$homeBaseSource" exact="'ship.sector (fallback)'"/>
          </do_else>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🏠 Home base: ' + @$homeBase.knownname + ' (sector: ' + $homeSector.knownname + ') [source: ' + $homeBaseSource + ']'" chance="100"/>
        </do_if>
        
        <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
        <!-- ✅ NATIVE ACTION REFACTORING: Use C++ trade offer search instead of MD loops  -->
        <!-- Replaces 2000+ station iterations with single galaxy-wide native C++ queries  -->
        <!-- Performance: 10-100× faster, ZERO stutter (C++ code executes in one frame)   -->
        <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
        
        <!-- Get AI parameters for filtering -->
        <set_value name="$wareBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
        <set_value name="$allowIllegal" exact="@global.$GT_AIParameters.{$ship}.$AllowIllegal"/>
        
        <!-- Determine ship's blacklistgroup -->
        <set_value name="$blacklistgroup" exact="blacklistgroup.civilian"/>
        <do_if value="(@$ship.primarypurpose == purpose.fight) or (@$ship.primarypurpose == purpose.auxiliary)">
          <set_value name="$blacklistgroup" exact="blacklistgroup.military"/>
        </do_if>
        
        <!-- ✅ NATIVE C++ ACTION: Find all sell offers (ship buys FROM these stations) -->
        <!-- This single call replaces ~2000 station iterations! -->
        <do_if value="$wareBasket? and $wareBasket.count gt 0">
          <!-- Manual ware selection: query specific wares -->
          <find_sell_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allSellOffers" 
            wares="$wareBasket" 
            multiple="true">
            <match_seller tradesknownto="$ship.owner">
              <!-- Vanilla pattern: Only objectactivity blacklist in native query (fast C++ filter) -->
              <!-- Sector blacklists and distance filtering done manually after (lines 984-1161) -->
              <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="$ship"/>
            </match_seller>
            <relativeprice max="0.5"/>  <!-- Only reasonably priced offers -->
          </find_sell_offer>
        </do_if>
        <do_else>
          <!-- Auto wares: query all compatible wares -->
          <find_sell_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allSellOffers" 
            multiple="true">
            <match_seller tradesknownto="$ship.owner">
              <!-- Vanilla pattern: Only objectactivity blacklist in native query (fast C++ filter) -->
              <!-- Sector blacklists and distance filtering done manually after (lines 984-1161) -->
              <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="$ship"/>
            </match_seller>
            <relativeprice max="0.5"/>
          </find_sell_offer>
        </do_else>
        
        <!-- ✅ NATIVE C++ ACTION: Find all buy offers (ship sells TO these stations) -->
        <do_if value="$wareBasket? and $wareBasket.count gt 0">
          <find_buy_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allBuyOffers" 
            wares="$wareBasket" 
            multiple="true">
            <match_buyer tradesknownto="$ship.owner">
              <!-- Vanilla pattern: Only objectactivity blacklist in native query (fast C++ filter) -->
              <!-- Sector blacklists and distance filtering done manually after (lines 984-1161) -->
              <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="$ship"/>
            </match_buyer>
          </find_buy_offer>
        </do_if>
        <do_else>
          <find_buy_offer 
            tradepartner="$ship" 
            space="player.galaxy" 
            result="$allBuyOffers" 
            multiple="true">
            <match_buyer tradesknownto="$ship.owner">
              <!-- Vanilla pattern: Only objectactivity blacklist in native query (fast C++ filter) -->
              <!-- Sector blacklists and distance filtering done manually after (lines 984-1161) -->
              <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="$ship"/>
            </match_buyer>
          </find_buy_offer>
        </do_else>
        
        <!-- Initialize counters -->
        <set_value name="$totalFilteredIllegal" exact="0"/>
        <set_value name="$stationsSkipped" exact="0"/>
        <set_value name="$tradesRejectedDocking" exact="0"/>
        <!-- ✅ OPTIMIZATION 1: $tradesRejectedBlacklist removed (safety net eliminated) -->
        <set_value name="$tradesRejectedProfit" exact="0"/>
        <set_value name="$tradesRejectedDistance" exact="0"/>
        <set_value name="$tradesRejectedAmount" exact="0"/>
        <set_value name="$offersFound" exact="$allSellOffers.count + $allBuyOffers.count"/>
        <set_value name="$stationsEvaluated" exact="0"/>  <!-- Not applicable with native actions -->
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ NATIVE ACTIONS: Collected ' + $allSellOffers.count + ' sell + ' + $allBuyOffers.count + ' buy offers (instant C++ query)'" chance="100"/>
        </do_if>
        
        <!-- ✅ NOTE: Native actions already filtered by:
             - blacklists (match_use_blacklist with objectactivity) - station blacklist only
             - known stations (tradesknownto)
             - price (relativeprice max=0.5)
             Still need manual filtering for:
             - distance (blacklist-aware, respects sectortravel blacklists)
             - sector blacklists (sectoractivity, sectortravel)
             - illegal wares (if not allowed)
        -->
        
        <!-- ===== OBSOLETE CODE REMOVED (lines 952-1127) ===== -->
        <!-- Old station iteration loop, blacklist filtering, offer collection -->
        <!-- All replaced by native C++ actions above (lines 882-939) -->
        
        <!-- ===== OBSOLETE: PRE-FILTER DISTANCE (OLD METHOD) ===== -->
        <!-- ❌ OLD: Used match_gate_distance in native query (basic pathfinding, ignores blacklists) -->
        <!-- ✅ NEW: Blacklist-aware distance filtering done manually after native query -->
        <!-- See PRE-FILTER DISTANCE (BLACKLIST-AWARE) section below -->
        
        <!-- ===== OBSOLETE: PRE-FILTER BLACKLIST (OLD METHOD) ===== -->
        <!-- ✅ Native action filters objectactivity blacklist (station blacklist) -->
        <!-- ✅ Manual filtering handles sector blacklists (sectoractivity, sectortravel) -->
        
        <!-- ===== PRE-FILTER BLACKLIST (STEP 2: ON REACHABLE OFFERS) ===== -->
        <!-- ✅ CRITICAL FIX: Remove blacklisted offers AFTER distance filter -->
        <!-- This ensures we only check blacklist for ~1,500 reachable offers instead of all 4,593 -->
        <!-- ✅ NOTE: Blacklist checks use .{$ship} which makes them ship-aware (checks from ship's current position) -->
        <do_if value="$allSellOffers.count gt 0 or $allBuyOffers.count gt 0">
          <!-- Determine ship's blacklistgroup -->
          <set_value name="$blacklistgroup" exact="blacklistgroup.civilian"/>
          <do_if value="(@$ship.primarypurpose == purpose.fight) or (@$ship.primarypurpose == purpose.auxiliary)">
            <set_value name="$blacklistgroup" exact="blacklistgroup.military"/>
          </do_if>
          
          <set_value name="$sellOffersBlacklisted" exact="0"/>
          <set_value name="$buyOffersBlacklisted" exact="0"/>
          
          <!-- Filter sell offers (ship buys from these) -->
          <do_if value="$allSellOffers.count gt 0">
            <set_value name="$safeSellOffers" exact="[]"/>
            <do_all exact="$allSellOffers.count" counter="$i">
              <set_value name="$offer" exact="$allSellOffers.{$i}"/>
              
              <!-- Check if SECTOR is blacklisted (station objectactivity already filtered by native action) -->
              <set_value name="$isBlacklisted" exact="false"/>
              <do_if value="$blacklistgroup?">
                <!-- ✅ objectactivity already filtered by native action's match_use_blacklist -->
                <!-- We only need to check sector blacklists here -->
                <set_value name="$sectorActivityBlacklisted" exact="@$offer.owner.sector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
                <set_value name="$sectorTravelBlacklisted" exact="@$offer.owner.sector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
                <set_value name="$isBlacklisted" exact="$sectorActivityBlacklisted or $sectorTravelBlacklisted"/>
              </do_if>
              
              <do_if value="not $isBlacklisted">
                <append_to_list name="$safeSellOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$sellOffersBlacklisted" exact="$sellOffersBlacklisted + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allSellOffers" exact="$safeSellOffers"/>
          </do_if>
          
          <!-- Filter buy offers (ship sells to these) -->
          <do_if value="$allBuyOffers.count gt 0">
            <set_value name="$safeBuyOffers" exact="[]"/>
            <do_all exact="$allBuyOffers.count" counter="$i">
              <set_value name="$offer" exact="$allBuyOffers.{$i}"/>
              
              <!-- Check if SECTOR is blacklisted (station objectactivity already filtered by native action) -->
              <set_value name="$isBlacklisted" exact="false"/>
              <do_if value="$blacklistgroup?">
                <!-- ✅ objectactivity already filtered by native action's match_use_blacklist -->
                <!-- We only need to check sector blacklists here -->
                <set_value name="$sectorActivityBlacklisted" exact="@$offer.owner.sector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$ship}"/>
                <set_value name="$sectorTravelBlacklisted" exact="@$offer.owner.sector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$ship}"/>
                <set_value name="$isBlacklisted" exact="$sectorActivityBlacklisted or $sectorTravelBlacklisted"/>
              </do_if>
              
              <do_if value="not $isBlacklisted">
                <append_to_list name="$safeBuyOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$buyOffersBlacklisted" exact="$buyOffersBlacklisted + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allBuyOffers" exact="$safeBuyOffers"/>
          </do_if>
          
          <!-- Debug logging -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <do_if value="$sellOffersBlacklisted gt 0 or $buyOffersBlacklisted gt 0">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🛡️ PRE-FILTERED blacklist: ' + $sellOffersBlacklisted + ' sell, ' + $buyOffersBlacklisted + ' buy (from reachable offers)'" chance="100"/>
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ✅ Safe + reachable offers remaining: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- ===== PRE-FILTER ILLEGAL WARES (IF NOT ALLOWED) ===== -->
        <!-- Filter out illegal wares if ship doesn't allow illegal trades -->
        <do_if value="not $allowIllegal and ($allSellOffers.count gt 0 or $allBuyOffers.count gt 0)">
          <set_value name="$sellOffersIllegal" exact="0"/>
          <set_value name="$buyOffersIllegal" exact="0"/>
          
          <!-- Filter sell offers (remove illegal wares) -->
          <do_if value="$allSellOffers.count gt 0">
            <set_value name="$legalSellOffers" exact="[]"/>
            <do_all exact="$allSellOffers.count" counter="$i">
              <set_value name="$offer" exact="$allSellOffers.{$i}"/>
              
              <do_if value="not @$offer.ware.illegal">
                <append_to_list name="$legalSellOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$sellOffersIllegal" exact="$sellOffersIllegal + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allSellOffers" exact="$legalSellOffers"/>
          </do_if>
          
          <!-- Filter buy offers (remove illegal wares) -->
          <do_if value="$allBuyOffers.count gt 0">
            <set_value name="$legalBuyOffers" exact="[]"/>
            <do_all exact="$allBuyOffers.count" counter="$i">
              <set_value name="$offer" exact="$allBuyOffers.{$i}"/>
              
              <do_if value="not @$offer.ware.illegal">
                <append_to_list name="$legalBuyOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$buyOffersIllegal" exact="$buyOffersIllegal + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allBuyOffers" exact="$legalBuyOffers"/>
          </do_if>
          
          <!-- Debug logging -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <do_if value="$sellOffersIllegal gt 0 or $buyOffersIllegal gt 0">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⛔ PRE-FILTERED illegal wares: ' + $sellOffersIllegal + ' sell, ' + $buyOffersIllegal + ' buy (AllowIllegal=' + $allowIllegal + ')'" chance="100"/>
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ✅ Legal offers remaining: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- ===== PRE-FILTER DISTANCE (BLACKLIST-AWARE) ===== -->
        <!-- ✅ FIX: Filter offers by blacklist-aware distance BEFORE matching -->
        <!-- Native query removed match_gate_distance (uses basic pathfinding, ignores sector blacklists) -->
        <!-- Now manually filter using blacklist-aware gatedistance to ensure consistency -->
        <do_if value="($allSellOffers.count gt 0 or $allBuyOffers.count gt 0) and $maxDistance? and $maxDistance gt 0">
          <set_value name="$sellOffersDistanceFiltered" exact="0"/>
          <set_value name="$buyOffersDistanceFiltered" exact="0"/>
          
          <!-- Filter sell offers by blacklist-aware distance -->
          <do_if value="$allSellOffers.count gt 0">
            <set_value name="$reachableSellOffers" exact="[]"/>
            <do_all exact="$allSellOffers.count" counter="$i">
              <set_value name="$offer" exact="$allSellOffers.{$i}"/>
              <set_value name="$targetSector" exact="$offer.owner.sector"/>
              
              <!-- Calculate blacklist-aware distance (respects sectortravel blacklists) -->
              <set_value name="$distance" exact="if $targetSector == $homeSector then 0 else $homeSector.gatedistance.{$targetSector}.{$blacklistgroup}.{$ship}"/>
              
              <!-- Keep offer if within max distance and path exists (distance >= 0) -->
              <do_if value="$distance ge 0 and $distance le $maxDistance">
                <append_to_list name="$reachableSellOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$sellOffersDistanceFiltered" exact="$sellOffersDistanceFiltered + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allSellOffers" exact="$reachableSellOffers"/>
          </do_if>
          
          <!-- Filter buy offers by blacklist-aware distance -->
          <do_if value="$allBuyOffers.count gt 0">
            <set_value name="$reachableBuyOffers" exact="[]"/>
            <do_all exact="$allBuyOffers.count" counter="$i">
              <set_value name="$offer" exact="$allBuyOffers.{$i}"/>
              <set_value name="$targetSector" exact="$offer.owner.sector"/>
              
              <!-- Calculate blacklist-aware distance (respects sectortravel blacklists) -->
              <set_value name="$distance" exact="if $targetSector == $homeSector then 0 else $homeSector.gatedistance.{$targetSector}.{$blacklistgroup}.{$ship}"/>
              
              <!-- Keep offer if within max distance and path exists (distance >= 0) -->
              <do_if value="$distance ge 0 and $distance le $maxDistance">
                <append_to_list name="$reachableBuyOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$buyOffersDistanceFiltered" exact="$buyOffersDistanceFiltered + 1"/>
              </do_else>
            </do_all>
            <set_value name="$allBuyOffers" exact="$reachableBuyOffers"/>
          </do_if>
          
          <!-- Debug logging -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <do_if value="$sellOffersDistanceFiltered gt 0 or $buyOffersDistanceFiltered gt 0">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📏 PRE-FILTERED distance (blacklist-aware): ' + $sellOffersDistanceFiltered + ' sell, ' + $buyOffersDistanceFiltered + ' buy (max: ' + $maxDistance + ' jumps)'" chance="100"/>
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ✅ Reachable offers remaining: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- ===== CROSS-STATION TRADE MATCHING ===== -->
        <do_if value="$allSellOffers.count gt 0 and $allBuyOffers.count gt 0">
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Total offers before indexing: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
          </do_if>
          
          <!-- ✅ OPTIMIZATION: Calculate available money ONCE (before loops, not inside) -->
          <set_value name="$availableMoney" exact="player.money"/>
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists and $homeBase.isclass.station">
            <set_value name="$availableMoney" exact="$homeBase.money"/>
          </do_if>
          
          <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
          <!-- ✅ CRITICAL OPTIMIZATION: Index & Limit BEFORE Distance Calculation -->
          <!-- OLD: Calculate gatedistance for 3,859 stations, THEN limit to top 5 per ware -->
          <!-- NEW: Limit to top 5 per ware FIRST, THEN calculate gatedistance for ~250 stations -->
          <!-- Impact: 3,859 → 250 pathfinding calls = 93.5% reduction = ELIMINATES STUTTER! -->
          <!-- ═══════════════════════════════════════════════════════════════════════════════ -->
          
          <!-- STEP 1: Index offers by ware (fast O(n) operation) -->
          <set_value name="$sellOffersByWare" exact="table[]"/>
          <set_value name="$buyOffersByWare" exact="table[]"/>
          
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$offer" exact="$allSellOffers.{$i}"/>
            <do_if value="not $sellOffersByWare.{$offer.ware}?">
              <set_value name="$sellOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$sellOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <do_all exact="$allBuyOffers.count" counter="$j">
            <set_value name="$offer" exact="$allBuyOffers.{$j}"/>
            <do_if value="not $buyOffersByWare.{$offer.ware}?">
              <set_value name="$buyOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$buyOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <!-- STEP 2: Per-ware sort & limit (reduces to ~5 per ware × 50 wares = ~250 stations) -->
          <set_value name="$maxOffersPerWare" exact="2000"/>
          <set_value name="$limitedSellOffers" exact="[]"/>
          <set_value name="$limitedBuyOffers" exact="[]"/>
          
          <!-- Process each ware's sell offers -->
          <do_all exact="$sellOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$sellOffersByWare.keys.{$wareIdx}"/>
            <set_value name="$offersForWare" exact="$sellOffersByWare.{$ware}"/>
            
            <!-- Sort by relativeprice (lowest = cheapest to buy from) -->
            <sort_trades name="$offersForWare" tradelist="$offersForWare" sorter="relativeprice"/>
            
            <!-- Take top N offers -->
            <set_value name="$limitCount" exact="[$offersForWare.count, $maxOffersPerWare].min"/>
            <do_all exact="$limitCount" counter="$idx">
              <append_to_list name="$limitedSellOffers" exact="$offersForWare.{$idx}"/>
            </do_all>
          </do_all>
          
          <!-- Process each ware's buy offers -->
          <do_all exact="$buyOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$buyOffersByWare.keys.{$wareIdx}"/>
            <set_value name="$offersForWare" exact="$buyOffersByWare.{$ware}"/>
            
            <!-- Sort by relativeprice (highest = best buyers) -->
            <sort_trades name="$offersForWare" tradelist="$offersForWare" sorter="relativeprice"/>
            
            <!-- Take LAST N offers (highest payers) -->
            <do_if value="$offersForWare.count gt $maxOffersPerWare">
              <set_value name="$startIndex" exact="$offersForWare.count - $maxOffersPerWare + 1"/>
              <do_all exact="$maxOffersPerWare" counter="$idx">
                <set_value name="$actualIndex" exact="$startIndex + $idx - 1"/>
                <append_to_list name="$limitedBuyOffers" exact="$offersForWare.{$actualIndex}"/>
              </do_all>
            </do_if>
            <do_else>
              <!-- Less than limit, take all -->
              <do_all exact="$offersForWare.count" counter="$idx">
                <append_to_list name="$limitedBuyOffers" exact="$offersForWare.{$idx}"/>
              </do_all>
            </do_else>
          </do_all>
          
          <!-- Replace original lists with limited lists -->
          <set_value name="$allSellOffers" exact="$limitedSellOffers"/>
          <set_value name="$allBuyOffers" exact="$limitedBuyOffers"/>
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ OPTIMIZED: Limited to ' + $allSellOffers.count + ' sell + ' + $allBuyOffers.count + ' buy offers (top ' + $maxOffersPerWare + ' per ware)'" chance="100"/>
          </do_if>
          
          <!-- STEP 3: NOW calculate distances for LIMITED set only (93.5% fewer calls!) -->
          <!-- Re-index limited offers by ware for matching -->
          <set_value name="$sellOffersByWare" exact="table[]"/>
          <set_value name="$buyOffersByWare" exact="table[]"/>
          
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$offer" exact="$allSellOffers.{$i}"/>
            <do_if value="not $sellOffersByWare.{$offer.ware}?">
              <set_value name="$sellOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$sellOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <do_all exact="$allBuyOffers.count" counter="$j">
            <set_value name="$offer" exact="$allBuyOffers.{$j}"/>
            <do_if value="not $buyOffersByWare.{$offer.ware}?">
              <set_value name="$buyOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$buyOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <!-- STEP 4: Calculate distances for LIMITED offers only -->
          <set_value name="$stationDistanceCache" exact="table[]"/>
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$sellStation" exact="$allSellOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$sellStation}?">
              <!-- Use blacklist-aware distance (respects sectortravel blacklists from threat system) -->
              <set_value name="$targetSector" exact="$sellStation.sector"/>
              <do_if value="$targetSector == $homeSector">
                <!-- Same sector - distance is 0 -->
                <set_value name="$stationDistanceCache.{$sellStation}" exact="0"/>
              </do_if>
              <do_else>
                <!-- Blacklist-aware distance: NO blacklisttype, just blacklistgroup! -->
                <set_value name="$stationDistanceCache.{$sellStation}" exact="$homeSector.gatedistance.{$targetSector}.{blacklistgroup.civilian}.{$ship}"/>
              </do_else>
            </do_if>
          </do_all>
          <do_all exact="$allBuyOffers.count" counter="$i">
            <set_value name="$buyStation" exact="$allBuyOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$buyStation}?">
              <!-- Use blacklist-aware distance (respects sectortravel blacklists from threat system) -->
              <set_value name="$targetSector" exact="$buyStation.sector"/>
              <do_if value="$targetSector == $homeSector">
                <!-- Same sector - distance is 0 -->
                <set_value name="$stationDistanceCache.{$buyStation}" exact="0"/>
              </do_if>
              <do_else>
                <!-- Blacklist-aware distance: NO blacklisttype, just blacklistgroup! -->
                <set_value name="$stationDistanceCache.{$buyStation}" exact="$homeSector.gatedistance.{$targetSector}.{blacklistgroup.civilian}.{$ship}"/>
              </do_else>
            </do_if>
          </do_all>
          
          <set_value name="$crossStationBestTrade" exact="null"/>
          <set_value name="$crossStationBestScore" exact="0"/>
          
          <!-- ✅ OPTIMIZED: Dual-tracking for inline conflict resolution -->
          <set_value name="$nonConflictedBestTrade" exact="null"/>
          <set_value name="$nonConflictedBestScore" exact="0"/>
          
          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
          <!-- OPTIMIZATION 5: Pre-cache fleet route reservations (93% reduction in overhead) -->
          <!-- Build lookup list ONCE instead of checking N ships × M trades -->
          <!-- Cache format: List of "BuyStationID_SellStationID_WareID" strings -->
          <!-- Impact: 10 ships: 3M → 200K operations, 50 ships: 15M → 200K operations -->
          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
          <set_value name="$reservedRoutes" exact="[]"/>
          
          <do_if value="global.$GT_ActiveTradeReservations? and global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
            <do_all exact="global.$GT_ActiveTradeReservations.keys.count" counter="$resIdx">
              <set_value name="$otherShip" exact="global.$GT_ActiveTradeReservations.keys.{$resIdx}"/>
              
              <!-- Skip the searching ship itself -->
              <do_if value="$otherShip != $ship and $otherShip.exists">
                <set_value name="$otherRoute" exact="global.$GT_ActiveTradeReservations.{$otherShip}"/>
                
                <!-- Validate route has required data -->
                <do_if value="$otherRoute.$BuyStation? and $otherRoute.$SellStation? and $otherRoute.$Ware?">
                  <!-- CRITICAL: Validate all components exist before building key -->
                  <do_if value="$otherRoute.$BuyStation.idcode? and $otherRoute.$SellStation.idcode?">
                    <!-- Build simple string cache key using ware object as string (MD auto-converts to ware ID) -->
                    <set_value name="$cacheKey" exact="$otherRoute.$BuyStation.idcode + '_' + $otherRoute.$SellStation.idcode + '_' + $otherRoute.$Ware"/>
                    <append_to_list name="$reservedRoutes" exact="$cacheKey"/>
                  </do_if>
                </do_if>
              </do_if>
            </do_all>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-Fleet] (' + $ship.idcode + ') Pre-cached ' + $reservedRoutes.count + ' reserved routes from ' + (global.$GT_ActiveTradeReservations.keys.count - 1) + ' other ships'" chance="100"/>
            </do_if>
          </do_if>
          
          <!-- ✅ PERFORMANCE: Early exit threshold (stop when we have enough good trades) -->
          <set_value name="$earlyExitThreshold" exact="100"/> <!-- Stop after finding 100+ valid trades -->
          
          <!-- Match offers of same ware -->
          <do_all exact="$sellOffersByWare.keys.count" counter="$wareIdx">
            <!-- ✅ PERFORMANCE: Early exit if we have enough trades -->
            <do_if value="$tradeList.count ge $earlyExitThreshold">
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ EARLY EXIT: Found ' + $tradeList.count + ' trades (threshold: ' + $earlyExitThreshold + '), stopping search'" chance="100"/>
              </do_if>
              <break/>
            </do_if>
            
            <set_value name="$ware" exact="$sellOffersByWare.keys.{$wareIdx}"/>
            
            <do_if value="$buyOffersByWare.{$ware}?">
              <set_value name="$sellOffersForWare" exact="$sellOffersByWare.{$ware}"/>
              <set_value name="$buyOffersForWare" exact="$buyOffersByWare.{$ware}"/>
              
              <!-- ✅ NOTE: Per-ware limiting already done BEFORE distance calculation (lines 1141-1183) -->
              <!-- This dramatically reduced the number of gatedistance calls from 3,859 to ~250 -->
              <!-- Now we just match the pre-limited offers (5 per ware) -->
              
                <do_all exact="$sellOffersForWare.count" counter="$i">
                  <set_value name="$sellOffer" exact="$sellOffersForWare.{$i}"/>
                  
                  <!-- NOTE: MD scripts can't use <wait> in actions (only AI scripts can) -->
                  <!-- Stutter is unavoidable for heavy trade searches in MD system -->
                  <!-- Optimizations already applied: early profit rejection, per-ware limiting, fleet cache -->
                  
                  <do_all exact="$buyOffersForWare.count" counter="$j">
                    <set_value name="$buyOffer" exact="$buyOffersForWare.{$j}"/>
                    
                    <!-- Different stations only -->
                    <do_if value="$sellOffer.owner != $buyOffer.owner">
                    
                    <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                    <!-- OPTIMIZATION 3: Early profit rejection (skip impossible trades instantly) -->
                    <!-- Check if trade can be profitable BEFORE expensive calculations -->
                    <!-- Impact: Skip ~50% of combinations instantly (saves ~1.5M operations) -->
                    <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                    <set_value name="$buyPrice" exact="$sellOffer.unitprice"/>
                    <set_value name="$sellPrice" exact="$buyOffer.unitprice"/>
                    
                    <do_if value="$sellPrice le $buyPrice">
                      <!-- Trade impossible: Sell price must be higher than buy price for profit -->
                      <!-- No need to check docking, cargo, distances, etc. for impossible trades -->
                      <set_value name="$tradesRejectedProfit" operation="add"/>
                      <continue/>
                    </do_if>
                    <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                    
                    <!-- CRITICAL: Check if ship can dock at BOTH stations (buy and sell) -->
                    <set_value name="$canDockAtBuyStation" exact="$sellOffer.owner.dockingallowed.{$ship}"/>
                    <set_value name="$canDockAtSellStation" exact="$buyOffer.owner.dockingallowed.{$ship}"/>
                    
                    <do_if value="not $canDockAtBuyStation or not $canDockAtSellStation">
                      <!-- Ship cannot dock at one or both stations - skip this trade -->
                      <set_value name="$tradesRejectedDocking" operation="add"/>
                      <continue/>
                    </do_if>
                    
                    <!-- Calculate trade details -->
                    <!-- ✅ OPTIMIZATION 3: Prices already calculated above for early rejection -->
                    
                    <!-- ✅ OPTIMIZED: Money calculated once outside loops, just use it -->
                    <!-- Calculate max affordable -->
                    <set_value name="$maxAffordable" exact="99999"/>
                    <do_if value="$buyPrice gt 0">
                      <set_value name="$maxAffordable" exact="($availableMoney / $buyPrice)i"/>
                    </do_if>
                    
                    <!-- Calculate max cargo capacity for this ware (vanilla formula: free cargo / ware volume) -->
                    <set_value name="$maxCargoCapacity" exact="($ship.cargo.free.all / $sellOffer.ware.volume)i"/>
                    
                    <set_value name="$maxAmount" exact="[$sellOffer.amount, $buyOffer.amount, $maxCargoCapacity, $maxAffordable].min"/>
                    
                    <do_if value="$maxAmount le 0">
                      <!-- Track rejection reason -->
                      <set_value name="$tradesRejectedAmount" operation="add"/>
                      <continue/>
                    </do_if>
                    
                    <do_if value="true">
                      <set_value name="$investment" exact="$buyPrice * $maxAmount"/>
                      <set_value name="$revenue" exact="$sellPrice * $maxAmount"/>
                      <set_value name="$profit" exact="$revenue - $investment"/>
                      
                      <!-- ✅ OPTIMIZED: Inline ROI calculation (avoid run_actions overhead) -->
                      <set_value name="$roi" exact="if $investment gt 0 then (($profit * 100) / $investment) else 100"/>
                      
                      <!-- Check thresholds -->
                      <set_value name="$roiThreshold" exact="$minROI"/>
                      <set_value name="$profitThreshold" exact="$minAbsoluteProfit"/>
                      <do_if value="$gt_AdvancedAnalytics">
                        <set_value name="$roiThreshold" exact="$roiThreshold * 0.95"/>
                        <set_value name="$profitThreshold" exact="($profitThreshold * 0.95)i"/>
                      </do_if>
                      
                      <do_if value="$roi lt $roiThreshold or $profit lt $profitThreshold">
                        <!-- Track rejection reason -->
                        <set_value name="$tradesRejectedProfit" operation="add"/>
                        
                        <!-- DEBUG: Track best rejected trade to see if we're even close -->
                        <do_if value="not $bestRejectedProfit? or $profit gt $bestRejectedProfit">
                          <set_value name="$bestRejectedProfit" exact="$profit"/>
                          <set_value name="$bestRejectedTrade" exact="table[
                            $ware = $sellOffer.ware,
                            $buyFrom = $sellOffer.owner,
                            $sellTo = $buyOffer.owner,
                            $buyPrice = $buyPrice,
                            $sellPrice = $sellPrice,
                            $profit = $profit,
                            $roi = $roi
                          ]"/>
                        </do_if>
                        
                        <!-- DEBUG: Removed from hot path (was causing stutter with chance="100") -->
                        <!-- Detailed rejection logging now only in summary at end of search -->
                        
                        <continue/>
                      </do_if>
                      
                      <do_if value="true">
                        <!-- ✅ OPTIMIZED: Use cached distances from home sector to each station -->
                        <!-- $buyDistance = distance from home to BUY station (sellOffer.owner) -->
                        <set_value name="$buyDistance" exact="@$stationDistanceCache.{$sellOffer.owner}"/>
                        <do_if value="not $buyDistance? or typeof $buyDistance != datatype.integer">
                          <set_value name="$buyDistance" exact="-1"/>
                        </do_if>
                        
                        <!-- $sellDistance = distance from home to SELL station (buyOffer.owner) -->
                        <set_value name="$sellDistance" exact="@$stationDistanceCache.{$buyOffer.owner}"/>
                        <do_if value="not $sellDistance? or typeof $sellDistance != datatype.integer">
                          <set_value name="$sellDistance" exact="-1"/>
                        </do_if>
                        
                        <!-- Filter genuinely unreachable trades (sectors completely disconnected) -->
                        <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
                          <!-- DEBUG: Only log if debug enabled AND verbosity high (removed from hot path) -->
                          <!-- This was causing massive stutter - logging 100+ unreachable trades per search -->
                          <set_value name="$tradesRejectedDistance" operation="add"/>
                          <continue/>
                        </do_if>
                        
                        <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                        <!-- OPTIMIZATION 1: Blacklist safety net REMOVED (moved to execution validation) -->
                        <!-- Before: 12 property lookups × 100K combinations = 4.8M lookups per search -->
                        <!-- After: Pre-filtering (lines 1261-1308) removes blacklisted offers before matching -->
                        <!-- Final validation at execution (gt_trading_execution.xml) catches edge cases -->
                        <!-- Impact: 4.8M property lookups eliminated, 10× faster inner loop -->
                        <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                        
                        <!-- ✅ DISTANCE FILTER: Check distances from home sector to each station -->
                        <!-- Home → Buy station must be ≤ maxDistance (maxBuyDistance parameter) -->
                        <!-- Home → Sell station must be ≤ maxDistance (maxSellDistance parameter) -->
                        <!-- Note: Uses same maxDistance for both buy and sell (from ship parameters) -->
                        <do_if value="$buyDistance gt $maxDistance or $sellDistance gt $maxDistance">
                          <!-- Track rejection reason -->
                          <set_value name="$tradesRejectedDistance" operation="add"/>
                          <continue/>
                        </do_if>
                        
                        <!-- Calculate efficiency with distance penalty (use combined for efficiency) -->
                        <set_value name="$totalDistance" exact="$buyDistance + $sellDistance"/>
                        <set_value name="$adjustedDistance" exact="$totalDistance * $distancePenaltyMultiplier"/>
                        <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($profit / $adjustedDistance) else $profit"/>
                        
                        <!-- Apply faction priority boost -->
                        <do_if value="$factionPriority == 0">
                          <!-- Player Only: Boost player-owned stations by 20% -->
                          <do_if value="$sellOffer.owner.owner == faction.player or $buyOffer.owner.owner == faction.player">
                            <!-- Boost player-owned stations by 20% -->
                            <!-- Avoid money type conversion by using addition instead of multiplication -->
                            <set_value name="$boost" exact="$efficiency / 5"/>
                            <set_value name="$efficiency" exact="$efficiency + $boost"/>
                          </do_if>
                        </do_if>
                        <do_elseif value="$factionPriority == 1">
                          <!-- Foreign First: Boost non-player stations by 20% -->
                          <do_if value="$sellOffer.owner.owner != faction.player and $buyOffer.owner.owner != faction.player">
                            <!-- Boost non-player stations by 20% -->
                            <!-- Avoid money type conversion by using addition instead of multiplication -->
                            <set_value name="$boost" exact="$efficiency / 5"/>
                            <set_value name="$efficiency" exact="$efficiency + $boost"/>
                          </do_if>
                        </do_elseif>
                        <!-- Equal Priority (2): No boost applied -->
                        
                        <!-- ✅ CRITICAL: Check if this sector pair previously failed for THIS ship -->
                        <set_value name="$isFailedSectorPair" exact="false"/>
                        <do_if value="$failedTrades.count gt 0">
                          <do_all exact="$failedTrades.count" counter="$failIdx">
                            <set_value name="$failedTrade" exact="$failedTrades.{$failIdx}"/>
                            
                            <!-- Check if SECTOR PAIR matches (buy sector → sell sector) -->
                            <do_if value="$failedTrade.$BuySector? and $failedTrade.$SellSector?">
                              <do_if value="@$sellOffer.owner.sector == $failedTrade.$BuySector and 
                                            @$buyOffer.owner.sector == $failedTrade.$SellSector">
                                <set_value name="$isFailedSectorPair" exact="true"/>
                                <break/>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_if>
                        
                        <!-- ✅ NEW: Collect all valid trades (non-failed sectors) for AI validation -->
                        <do_if value="not $isFailedSectorPair">
                          <set_value name="$trade" exact="table[
                            $BuyOffer = $sellOffer,
                            $SellOffer = $buyOffer,
                            $BuyStation = $sellOffer.owner,
                            $SellStation = $buyOffer.owner,
                            $Amount = $maxAmount,
                            $Profit = $profit,
                            $ROI = $roi,
                            $Score = $efficiency,
                            $BuyPrice = $buyPrice,
                            $SellPrice = $sellPrice,
                            $Distance = $totalDistance,
                            $Risk = 0
                          ]"/>
                          
                          <!-- Add to trade list (collect all, will sort and trim later) -->
                          <append_to_list name="$tradeList" exact="$trade"/>
                          
                          <!-- Also track overall best for backward compatibility -->
                          <do_if value="$efficiency gt $crossStationBestScore">
                            <set_value name="$crossStationBestScore" exact="$efficiency"/>
                            <set_value name="$crossStationBestTrade" exact="$trade"/>
                          </do_if>
                          
                          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                          <!-- OPTIMIZATION 5: Single table lookup instead of looping all ships -->
                          <!-- Before: N ships × 3 checks = 30 ops per trade (10 ships) -->
                          <!-- After: 1 string concat + 1 table lookup = 2 ops per trade -->
                          <!-- Impact: 93% reduction (10 ships: 3M → 200K operations) -->
                          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                          <set_value name="$routeConflicted" exact="false"/>
                          
                          <do_if value="$reservedRoutes.count gt 0">
                            <!-- Check cache using list membership -->
                            <!-- Note: BuyStation = where ship buys FROM (sellOffer.owner) -->
                            <!--       SellStation = where ship sells TO (buyOffer.owner) -->
                            <set_value name="$tradeCacheKey" exact="$sellOffer.owner.idcode + '_' + $buyOffer.owner.idcode + '_' + $sellOffer.ware"/>
                            
                            <!-- List membership check using indexof -->
                            <set_value name="$routeConflicted" exact="$reservedRoutes.indexof.{$tradeCacheKey}?"/>
                          </do_if>
                          <!-- ═══════════════════════════════════════════════════════════════════════════ -->
                          
                          <!-- ✅ OPTIMIZED: Also track best non-conflicted trade (no bubble sort!) -->
                          <!-- Also exclude failed sector pairs from non-conflicted tracking -->
                          <do_if value="not $routeConflicted and not $isFailedSectorPair and $efficiency gt $nonConflictedBestScore">
                            <set_value name="$nonConflictedBestScore" exact="$efficiency"/>
                            <set_value name="$nonConflictedBestTrade" exact="$crossStationBestTrade"/>
                          </do_if>
                          
          <!-- Cache trade if enabled (all skill levels can use cache - technical optimization, not roleplay feature) -->
          <do_if value="global.$GT_GlobalSettings.$Fleet.$EnableTradeCache">
            <set_value name="$cacheProfitThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
            <do_if value="$roi ge $cacheProfitThreshold">
              <!-- ✅ FIX: Use string keys at ALL levels - X4 won't let you mix object keys with string keys -->
              <!-- Convert ware object to string using ware.id property -->
              <!-- ✅ LIST-BASED CACHE: Append trade entry to flat list -->
              <!-- Validate required data exists before caching -->
              <do_if value="$sellOffer.ware? and $sellOffer.owner? and $buyOffer.owner?">
                <!-- Ensure cache list exists -->
                <do_if value="not global.$GT_TradeCache?">
                  <set_value name="global.$GT_TradeCache" exact="[]"/>
                </do_if>
                
                <!-- Append trade entry as flat table to list -->
                <!-- ✅ CRITICAL: Store from SHIP's perspective!
                     Ship BUYS from station's SELL offer
                     Ship SELLS to station's BUY offer -->
                <append_to_list name="global.$GT_TradeCache" exact="table[
                  $WareId = $sellOffer.ware.id,
                  $WareName = $sellOffer.ware.name,
                  $SellStationId = $buyOffer.owner.idcode,
                  $BuyStationId = $sellOffer.owner.idcode,
                  $BuyOffer = $sellOffer,
                  $SellOffer = $buyOffer,
                  $Amount = $maxAmount,
                  $Profit = $profit,
                  $ROI = $roi,
                  $BuyPrice = $buyPrice,
                  $SellPrice = $sellPrice,
                  $Distance = $totalDistance,
                  $Timestamp = player.age
                ]"/>
                
                <!-- DEBUG: Log successful cache (commented out to reduce log spam) -->
                <!-- <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ✅ Trade cached: ' + $sellOffer.ware.name + ', ROI=' + $roi + '%, Profit=' + ($profit/100) + ' Cr, Distance=' + $totalDistance + ' jumps'" chance="100"/>
                </do_if> -->
              </do_if>
              <do_else>
                <!-- DEBUG: Log skipped cache (invalid data) - commented out to reduce log spam -->
                <!-- <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⚠ Skipped caching trade with invalid data'" chance="100"/>
                </do_if> -->
              </do_else>
            </do_if>
          </do_if>
                        </do_if>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_all>
              </do_all>
            </do_if>
          </do_all>
          
          <!-- ✅ OPTIMIZED: Smart trade selection - prefer non-conflicted, fallback to best overall -->
          <do_if value="$nonConflictedBestTrade">
            <set_value name="$bestTrade" exact="$nonConflictedBestTrade"/>
            <set_value name="$bestScore" exact="$nonConflictedBestScore"/>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-FLEET] (' + $ship.idcode + ') ✅ Selected non-conflicted trade (Score: ' + $nonConflictedBestScore + ')'" chance="100"/>
            </do_if>
          </do_if>
          <do_elseif value="$crossStationBestTrade">
            <set_value name="$bestTrade" exact="$crossStationBestTrade"/>
            <set_value name="$bestScore" exact="$crossStationBestScore"/>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-FLEET] (' + $ship.idcode + ') ⚠️ Using best trade (Score: ' + $crossStationBestScore + ') - may conflict with active fleet routes'" chance="100"/>
            </do_if>
          </do_elseif>
        </do_if>
        
        <!-- ✅ PERFORMANCE FIX: Use X4's native sort instead of O(n²) bubble sort -->
        <do_if value="$tradeList.count gt 0">
          <!-- Convert trade list to tradeoffer format for sort_trades -->
          <!-- Note: sort_trades expects actual tradeoffer objects, not our custom tables -->
          <!-- Since we can't use native sort on custom tables, we use a simple insertion-sort approach -->
          <!-- which is O(n·k) where k=20 (much better than O(n²) bubble sort) -->
          
          <!-- Trim to top 20 by score (already tracked best during collection) -->
          <do_if value="$tradeList.count gt $maxTradesToReturn">
            <!-- ✅ WARE DIVERSITY: Group trades by ware, take best from each ware, then sort globally -->
            <!-- This ensures we get variety, not just 20 trades of the same ware -->
            
            <!-- Step 1: Group trades by ware -->
            <set_value name="$tradesByWare" exact="table[]"/>
            <do_all exact="$tradeList.count" counter="$idx">
              <set_value name="$trade" exact="$tradeList.{$idx}"/>
              <set_value name="$ware" exact="$trade.$BuyOffer.ware"/>
              
              <!-- Initialize ware list if needed -->
              <do_if value="not $tradesByWare.{$ware}?">
                <set_value name="$tradesByWare.{$ware}" exact="[]"/>
              </do_if>
              
              <!-- Add trade to ware's list -->
              <append_to_list name="$tradesByWare.{$ware}" exact="$trade"/>
            </do_all>
            
            <!-- Step 2: Take best 2 trades from each ware (ensures diversity) -->
            <set_value name="$diverseList" exact="[]"/>
            <set_value name="$maxPerWare" exact="2"/>
            
            <do_all exact="$tradesByWare.keys.count" counter="$wareIdx">
              <set_value name="$ware" exact="$tradesByWare.keys.{$wareIdx}"/>
              <set_value name="$wareTradeList" exact="$tradesByWare.{$ware}"/>
              
              <!-- Take top N trades for this ware (sorted by score) -->
              <set_value name="$takesCount" exact="[$wareTradeList.count, $maxPerWare].min"/>
              
              <!-- Find best trades for this ware -->
              <set_value name="$processedForWare" exact="[]"/>
              <do_all exact="$takesCount" counter="$rank">
                <set_value name="$maxScore" exact="-999999999"/>
                <set_value name="$maxWareIdx" exact="-1"/>
                
                <do_all exact="$wareTradeList.count" counter="$wIdx">
                  <!-- Check if already processed -->
                  <set_value name="$alreadyProcessed" exact="false"/>
                  <do_all exact="$processedForWare.count" counter="$pi">
                    <do_if value="$processedForWare.{$pi} == $wIdx">
                      <set_value name="$alreadyProcessed" exact="true"/>
                      <break/>
                    </do_if>
                  </do_all>
                  
                  <do_if value="not $alreadyProcessed and $wareTradeList.{$wIdx}.$Score gt $maxScore">
                    <set_value name="$maxScore" exact="$wareTradeList.{$wIdx}.$Score"/>
                    <set_value name="$maxWareIdx" exact="$wIdx"/>
                  </do_if>
                </do_all>
                
                <do_if value="$maxWareIdx ge 1">
                  <append_to_list name="$diverseList" exact="$wareTradeList.{$maxWareIdx}"/>
                  <append_to_list name="$processedForWare" exact="$maxWareIdx"/>
                </do_if>
              </do_all>
            </do_all>
            
            <!-- Step 3: Sort the diverse list globally by score and take top 20 -->
            <set_value name="$sortedList" exact="[]"/>
            <set_value name="$processedIndices" exact="[]"/>
            <set_value name="$finalCount" exact="[$diverseList.count, $maxTradesToReturn].min"/>
            
            <do_all exact="$finalCount" counter="$rank">
              <set_value name="$maxScore" exact="-999999999"/>
              <set_value name="$maxIdx" exact="-1"/>
              
              <do_all exact="$diverseList.count" counter="$idx">
                <!-- Check if already processed -->
                <set_value name="$alreadyProcessed" exact="false"/>
                <do_all exact="$processedIndices.count" counter="$pi">
                  <do_if value="$processedIndices.{$pi} == $idx">
                    <set_value name="$alreadyProcessed" exact="true"/>
                    <break/>
                  </do_if>
                </do_all>
                
                <do_if value="not $alreadyProcessed and $diverseList.{$idx}.$Score gt $maxScore">
                  <set_value name="$maxScore" exact="$diverseList.{$idx}.$Score"/>
                  <set_value name="$maxIdx" exact="$idx"/>
                </do_if>
              </do_all>
              
              <do_if value="$maxIdx ge 1">
                <append_to_list name="$sortedList" exact="$diverseList.{$maxIdx}"/>
                <append_to_list name="$processedIndices" exact="$maxIdx"/>
              </do_if>
            </do_all>
            
            <!-- Replace with diverse, sorted top 20 -->
            <set_value name="$tradeList" exact="$sortedList"/>
          </do_if>
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📋 Collected ' + $tradeList.count + ' valid trades for AI validation'" chance="100"/>
            
            <!-- Log each trade sent to AI for validation -->
            <do_all exact="$tradeList.count" counter="$idx">
              <set_value name="$trade" exact="$tradeList.{$idx}"/>
              <debug_text text="'[GT-AI-List] ' + $ship.idcode + ' Trade #' + $idx + '/' + $tradeList.count + ':' +
                '\n  Ware: ' + @$trade.$BuyOffer.ware.name + ' (x' + $trade.$Amount + ')' +
                '\n  BUY: ' + @$trade.$BuyOffer.owner.knownname + ' @ ' + ($trade.$BuyPrice/100) + ' Cr' +
                '\n  SELL: ' + @$trade.$SellOffer.owner.knownname + ' @ ' + ($trade.$SellPrice/100) + ' Cr' +
                '\n  Profit: ' + ($trade.$Profit/100) + ' Cr | ROI: ' + $trade.$ROI + '% | Score: ' + $trade.$Score + ' | Distance: ' + $trade.$Distance + ' jumps'"
                chance="100"/>
            </do_all>
          </do_if>
        </do_if>
        
        <!-- Failed trade check removed from SearchLiveTrades - now done in SearchTradeRoutes after result extraction -->
        
        <!-- DEBUG: Log selected trade docking status -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch and $bestTrade and $bestTrade.$BuyStation? and $bestTrade.$SellStation?">
          <set_value name="$canDockBuy" exact="@$bestTrade.$BuyStation.dockingallowed.{$ship}"/>
          <set_value name="$canDockSell" exact="@$bestTrade.$SellStation.dockingallowed.{$ship}"/>
          <set_value name="$buyDockStatus" exact="if $canDockBuy then 'OK' else 'FAIL'"/>
          <set_value name="$sellDockStatus" exact="if $canDockSell then 'OK' else 'FAIL'"/>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') SELECTED TRADE DOCKING: Ship=' + $ship.class + ' | BUY=' + @$bestTrade.$BuyStation.knownname + ' [' + $buyDockStatus + '] | SELL=' + @$bestTrade.$SellStation.knownname + ' [' + $sellDockStatus + ']'" chance="100"/>
        </do_if>
        
        <!-- DEBUG: Log docking restriction statistics -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <do_if value="$tradesRejectedDocking gt 0">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') DOCKING RESTRICTIONS: Rejected ' + $tradesRejectedDocking + ' trade pairs due to incompatible docking (ship class: ' + $ship.class + ')'" chance="100"/>
          </do_if>
          <!-- ✅ OPTIMIZATION 1: Blacklist filtering debug output removed (safety net eliminated) -->
        </do_if>
        
        <!-- Return results via global variable -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $StationsEvaluated = $stationsEvaluated,
          $OffersFound = $offersFound,
          $TradeList = $tradeList,
          $TradesRejectedDocking = $tradesRejectedDocking,
          $TradesRejectedProfit = $tradesRejectedProfit,
          $TradesRejectedDistance = $tradesRejectedDistance,
          $TradesRejectedAmount = $tradesRejectedAmount
        ]"/>
      </actions>
    </cue>
    
    <!-- Search for Sell Opportunities -->
    <cue name="SearchSellOpportunities" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- Receive parameters directly -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minProfit" exact="$params.$MinProfit"/>
        
        <!-- DEBUG: Sell search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === SELL SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin Profit: ' + $minProfit + ' Cr'" chance="100"/>
        </do_if>
        
        <!-- Find best sell location for current cargo -->
        <set_value name="$bestOffer" exact="null"/>
        <set_value name="$bestPrice" exact="0"/>
        <set_value name="$bestAmount" exact="0"/>
        
        <!-- Get ship's current cargo -->
        <set_value name="$currentCargo" exact="$ship.cargo.list"/>
        
        <do_if value="$currentCargo.count gt 0">
          <!-- ✅ CRITICAL FIX: Sell ONE ware at a time (first ware in list) -->
          <!-- After this trade completes, ship will loop back and sell next ware -->
          <!-- This prevents multiple concurrent trade orders for the same ship -->
          
          <set_value name="$selectedWare" exact="$currentCargo.{1}"/>
          <set_value name="$selectedAmount" exact="$ship.cargo.{$selectedWare}.count"/>
          
          <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Cargo contains ' + $currentCargo.count + ' ware types, selling first: ' + @$selectedWare.name + ' x' + $selectedAmount + ' (after sale, will retry for remaining wares)'" chance="100"/>
          
          <!-- Find buy offers for the selected ware -->
          <!-- ✅ CRITICAL: tradepartner="$ship" ensures only executable offers (relations, permissions, F6 limitations) -->
          <find_buy_offer tradepartner="$ship" space="player.galaxy" result="$buyOffers" multiple="true" wares="$selectedWare">
            <match_buyer tradesknownto="$ship.owner">
              <match_gate_distance object="$ship" max="$maxDistance"/>
            </match_buyer>
          </find_buy_offer>
          
          <!-- Find best price -->
          <do_all exact="$buyOffers.count" counter="$j">
            <set_value name="$offer" exact="$buyOffers.{$j}"/>
            <set_value name="$station" exact="$offer.owner"/>
            
            <!-- ✅ NOTE: tradepartner="$ship" in find_buy_offer already filters by faction relations -->
            <!-- No explicit check needed - C++ engine handles it -->
            
            <!-- ✅ VALIDATION: Check blacklists before considering offer -->
            <set_value name="$isBlacklisted" exact="false"/>
            
            <!-- Check station blacklist (object activity) -->
            <do_if value="@$station.isblacklisted.{blacklisttype.objectactivity}.{blacklistgroup.civilian}.{$ship}">
              <set_value name="$isBlacklisted" exact="true"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (station blacklisted)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- Check sector blacklist (sector activity) -->
            <do_if value="not $isBlacklisted and @$station.sector.isblacklisted.{blacklisttype.sectoractivity}.{blacklistgroup.civilian}.{$ship}">
              <set_value name="$isBlacklisted" exact="true"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (sector activity blacklisted)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- Check sector blacklist (travel) -->
            <do_if value="not $isBlacklisted and @$station.sector.isblacklisted.{blacklisttype.sectortravel}.{blacklistgroup.civilian}.{$ship}">
              <set_value name="$isBlacklisted" exact="true"/>
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (sector travel blacklisted)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- ✅ VALIDATION: Check if path to station goes through blacklisted sectors -->
            <!-- Uses blacklist-aware gatedistance - returns -1 if path blocked by blacklisted sector -->
            <!-- Vanilla pattern: order.dock.xml:503 -->
            <do_if value="not $isBlacklisted">
              <set_value name="$pathDistance" exact="$ship.gatedistance.{$station.sector}.{blacklistgroup.civilian}.{$ship}"/>
              
              <do_if value="$pathDistance lt 0">
                <!-- Path goes through blacklisted sector or no path exists -->
                <set_value name="$isBlacklisted" exact="true"/>
                <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                  <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (path goes through blacklisted sector)'" chance="100"/>
                </do_if>
              </do_if>
            </do_if>
            
            <!-- ✅ VALIDATION: Check operational status -->
            <set_value name="$isOperational" exact="$station.isoperational and not @$station.isclosingdown"/>
            <do_if value="not $isBlacklisted and not $isOperational">
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (not operational)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- ✅ VALIDATION: Check docking permission -->
            <set_value name="$canDock" exact="$station.dockingallowed.{$ship}"/>
            <do_if value="not $isBlacklisted and $isOperational and not $canDock">
              <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Rejected ' + @$station.knownname + ' (docking not allowed)'" chance="100"/>
              </do_if>
            </do_if>
            
            <!-- Only consider valid, non-blacklisted, operational, dockable offers -->
            <do_if value="not $isBlacklisted and $isOperational and $canDock and $offer.available">
              <set_value name="$tradeAmount" exact="[$selectedAmount, $offer.amount].min"/>
              <set_value name="$profit" exact="$offer.unitprice * $tradeAmount"/>
              
              <do_if value="$profit gt $bestPrice">
                <set_value name="$bestOffer" exact="$offer"/>
                <set_value name="$bestPrice" exact="$profit"/>
                <set_value name="$bestAmount" exact="$tradeAmount"/>
                
                <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
                  <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Best offer now: ' + @$station.knownname + ' - ' + $offer.ware.name + ' x' + $tradeAmount + ' @ ' + $offer.unitprice + ' Cr/unit (profit: ' + $profit + ' Cr)'" chance="100"/>
                </do_if>
              </do_if>
            </do_if>
          </do_all>
          
          <!-- Execute best sell if found -->
          <do_if value="$bestOffer and $bestPrice gt $minProfit">
            <!-- ✅ CRITICAL: Validate offer is STILL valid before creating order -->
            <!-- Offers can become invalid between search and order creation -->
            <set_value name="$offerStillValid" exact="$bestOffer.available and $bestOffer.amount gt 0"/>
            
            <do_if value="$offerStillValid">
              <debug_text text="'[GalaxyTrader MK3] ' + $ship.knownname + ' found sell opportunity'" chance="100"/>
              
              <!-- Create trade order with blacklist routing enabled -->
              <!-- internal="true" ensures pathfinding routes around blacklisted sectors -->
              <create_trade_order object="$ship" tradeoffer="$bestOffer" amount="$bestAmount" immediate="false" internal="true"/>
              
              <!-- Signal back to AI script: Trade Found -->
              <signal_objects object="$ship" param="'GT_Trade_Found'"/>
            </do_if>
            <do_else>
              <!-- Offer became invalid - don't create order -->
              <debug_text text="'[GT-Sell] ' + $ship.idcode + ': Best offer became invalid before order creation - retrying'" chance="100"/>
              
              <!-- Signal back to AI script: No Trade Found (will retry) -->
              <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
            </do_else>
          </do_if>
          <do_else>
            <!-- Signal back to AI script: No Trade Found -->
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
          </do_else>
        </do_if>
        <do_else>
          <!-- Signal back to AI script: No Trade Found (no cargo) -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
        </do_else>
        
        <!-- CRITICAL: Clean up AI parameters -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
      </actions>
    </cue>
  </cues>
</mdscript>
