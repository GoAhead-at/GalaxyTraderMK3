<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GT_Trading_Search" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/md.xsd">
  <cues>
    <!-- ========================================
         GALAXY TRADER MK3 - SEARCH ENGINE
         Core trade route search and matching logic
         ======================================== -->
    
    <!-- Search for Trade Routes (MAIN SEARCH ENGINE) -->
    <cue name="SearchTradeRoutes" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- ✅ PERFORMANCE FIX: Receive parameters directly from event to prevent race conditions -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        
        <!-- Create faction priority text for debug output -->
        <set_value name="$factionPriorityText" exact="if $factionPriority == 0 then 'Player Only' else if $factionPriority == 1 then 'Foreign First' else 'Equal Priority'"/>
        
        <!-- Get distance penalty setting (0-100% converted to 0.0-2.0 multiplier) -->
        <set_value name="$distancePenaltyMultiplier" exact="1.0"/> <!-- Default: 50% = 1.0 -->
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$DistancePenalty?">
          <!-- Convert 0-100% to 0.0-2.0: 0%=0.0, 50%=1.0, 100%=2.0 -->
          <set_value name="$distancePenaltyMultiplier" exact="global.$GT_AIParameters.{$ship}.$DistancePenalty / 50.0"/>
        </do_if>

        <!-- Resolve pilot skill and apply feature gates + level-based thresholds -->
        <run_actions ref="md.GT_Ship_Management.Calculate_Skill_Level" result="$skillInfo">
          <param name="ship" value="$ship"/>
        </run_actions>
        <set_value name="$skillLevel" exact="if $skillInfo? and $skillInfo.$Level? then $skillInfo.$Level else 1"/>

        <!-- Feature gates by skill level -->
        <set_value name="$gt_ThreatIntel" exact="$skillLevel ge 6"/>
        <set_value name="$gt_SatelliteIntel" exact="$skillLevel ge 9"/>
        <set_value name="$gt_FleetCoord" exact="$skillLevel ge 12"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$skillLevel ge 15"/>

        <!-- Level-based ROI and Absolute Profit thresholds (0.5x @Lv1 → 2.0x @Lv15) -->
        <set_value name="$roiMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$profitMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$minROI" exact="$minROI * $roiMultiplier"/>
        <set_value name="$minAbsoluteProfit" exact="($minAbsoluteProfit * $profitMultiplier)i"/>
        
        <!-- DEBUG: Trade search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <set_value name="$pilotInfo" exact="'No Pilot'"/>
          <do_if value="$ship.pilot">
            <set_value name="$shownSkill" exact="1"/>
            <do_if value="global.$GT_Pilots.{$ship.pilot}? and global.$GT_Pilots.{$ship.pilot}.$Level?">
              <set_value name="$shownSkill" exact="global.$GT_Pilots.{$ship.pilot}.$Level"/>
            </do_if>
            <do_elseif value="$ship.pilot.skill.management?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.management"/>
            </do_elseif>
            <do_elseif value="$ship.pilot.skill.piloting?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.piloting"/>
            </do_elseif>
            <set_value name="$pilotInfo" exact="$ship.pilot.name + ' (Skill: ' + $shownSkill + ')'"/>
          </do_if>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === TRADE SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nPilot: ' + $pilotInfo + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin ROI: ' + $minROI + '%' + '\nMin Absolute Profit: ' + ($minAbsoluteProfit / 100) + ' Cr' + '\nShip Cargo: ' + ($ship.cargo.capacity.all - $ship.cargo.free.all) + '/' + $ship.cargo.capacity.all" chance="100"/>
        </do_if>
        
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== PHASE 1: CHECK TRADE CACHE WITH AGE VALIDATION ===== -->
        <signal_cue_instantly cue="SearchCachedTrades" param="table[
          $Ship = $ship,
          $MaxDistance = $maxDistance,
          $MinROI = $minROI,
          $MinAbsoluteProfit = $minAbsoluteProfit,
          $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
          $SkillLevel = $skillLevel,
          $AllowIllegal = $params.$AllowIllegal
        ]"/>
        
        <!-- Extract cache results from global return variable -->
        <set_value name="$foundCachedTrade" exact="@global.$GT_SearchResult.$Found"/>
        <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
        <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
        
        <!-- ===== PHASE 2: LIVE TRADE SEARCH (if no good cached trade) ===== -->
        <do_if value="not $foundCachedTrade">
          <!-- DEBUG: No cached trade, performing live search -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') No suitable cached trade found, performing live market search'" chance="100"/>
          </do_if>
        
          <!-- Perform live search -->
          <signal_cue_instantly cue="SearchLiveTrades" param="table[
            $Ship = $ship,
            $MaxDistance = $maxDistance,
            $MinROI = $minROI,
            $MinAbsoluteProfit = $minAbsoluteProfit,
            $FactionPriority = $factionPriority,
            $FactionPriorityText = $factionPriorityText,
            $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
            $SkillLevel = $skillLevel,
            $ThreatIntel = $gt_ThreatIntel,
            $FleetCoord = $gt_FleetCoord,
            $AdvancedAnalytics = $gt_AdvancedAnalytics
          ]"/>
          
          <!-- Extract live search results from global return variable -->
          <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
          <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
          <set_value name="$stationsEvaluated" exact="@global.$GT_SearchResult.$StationsEvaluated"/>
          <set_value name="$offersFound" exact="@global.$GT_SearchResult.$OffersFound"/>
        </do_if>  <!-- End of live trade search -->
        
        <!-- Execute best trade if found -->
        <do_if value="$bestTrade">
          <!-- DEBUG: Trade execution with full details -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📊 BEST TRADE SELECTED:' + '\n  📦 Ware: ' + $bestTrade.$BuyOffer.ware.name + ' (x' + $bestTrade.$Amount + ')' + '\n  📍 BUY from: ' + $bestTrade.$BuyOffer.owner.knownname + ' @ ' + ($bestTrade.$BuyPrice / 100) + ' Cr' + '\n  📍 SELL to: ' + $bestTrade.$SellOffer.owner.knownname + ' @ ' + ($bestTrade.$SellPrice / 100) + ' Cr' + '\n  🚀 Distance: ' + $bestTrade.$Distance + ' jumps' + '\n  💰 Profit: ' + ($bestTrade.$Profit / 100) + ' Cr' + '\n  📈 ROI: ' + @$bestTrade.$ROI + '%' + '\n  📊 Score: ' + $bestTrade.$Score + '\n  ⚠ Risk: ' + $bestTrade.$Risk" chance="100"/>
          </do_if>
          
          <!-- ✅ OPTIMIZED: Reserve trade route for fleet coordination (inline conflict resolution done during search) -->
          <do_if value="global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
            <do_if value="not global.$GT_ActiveTradeReservations?">
              <set_value name="global.$GT_ActiveTradeReservations" exact="table[]"/>
            </do_if>
            
            <set_value name="global.$GT_ActiveTradeReservations.{$ship}" exact="table[
              $BuyStation = $bestTrade.$BuyOffer.owner,
              $SellStation = $bestTrade.$SellOffer.owner,
              $Ware = $bestTrade.$BuyOffer.ware,
              $Timestamp = player.age
            ]"/>
          </do_if>
          
          <!-- Execute trade -->
          <do_if value="true">
            <!-- Signal execution module -->
            <signal_cue_instantly cue="md.GT_Trading_Execution.ExecuteTrade" param="table[
              $Ship = $ship,
              $Trade = $bestTrade
            ]"/>
            
            <!-- Signal back to AI script: Trade Found -->
            <signal_objects object="$ship" param="'GT_Trade_Found'"/>
          </do_if>
        </do_if>
        <do_else>
          <!-- DEBUG: No trades found -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === NO TRADES FOUND ANALYSIS ===' + '\nShip: ' + $ship.knownname + '\nSector: ' + $ship.sector.knownname + '\nSearch params: Dist=' + $maxDistance + ', MinROI=' + $minROI + '%, MinAbsoluteProfit=' + ($minAbsoluteProfit / 100) + ' Cr'" chance="100"/>
          </do_if>
          
          <debug_text text="'[GalaxyTrader MK3] No profitable trades found for ' + $ship.knownname" chance="100"/>
          
          <!-- Signal back to AI script: No Trade Found -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
        </do_else>
        
        <!-- CRITICAL: Release search lock for this ship -->
        <do_if value="global.$GT_SearchLocks.{$ship}?">
          <remove_value name="global.$GT_SearchLocks.{$ship}"/>
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Search lock released'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- CRITICAL: Clean up AI parameters for this ship -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
        
        <!-- ✅ PERFORMANCE FIX: Mark search complete and process next ship in queue -->
        <do_if value="global.$GT_SearchQueue.$Params? and global.$GT_SearchQueue.$Params.{$ship}?">
          <remove_value name="global.$GT_SearchQueue.$Params.{$ship}"/>
        </do_if>
        
        <!-- Decrement active search counter -->
        <set_value name="global.$GT_SearchQueue.$ActiveSearches" operation="subtract"/>
        
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🔍 SEARCH COMPLETE (active: ' + global.$GT_SearchQueue.$ActiveSearches + '/' + global.$GT_SearchQueue.$MaxConcurrent + ', queued: ' + global.$GT_SearchQueue.$Ships.count + ')'" chance="100"/>
        </do_if>
        
        <!-- Continue processing search queue if there are ships waiting -->
        <do_if value="global.$GT_SearchQueue.$Ships.count gt 0">
          <signal_cue_instantly cue="md.GT_Trading_Queue.ProcessSearchQueue"/>
        </do_if>
      </actions>
    </cue>
    
    <!-- Search Cached Trades (Sub-module) -->
    <cue name="SearchCachedTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$allowIllegal" exact="@$params.$AllowIllegal"/> <!-- Default to false if not provided -->
        
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- Cache age check removed - not needed, individual entries have $Timestamp -->
        <set_value name="$cacheAge" exact="0s"/>
        
        <!-- ✅ CACHE REPLENISHMENT: Force live search if cache too small -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count lt 10">
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 1">
            <debug_text text="'[GT-Cache] ⚠ Cache too small (' + global.$GT_TradeCache.count + ' entries) - forcing live search to replenish'" chance="100"/>
          </do_if>
          
          <!-- Return null to trigger live search -->
          <signal_cue_instantly cue="$params.$ResultCue" param="$bestTrade"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- ✅ LIST-BASED CACHE: Iterate through flat list of trade entries -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count gt 0">
          <set_value name="$cacheMaxAge" exact="600s"/>  <!-- 10 minutes -->
          <set_value name="$checkedEntries" exact="0"/>
          <set_value name="$validEntries" exact="0"/>
          <set_value name="$expiredEntries" exact="0"/>
          
          <!-- DEBUG: Log cache status -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
            <debug_text text="'[GT-Cache-DEBUG] Cache has ' + global.$GT_TradeCache.count + ' trade entries'" chance="100"/>
          </do_if>
          
          <!-- Iterate through flat list of cached trades -->
          <do_all exact="global.$GT_TradeCache.count" counter="$i">
            <set_value name="$cacheEntry" exact="global.$GT_TradeCache.{$i}"/>
            <set_value name="$checkedEntries" exact="$checkedEntries + 1"/>
            
            <!-- Validate cache entry structure -->
            <do_if value="not $cacheEntry? or not $cacheEntry.$BuyOffer? or not $cacheEntry.$SellOffer? or not $cacheEntry.$Timestamp?">
              <continue/>
            </do_if>
            
            <!-- Check if entry is too old (TTL filter) -->
            <set_value name="$entryAge" exact="player.age - $cacheEntry.$Timestamp"/>
            <do_if value="$entryAge gt $cacheMaxAge">
              <set_value name="$expiredEntries" exact="$expiredEntries + 1"/>
              <continue/>
            </do_if>
            
            <!-- Validate offers still exist and are available -->
            <do_if value="not $cacheEntry.$BuyOffer.exists or not $cacheEntry.$SellOffer.exists">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers are still available (not out of stock) -->
            <do_if value="not $cacheEntry.$BuyOffer.available or not $cacheEntry.$SellOffer.available">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers have sufficient amount -->
            <do_if value="$cacheEntry.$BuyOffer.amount lt $cacheEntry.$Amount or $cacheEntry.$SellOffer.amount lt $cacheEntry.$Amount">
              <continue/>
            </do_if>
            
            <!-- Validate stations still operational -->
            <do_if value="not @$cacheEntry.$BuyOffer.owner.isoperational or not @$cacheEntry.$SellOffer.owner.isoperational">
              <continue/>
            </do_if>
            
            <!-- ✅ THREAT AVOIDANCE: Check if sectors are safe enough for this ship -->
            <do_if value="@global.$GT_GlobalSettings.$ThreatAvoidance.$Enabled">
              <set_value name="$skipThreat" exact="false"/>
              <set_value name="$riskTolerance" exact="@global.$GT_AIParameters.{$ship}.$RiskTolerance"/>
              <do_if value="not $riskTolerance?">
                <set_value name="$riskTolerance" exact="0"/> <!-- Default: avoid all threats -->
              </do_if>
              
              <!-- Check buy station sector -->
              <set_value name="$buySectorMacro" exact="@$cacheEntry.$BuyOffer.owner.sector.macro.id"/>
              <do_if value="$buySectorMacro and global.$GT_ThreatIntelligence? and global.$GT_ThreatIntelligence.{$buySectorMacro}?">
                <set_value name="$threatLevel" exact="@global.$GT_ThreatIntelligence.{$buySectorMacro}.$ThreatLevel"/>
                <do_if value="$threatLevel gt $riskTolerance">
                  <set_value name="$skipThreat" exact="true"/>
                </do_if>
              </do_if>
              
              <!-- Check sell station sector -->
              <do_if value="not $skipThreat">
                <set_value name="$sellSectorMacro" exact="@$cacheEntry.$SellOffer.owner.sector.macro.id"/>
                <do_if value="$sellSectorMacro and global.$GT_ThreatIntelligence? and global.$GT_ThreatIntelligence.{$sellSectorMacro}?">
                  <set_value name="$threatLevel" exact="@global.$GT_ThreatIntelligence.{$sellSectorMacro}.$ThreatLevel"/>
                  <do_if value="$threatLevel gt $riskTolerance">
                    <set_value name="$skipThreat" exact="true"/>
                  </do_if>
                </do_if>
              </do_if>
              
              <!-- Skip cached trade if either sector is too dangerous -->
              <do_if value="$skipThreat">
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⛔ Skipping cached trade (dangerous sector, threat exceeds risk tolerance)'" chance="100"/>
                </do_if>
                <continue/>
              </do_if>
            </do_if>
            
            <!-- ✅ ILLEGAL WARE FILTER: Skip illegal wares if ship doesn't allow illegal trades -->
            <do_if value="not $allowIllegal and $cacheEntry.$BuyOffer.ware.illegal">
              <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Cache] ⛔ Skipping cached trade for ' + $cacheEntry.$BuyOffer.ware.name + ' (illegal ware, AllowIllegal=' + $allowIllegal + ') - continuing to next entry'" chance="100"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate prices haven't changed unfavorably (allow 10% variance) -->
            <!-- ❌ REMOVED: Stale price check was filtering out valid entries before querying fresh offers!
                 The old logic read prices from cached tradeoffer objects which are stale.
                 We should only validate against fresh prices AFTER querying fresh offers. -->
            
            <!-- Check distance constraint -->
            <do_if value="$cacheEntry.$Distance? and $cacheEntry.$Distance gt $maxDistance">
              <continue/>
            </do_if>
            
            <!-- Check profit constraint -->
            <do_if value="$cacheEntry.$Profit? and $cacheEntry.$Profit lt $minAbsoluteProfit">
              <continue/>
            </do_if>
            
            <!-- Calculate current score with distance penalty -->
            <set_value name="$adjustedDistance" exact="$cacheEntry.$Distance * $distancePenaltyMultiplier"/>
            <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($cacheEntry.$Profit / $adjustedDistance) else $cacheEntry.$Profit"/>
            
            <!-- ✅ DEBUG: Log each entry being considered -->
            <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <set_value name="$willQuery" exact="if $efficiency gt $bestScore then 'YES' else 'NO'"/>
              <debug_text text="'[GT-Cache-DEBUG] Entry ' + $i + ': Ware=' + @$cacheEntry.$WareName + ', CachedEff=' + $efficiency + ', BestScore=' + $bestScore + ', WillQuery=' + $willQuery" chance="100"/>
            </do_if>
            
            <!-- ✅ CACHE AS HINT: Re-query FRESH trade offers from the cached stations -->
            <do_if value="$efficiency gt $bestScore">
              <!-- ✅ CRITICAL FIX: Get ware and station objects from cached IDs, not stale tradeoffer references! -->
              <!-- Ware objects don't go stale, so we can use the cached ware object directly -->
              <set_value name="$ware" exact="$cacheEntry.$BuyOffer.ware"/>
              
              <!-- Stations: Try using cached station references first (faster) -->
              <set_value name="$buyStation" exact="$cacheEntry.$BuyOffer.owner"/>
              <set_value name="$sellStation" exact="$cacheEntry.$SellOffer.owner"/>
              
              <!-- Validate stations still exist and are operational -->
              <do_if value="$buyStation.exists and $buyStation.isoperational and $sellStation.exists and $sellStation.isoperational and $ware">
                <!-- Query FRESH sell offer from buy station (ship buys from their sell offer) -->
                <find_sell_offer seller="$buyStation" wares="$ware" result="$freshBuyOffer">
                  <match_seller tradesknownto="$ship.owner"/>
                </find_sell_offer>
                
                <!-- Query FRESH buy offer from sell station (ship sells to their buy offer) -->
                <find_buy_offer buyer="$sellStation" wares="$ware" result="$freshSellOffer">
                  <match_buyer tradesknownto="$ship.owner"/>
                </find_buy_offer>
              </do_if>
              <do_else>
                <!-- Stations or ware no longer exist/operational - skip this entry -->
                <set_value name="$freshBuyOffer" exact="null"/>
                <set_value name="$freshSellOffer" exact="null"/>
                
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <set_value name="$buyExists" exact="if $buyStation.exists then '1' else '0'"/>
                  <set_value name="$sellExists" exact="if $sellStation.exists then '1' else '0'"/>
                  <debug_text text="'[GT-Cache] ⚠ Cached stations no longer valid: Buy=' + $buyExists + ', Sell=' + $sellExists" chance="100"/>
                </do_if>
              </do_else>
              
              <!-- Validate fresh offers exist and are available -->
              <do_if value="$freshBuyOffer and $freshBuyOffer.available and $freshSellOffer and $freshSellOffer.available">
                <!-- Calculate fresh prices and profit -->
                <set_value name="$freshBuyPrice" exact="$freshBuyOffer.unitprice"/>
                <set_value name="$freshSellPrice" exact="$freshSellOffer.unitprice"/>
                <set_value name="$freshMaxAmount" exact="[$freshBuyOffer.amount, $freshSellOffer.amount, $ship.cargo.free.all].min"/>
                
                <!-- Skip if no tradeable amount -->
                <do_if value="$freshMaxAmount gt 0">
                  <set_value name="$freshProfit" exact="($freshSellPrice - $freshBuyPrice) * $freshMaxAmount"/>
                  
                  <!-- ✅ CORRECT LOGIC: Calculate fresh ROI and check if it meets cache threshold -->
                  <do_if value="$freshProfit gt 0">
                    <!-- Calculate fresh ROI as percentage -->
                    <set_value name="$freshROI" exact="(($freshSellPrice - $freshBuyPrice) * 100) / $freshBuyPrice"/>
                    
                    <!-- Get cache threshold from global settings (default 20%) -->
                    <set_value name="$cacheThreshold" exact="20"/>
                    <do_if value="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold?">
                      <set_value name="$cacheThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
                    </do_if>
                    
                    <!-- Check if fresh ROI still meets or exceeds cache threshold -->
                    <do_if value="$freshROI ge $cacheThreshold and $freshProfit ge $minAbsoluteProfit">
                      <!-- ✅ CACHE HIT: Fresh trade still meets acceptance criteria! -->
                      <set_value name="$bestScore" exact="$efficiency"/>
                      <set_value name="$bestTrade" exact="table[
                        $BuyOffer = $freshBuyOffer,
                        $SellOffer = $freshSellOffer,
                        $Amount = $freshMaxAmount,
                        $Profit = $freshProfit,
                        $ROI = $freshROI,
                        $BuyPrice = $freshBuyPrice,
                        $SellPrice = $freshSellPrice,
                        $Distance = $cacheEntry.$Distance,
                        $Score = $efficiency,
                        $Risk = 0
                      ]"/>
                      <set_value name="$foundCachedTrade" exact="true"/>
                      <set_value name="$validEntries" exact="$validEntries + 1"/>
                      
                      <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                        <debug_text text="'[GT-Cache] ✅ FRESH offers validated for cached trade: ' + $ware.name + ' (CachedROI=' + $cacheEntry.$ROI + '%, FreshROI=' + $freshROI + '%, Threshold=' + $cacheThreshold + '%, Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                      </do_if>
                    </do_if>
                    <do_else>
                      <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                        <debug_text text="'[GT-Cache] ⚠ Fresh trade below threshold: ' + $ware.name + ' (FreshROI=' + $freshROI + '%, Threshold=' + $cacheThreshold + '%, Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                      </do_if>
                    </do_else>
                  </do_if>
                  <do_else>
                    <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                      <debug_text text="'[GT-Cache] ⚠ Fresh trade not profitable: ' + $ware.name + ' (Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                    </do_if>
                  </do_else>
                </do_if>
              </do_if>
              <do_else>
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⚠ Fresh offers not available for cached trade: ' + $ware.name" chance="100"/>
                </do_if>
              </do_else>
            </do_if>
          </do_all>
          
          <!-- DEBUG: Log cache retrieval results -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled">
            <do_if value="@global.$GT_Config.$Debug.$LogLevel ge 2">
              <do_if value="$foundCachedTrade">
                <debug_text text="'[GT-Cache] ✅ Cache HIT for ' + $ship.idcode + ': Found cached trade (Score: ' + $bestScore + ', checked: ' + $checkedEntries + ', valid: ' + $validEntries + ', expired: ' + $expiredEntries + ')'" chance="100"/>
              </do_if>
              <do_else>
                <debug_text text="'[GT-Cache] ❌ Cache MISS for ' + $ship.idcode + ': No valid cached trades (checked: ' + $checkedEntries + ', expired: ' + $expiredEntries + ')'" chance="100"/>
              </do_else>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- Return results via global variable -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $Found = $foundCachedTrade,
          $BestTrade = $bestTrade,
          $BestScore = $bestScore
        ]"/>
      </actions>
    </cue>
    
    <!-- Search Live Trades (Sub-module) -->
    <cue name="SearchLiveTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <!-- Extract all parameters -->
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        <set_value name="$factionPriorityText" exact="$params.$FactionPriorityText"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$gt_ThreatIntel" exact="$params.$ThreatIntel"/>
        <set_value name="$gt_FleetCoord" exact="$params.$FleetCoord"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$params.$AdvancedAnalytics"/>
        
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$stationsEvaluated" exact="0"/>
        <set_value name="$offersFound" exact="0"/>
        
        <!-- ===== DETERMINE HOME SECTOR ===== -->
        <set_value name="$homeBase" exact="null"/>
        <set_value name="$homeBaseSource" exact="'unknown'"/>
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
          <set_value name="$homeBaseSource" exact="'order parameters'"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists">
            <set_value name="$homeBaseSource" exact="'defaultorder'"/>
          </do_if>
          <do_else>
            <set_value name="$homeBase" exact="$ship.sector"/>
            <set_value name="$homeBaseSource" exact="'ship.sector (fallback)'"/>
          </do_else>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🏠 Home base: ' + @$homeBase.knownname + ' (sector: ' + $homeSector.knownname + ') [source: ' + $homeBaseSource + ']'" chance="100"/>
        </do_if>
        
        <!-- ===== GET STATIONS WITH FACTION PRIORITY ===== -->
        <set_value name="$foreignStations" exact="[]"/>
        <set_value name="$playerStations" exact="[]"/>
        
        <do_if value="$factionPriority != 0">
          <find_station space="player.galaxy" name="$foreignStations" multiple="true" knownto="$ship.owner" 
                        checkoperational="true" sortbygatedistanceto="$homeSector">
            <match_relation_to object="$ship" relation="dock" comparison="ge"/>
            <match canbuildships="false"/>
            <match owner="faction.player" negate="true"/>
          </find_station>
        </do_if>
        
        <find_station space="player.galaxy" name="$playerStations" multiple="true" owner="faction.player" 
                      checkoperational="true" sortbygatedistanceto="$homeSector" knownto="$ship.owner">
          <match canbuildships="false"/>
        </find_station>
        
        <!-- ✅ PERFORMANCE FIX: Merge stations without re-sorting (find_station already sorted them with sortbygatedistanceto) -->
        <set_value name="$stations" exact="[]"/>
        <do_if value="$factionPriority == 0">
          <!-- Player only: use as-is (already sorted) -->
          <set_value name="$stations" exact="$playerStations"/>
        </do_if>
        <do_else>
          <!-- Merge foreign (already sorted) + player (already sorted) = roughly sorted list -->
          <!-- Both lists are pre-sorted by find_station with sortbygatedistanceto, so simple append is sufficient -->
          <do_if value="$factionPriority != 0">
            <do_all exact="$foreignStations.count" counter="$fs">
              <append_to_list name="$stations" exact="$foreignStations.{$fs}"/>
            </do_all>
          </do_if>
          <do_all exact="$playerStations.count" counter="$ps">
            <append_to_list name="$stations" exact="$playerStations.{$ps}"/>
          </do_all>
        </do_else>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Merged ' + $stations.count + ' stations (pre-sorted by distance)'" chance="100"/>
        </do_if>
        
        <!-- ===== COLLECT ALL TRADE OFFERS ===== -->
        <set_value name="$allSellOffers" exact="[]"/>
        <set_value name="$allBuyOffers" exact="[]"/>
        <set_value name="$totalFilteredIllegal" exact="0"/>
        <set_value name="$stationsSkipped" exact="0"/>
        <set_value name="$tradesRejectedDocking" exact="0"/>
        
        <!-- Get AI parameters for filtering -->
        <set_value name="$wareBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
        <set_value name="$allowIllegal" exact="@global.$GT_AIParameters.{$ship}.$AllowIllegal"/>
        
        <!-- Collect offers from all stations -->
        <do_all exact="$stations.count" counter="$i">
          <set_value name="$station" exact="$stations.{$i}"/>
          <set_value name="$stationDistance" exact="@$homeSector.gatedistance.{$station.sector}"/>
          <do_if value="not $stationDistance?">
            <set_value name="$stationDistance" exact="-1"/>
          </do_if>
          
          <do_if value="$stationDistance lt 0">
            <set_value name="$stationsSkipped" operation="add"/>
            <continue/>
          </do_if>
          
          <!-- Early exit when exceeding max distance -->
          <do_if value="$stationDistance gt $maxDistance">
            <set_value name="$stationsSkipped" exact="$stationsSkipped + ($stations.count - $i + 1)"/>
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ EARLY EXIT: Reached distance limit at station ' + $i + '/' + $stations.count" chance="100"/>
            </do_if>
            <break/>
          </do_if>
          
          <!-- Validate station (includes threat avoidance check) -->
          <run_actions ref="md.GT_Utilities.GT_ValidateStation" result="$stationValid">
            <param name="station" value="$station"/>
            <param name="ship" value="$ship"/>
          </run_actions>
          
          <do_if value="$stationValid">
            <set_value name="$stationsEvaluated" operation="add"/>
            
            <!-- Get offers -->
            <find_buy_offer buyer="$station" result="$buyOffers" multiple="true">
              <match_buyer tradesknownto="$ship.owner"/>
            </find_buy_offer>
            
            <find_sell_offer seller="$station" result="$sellOffers" multiple="true">
              <match_seller tradesknownto="$ship.owner"/>
            </find_sell_offer>
            
            <set_value name="$stationOffers" exact="$buyOffers.count + $sellOffers.count"/>
            <set_value name="$offersFound" exact="$offersFound + $stationOffers"/>
            
            <!-- Filter offers -->
            <set_value name="$filteredIllegalCount" exact="0"/>
            
            <do_all exact="$sellOffers.count" counter="$j">
              <set_value name="$offer" exact="$sellOffers.{$j}"/>
              <set_value name="$isValid" exact="true"/>
              
              <!-- Filter checks -->
              <do_if value="$offer.ismission or $offer.iswareexchange or not $offer.available">
                <set_value name="$isValid" exact="false"/>
              </do_if>
              
              <!-- Faction restrictions -->
              <do_if value="$isValid and $offer.restriction.factions.count gt 0">
                <set_value name="$isRestricted" exact="false"/>
                <do_if value="$offer.restriction.inverted == 0">
                  <do_if value="not $offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_if>
                <do_else>
                  <do_if value="$offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_else>
                <do_if value="$isRestricted">
                  <set_value name="$isValid" exact="false"/>
                </do_if>
              </do_if>
              
              <!-- Illegal ware check -->
              <set_value name="$isIllegal" exact="false"/>
              <do_if value="$isValid and not $allowIllegal">
                <do_if value="$offer.seller.owner and $offer.seller.owner != $ship.owner">
                  <do_if value="$offer.ware.illegalto.{$offer.seller.owner}.{$ship.owner}">
                    <set_value name="$isIllegal" exact="true"/>
                  </do_if>
                </do_if>
              </do_if>
              
              <do_if value="$isValid and not $isIllegal">
                <append_to_list name="$allSellOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$filteredIllegalCount" operation="add"/>
              </do_else>
            </do_all>
            
            <do_all exact="$buyOffers.count" counter="$j">
              <set_value name="$offer" exact="$buyOffers.{$j}"/>
              <set_value name="$isValid" exact="true"/>
              
              <!-- Filter checks -->
              <do_if value="$offer.ismission or $offer.iswareexchange or not $offer.available">
                <set_value name="$isValid" exact="false"/>
              </do_if>
              
              <!-- Faction restrictions -->
              <do_if value="$isValid and $offer.restriction.factions.count gt 0">
                <set_value name="$isRestricted" exact="false"/>
                <do_if value="$offer.restriction.inverted == 0">
                  <do_if value="not $offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_if>
                <do_else>
                  <do_if value="$offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_else>
                <do_if value="$isRestricted">
                  <set_value name="$isValid" exact="false"/>
                </do_if>
              </do_if>
              
              <!-- Illegal ware check -->
              <set_value name="$isIllegal" exact="false"/>
              <do_if value="$isValid and not $allowIllegal">
                <do_if value="$offer.buyer.owner and $offer.buyer.owner != $ship.owner">
                  <do_if value="$offer.ware.illegalto.{$offer.buyer.owner}.{$ship.owner}">
                    <set_value name="$isIllegal" exact="true"/>
                  </do_if>
                </do_if>
              </do_if>
              
              <do_if value="$isValid and not $isIllegal">
                <append_to_list name="$allBuyOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$filteredIllegalCount" operation="add"/>
              </do_else>
            </do_all>
            
            <set_value name="$totalFilteredIllegal" exact="$totalFilteredIllegal + $filteredIllegalCount"/>
          </do_if>
        </do_all>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Total offers collected: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
        </do_if>
        
        <!-- ===== CROSS-STATION TRADE MATCHING ===== -->
        <do_if value="$allSellOffers.count gt 0 and $allBuyOffers.count gt 0">
          
          <!-- ✅ OPTIMIZATION: Calculate available money ONCE (before loops, not inside) -->
          <set_value name="$availableMoney" exact="player.money"/>
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists and $homeBase.isclass.station">
            <set_value name="$availableMoney" exact="$homeBase.money"/>
          </do_if>
          
          <!-- ✅ OPTIMIZATION: Pre-calculate station distances to avoid repeated lookups -->
          <set_value name="$stationDistanceCache" exact="table[]"/>
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$sellStation" exact="$allSellOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$sellStation}?">
              <set_value name="$stationDistanceCache.{$sellStation}" exact="@$homeSector.gatedistance.{$sellStation.sector}"/>
            </do_if>
          </do_all>
          <do_all exact="$allBuyOffers.count" counter="$i">
            <set_value name="$buyStation" exact="$allBuyOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$buyStation}?">
              <set_value name="$stationDistanceCache.{$buyStation}" exact="@$homeSector.gatedistance.{$buyStation.sector}"/>
            </do_if>
          </do_all>
          
          <!-- Index offers by ware -->
          <set_value name="$sellOffersByWare" exact="table[]"/>
          <set_value name="$buyOffersByWare" exact="table[]"/>
          
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$offer" exact="$allSellOffers.{$i}"/>
            <do_if value="not $sellOffersByWare.{$offer.ware}?">
              <set_value name="$sellOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$sellOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <do_all exact="$allBuyOffers.count" counter="$j">
            <set_value name="$offer" exact="$allBuyOffers.{$j}"/>
            <do_if value="not $buyOffersByWare.{$offer.ware}?">
              <set_value name="$buyOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$buyOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <set_value name="$crossStationBestTrade" exact="null"/>
          <set_value name="$crossStationBestScore" exact="0"/>
          
          <!-- ✅ OPTIMIZED: Dual-tracking for inline conflict resolution -->
          <set_value name="$nonConflictedBestTrade" exact="null"/>
          <set_value name="$nonConflictedBestScore" exact="0"/>
          
          <!-- Match offers of same ware -->
          <do_all exact="$sellOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$sellOffersByWare.keys.{$wareIdx}"/>
            
            <do_if value="$buyOffersByWare.{$ware}?">
              <set_value name="$sellOffersForWare" exact="$sellOffersByWare.{$ware}"/>
              <set_value name="$buyOffersForWare" exact="$buyOffersByWare.{$ware}"/>
              
              <do_all exact="$sellOffersForWare.count" counter="$i">
                <set_value name="$sellOffer" exact="$sellOffersForWare.{$i}"/>
                
                <do_all exact="$buyOffersForWare.count" counter="$j">
                  <set_value name="$buyOffer" exact="$buyOffersForWare.{$j}"/>
                  
                  <!-- Different stations only -->
                  <do_if value="$sellOffer.owner != $buyOffer.owner">
                    <!-- CRITICAL: Check if ship can dock at BOTH stations (buy and sell) -->
                    <set_value name="$canDockAtBuyStation" exact="$sellOffer.owner.dockingallowed.{$ship}"/>
                    <set_value name="$canDockAtSellStation" exact="$buyOffer.owner.dockingallowed.{$ship}"/>
                    
                    <do_if value="not $canDockAtBuyStation or not $canDockAtSellStation">
                      <!-- Ship cannot dock at one or both stations - skip this trade -->
                      <set_value name="$tradesRejectedDocking" operation="add"/>
                      <continue/>
                    </do_if>
                    
                    <!-- Calculate trade details -->
                    <set_value name="$buyPrice" exact="$sellOffer.unitprice"/>
                    <set_value name="$sellPrice" exact="$buyOffer.unitprice"/>
                    
                    <!-- ✅ OPTIMIZED: Money calculated once outside loops, just use it -->
                    <!-- Calculate max affordable -->
                    <set_value name="$maxAffordable" exact="99999"/>
                    <do_if value="$buyPrice gt 0">
                      <set_value name="$maxAffordable" exact="($availableMoney / $buyPrice)i"/>
                    </do_if>
                    
                    <set_value name="$maxAmount" exact="[$sellOffer.amount, $buyOffer.amount, $ship.cargo.{$sellOffer.ware}.max, $maxAffordable].min"/>
                    
                    <do_if value="$maxAmount gt 0">
                      <set_value name="$investment" exact="$buyPrice * $maxAmount"/>
                      <set_value name="$revenue" exact="$sellPrice * $maxAmount"/>
                      <set_value name="$profit" exact="$revenue - $investment"/>
                      
                      <!-- ✅ OPTIMIZED: Inline ROI calculation (avoid run_actions overhead) -->
                      <set_value name="$roi" exact="if $investment gt 0 then (($profit * 100) / $investment) else 100"/>
                      
                      <!-- Check thresholds -->
                      <set_value name="$roiThreshold" exact="$minROI"/>
                      <set_value name="$profitThreshold" exact="$minAbsoluteProfit"/>
                      <do_if value="$gt_AdvancedAnalytics">
                        <set_value name="$roiThreshold" exact="$roiThreshold * 0.95"/>
                        <set_value name="$profitThreshold" exact="($profitThreshold * 0.95)i"/>
                      </do_if>
                      
                      <do_if value="$roi ge $roiThreshold and $profit ge $profitThreshold">
                        <!-- ✅ OPTIMIZED: Use cached distances instead of repeated lookups -->
                        <set_value name="$buyDistance" exact="@$stationDistanceCache.{$sellOffer.owner}"/>
                        <do_if value="not $buyDistance?">
                          <set_value name="$buyDistance" exact="-1"/>
                        </do_if>
                        
                        <do_if value="$sellOffer.owner.sector == $buyOffer.owner.sector">
                          <set_value name="$sellDistance" exact="0"/>
                        </do_if>
                        <do_else>
                          <!-- For inter-sector distance, still need to calculate (but only once per pair) -->
                          <set_value name="$sellDistance" exact="@$sellOffer.owner.sector.gatedistance.{$buyOffer.owner.sector}"/>
                          <do_if value="not $sellDistance?">
                            <set_value name="$sellDistance" exact="-1"/>
                          </do_if>
                        </do_else>
                        
                        <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
                          <continue/>
                        </do_if>
                        <set_value name="$totalDistance" exact="$buyDistance + $sellDistance"/>
                        
                        <do_if value="$totalDistance gt $maxDistance">
                          <continue/>
                        </do_if>
                        
                        <!-- Calculate efficiency with distance penalty -->
                        <set_value name="$adjustedDistance" exact="$totalDistance * $distancePenaltyMultiplier"/>
                        <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($profit / $adjustedDistance) else $profit"/>
                        
                        <!-- ✅ OPTIMIZED: Dual-tracking - always track best overall -->
                        <do_if value="$efficiency gt $crossStationBestScore">
                          <set_value name="$crossStationBestScore" exact="$efficiency"/>
                          
                          <set_value name="$crossStationBestTrade" exact="table[
                            $BuyOffer = $sellOffer,
                            $SellOffer = $buyOffer,
                            $Amount = $maxAmount,
                            $Profit = $profit,
                            $ROI = $roi,
                            $Score = $efficiency,
                            $BuyPrice = $buyPrice,
                            $SellPrice = $sellPrice,
                            $Distance = $totalDistance,
                            $Risk = 0
                          ]"/>
                          
                          <!-- ✅ OPTIMIZED: Inline conflict checking for fleet coordination -->
                          <set_value name="$routeConflicted" exact="false"/>
                          <do_if value="global.$GT_ActiveTradeReservations? and global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
                            <do_all exact="global.$GT_ActiveTradeReservations.keys.count" counter="$resIdx">
                              <set_value name="$otherShip" exact="global.$GT_ActiveTradeReservations.keys.{$resIdx}"/>
                              <set_value name="$otherRoute" exact="global.$GT_ActiveTradeReservations.{$otherShip}"/>
                              
                              <do_if value="$otherShip != $ship and $otherShip.exists">
                                <do_if value="$otherRoute.$BuyStation == $sellOffer.owner and 
                                              $otherRoute.$SellStation == $buyOffer.owner and 
                                              $otherRoute.$Ware == $sellOffer.ware">
                                  <set_value name="$routeConflicted" exact="true"/>
                                  <break/>
                                </do_if>
                              </do_if>
                            </do_all>
                          </do_if>
                          
                          <!-- ✅ OPTIMIZED: Also track best non-conflicted trade (no bubble sort!) -->
                          <do_if value="not $routeConflicted and $efficiency gt $nonConflictedBestScore">
                            <set_value name="$nonConflictedBestScore" exact="$efficiency"/>
                            <set_value name="$nonConflictedBestTrade" exact="$crossStationBestTrade"/>
                          </do_if>
                          
          <!-- Cache trade if Level 12+ -->
          <do_if value="$skillLevel ge 12 and global.$GT_GlobalSettings.$Fleet.$EnableTradeCache">
            <set_value name="$cacheProfitThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
            <do_if value="$roi ge $cacheProfitThreshold">
              <!-- ✅ FIX: Use string keys at ALL levels - X4 won't let you mix object keys with string keys -->
              <!-- Convert ware object to string using ware.id property -->
              <!-- ✅ LIST-BASED CACHE: Append trade entry to flat list -->
              <!-- Validate required data exists before caching -->
              <do_if value="$sellOffer.ware? and $sellOffer.owner? and $buyOffer.owner?">
                <!-- Ensure cache list exists -->
                <do_if value="not global.$GT_TradeCache?">
                  <set_value name="global.$GT_TradeCache" exact="[]"/>
                </do_if>
                
                <!-- Append trade entry as flat table to list -->
                <!-- ✅ CRITICAL: Store from SHIP's perspective!
                     Ship BUYS from station's SELL offer
                     Ship SELLS to station's BUY offer -->
                <append_to_list name="global.$GT_TradeCache" exact="table[
                  $WareId = $sellOffer.ware.id,
                  $WareName = $sellOffer.ware.name,
                  $SellStationId = $buyOffer.owner.idcode,
                  $BuyStationId = $sellOffer.owner.idcode,
                  $BuyOffer = $sellOffer,
                  $SellOffer = $buyOffer,
                  $Amount = $maxAmount,
                  $Profit = $profit,
                  $ROI = $roi,
                  $BuyPrice = $buyPrice,
                  $SellPrice = $sellPrice,
                  $Distance = $totalDistance,
                  $Timestamp = player.age
                ]"/>
                
                <!-- DEBUG: Log successful cache -->
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ✅ Trade cached: ' + $sellOffer.ware.name + ', ROI=' + $roi + '%, Profit=' + ($profit/100) + ' Cr, Distance=' + $totalDistance + ' jumps'" chance="100"/>
                </do_if>
              </do_if>
              <do_else>
                <!-- DEBUG: Log skipped cache (invalid data) -->
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⚠ Skipped caching trade with invalid data'" chance="100"/>
                </do_if>
              </do_else>
            </do_if>
          </do_if>
                        </do_if>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_all>
              </do_all>
            </do_if>
          </do_all>
          
          <!-- ✅ OPTIMIZED: Smart trade selection - prefer non-conflicted, fallback to best overall -->
          <do_if value="$nonConflictedBestTrade">
            <set_value name="$bestTrade" exact="$nonConflictedBestTrade"/>
            <set_value name="$bestScore" exact="$nonConflictedBestScore"/>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-FLEET] (' + $ship.idcode + ') ✅ Selected non-conflicted trade (Score: ' + $nonConflictedBestScore + ')'" chance="100"/>
            </do_if>
          </do_if>
          <do_elseif value="$crossStationBestTrade">
            <set_value name="$bestTrade" exact="$crossStationBestTrade"/>
            <set_value name="$bestScore" exact="$crossStationBestScore"/>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-FLEET] (' + $ship.idcode + ') ⚠️ Using best trade (Score: ' + $crossStationBestScore + ') - may conflict with active fleet routes'" chance="100"/>
            </do_if>
          </do_elseif>
        </do_if>
        
        <!-- DEBUG: Log selected trade docking status -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch and $bestTrade and $bestTrade.$BuyStation? and $bestTrade.$SellStation?">
          <set_value name="$canDockBuy" exact="@$bestTrade.$BuyStation.dockingallowed.{$ship}"/>
          <set_value name="$canDockSell" exact="@$bestTrade.$SellStation.dockingallowed.{$ship}"/>
          <set_value name="$buyDockStatus" exact="if $canDockBuy then 'OK' else 'FAIL'"/>
          <set_value name="$sellDockStatus" exact="if $canDockSell then 'OK' else 'FAIL'"/>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') SELECTED TRADE DOCKING: Ship=' + $ship.class + ' | BUY=' + @$bestTrade.$BuyStation.knownname + ' [' + $buyDockStatus + '] | SELL=' + @$bestTrade.$SellStation.knownname + ' [' + $sellDockStatus + ']'" chance="100"/>
        </do_if>
        
        <!-- DEBUG: Log docking restriction statistics -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <do_if value="$tradesRejectedDocking gt 0">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') DOCKING RESTRICTIONS: Rejected ' + $tradesRejectedDocking + ' trade pairs due to incompatible docking (ship class: ' + $ship.class + ')'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- Return results via global variable -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $StationsEvaluated = $stationsEvaluated,
          $OffersFound = $offersFound
        ]"/>
      </actions>
    </cue>
    
    <!-- Search for Sell Opportunities -->
    <cue name="SearchSellOpportunities" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- Receive parameters directly -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minProfit" exact="$params.$MinProfit"/>
        
        <!-- DEBUG: Sell search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === SELL SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin Profit: ' + $minProfit + ' Cr'" chance="100"/>
        </do_if>
        
        <!-- Find best sell location for current cargo -->
        <set_value name="$bestOffer" exact="null"/>
        <set_value name="$bestPrice" exact="0"/>
        <set_value name="$bestAmount" exact="0"/>
        
        <!-- Get ship's current cargo -->
        <set_value name="$currentCargo" exact="$ship.cargo.list"/>
        
        <do_if value="$currentCargo.count gt 0">
          <!-- For each ware in cargo, find best sell location -->
          <do_all exact="$currentCargo.count" counter="$i">
            <set_value name="$ware" exact="$currentCargo.{$i}"/>
            <set_value name="$amount" exact="$ship.cargo.{$ware}.count"/>
            
            <!-- Find buy offers for this ware -->
            <find_buy_offer space="player.galaxy" result="$buyOffers" multiple="true" wares="$ware">
              <match_buyer tradesknownto="$ship.owner">
                <match_gate_distance object="$ship" max="$maxDistance"/>
              </match_buyer>
            </find_buy_offer>
            
            <!-- Find best price -->
            <do_all exact="$buyOffers.count" counter="$j">
              <set_value name="$offer" exact="$buyOffers.{$j}"/>
              <set_value name="$tradeAmount" exact="[$amount, $offer.amount].min"/>
              <set_value name="$profit" exact="$offer.unitprice * $tradeAmount"/>
              
              <do_if value="$profit gt $bestPrice and $offer.available">
                <set_value name="$bestOffer" exact="$offer"/>
                <set_value name="$bestPrice" exact="$profit"/>
                <set_value name="$bestAmount" exact="$tradeAmount"/>
              </do_if>
            </do_all>
          </do_all>
          
          <!-- Execute best sell if found -->
          <do_if value="$bestOffer and $bestPrice gt $minProfit">
            <debug_text text="'[GalaxyTrader MK3] ' + $ship.knownname + ' found sell opportunity'" chance="100"/>
            
            <!-- Create trade order -->
            <create_trade_order object="$ship" tradeoffer="$bestOffer" amount="$bestAmount" immediate="false"/>
            
            <!-- Signal back to AI script: Trade Found -->
            <signal_objects object="$ship" param="'GT_Trade_Found'"/>
          </do_if>
          <do_else>
            <!-- Signal back to AI script: No Trade Found -->
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
          </do_else>
        </do_if>
        <do_else>
          <!-- Signal back to AI script: No Trade Found (no cargo) -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
        </do_else>
        
        <!-- CRITICAL: Clean up AI parameters -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
      </actions>
    </cue>
  </cues>
</mdscript>
