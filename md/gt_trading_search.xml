<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GT_Trading_Search" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/md.xsd">
  <cues>
    <!-- ========================================
         GALAXY TRADER MK3 - SEARCH ENGINE
         Core trade route search and matching logic
         ======================================== -->
    
    <!-- Search for Trade Routes (MAIN SEARCH ENGINE) -->
    <cue name="SearchTradeRoutes" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- ✅ PERFORMANCE FIX: Receive parameters directly from event to prevent race conditions -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        
        <!-- Create faction priority text for debug output -->
        <set_value name="$factionPriorityText" exact="if $factionPriority == 0 then 'Player Only' else if $factionPriority == 1 then 'Foreign First' else 'Equal Priority'"/>
        
        <!-- Get distance penalty setting (0-100% converted to 0.0-2.0 multiplier) -->
        <set_value name="$distancePenaltyMultiplier" exact="1.0"/> <!-- Default: 50% = 1.0 -->
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$DistancePenalty?">
          <!-- Convert 0-100% to 0.0-2.0: 0%=0.0, 50%=1.0, 100%=2.0 -->
          <set_value name="$distancePenaltyMultiplier" exact="global.$GT_AIParameters.{$ship}.$DistancePenalty / 50.0"/>
        </do_if>

        <!-- Resolve pilot skill and apply feature gates + level-based thresholds -->
        <run_actions ref="md.GT_Ship_Management.Calculate_Skill_Level" result="$skillInfo">
          <param name="ship" value="$ship"/>
        </run_actions>
        <set_value name="$skillLevel" exact="if $skillInfo? and $skillInfo.$Level? then $skillInfo.$Level else 1"/>

        <!-- Feature gates by skill level -->
        <set_value name="$gt_ThreatIntel" exact="$skillLevel ge 6"/>
        <set_value name="$gt_SatelliteIntel" exact="$skillLevel ge 9"/>
        <set_value name="$gt_FleetCoord" exact="$skillLevel ge 12"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$skillLevel ge 15"/>

        <!-- Level-based ROI and Absolute Profit thresholds (0.5x @Lv1 → 2.0x @Lv15) -->
        <set_value name="$roiMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$profitMultiplier" exact="0.5 + (($skillLevel - 1) * (1.5 / 14))"/>
        <set_value name="$minROI" exact="$minROI * $roiMultiplier"/>
        <set_value name="$minAbsoluteProfit" exact="($minAbsoluteProfit * $profitMultiplier)i"/>
        
        <!-- DEBUG: Trade search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <set_value name="$pilotInfo" exact="'No Pilot'"/>
          <do_if value="$ship.pilot">
            <set_value name="$shownSkill" exact="1"/>
            <do_if value="global.$GT_Pilots.{$ship.pilot}? and global.$GT_Pilots.{$ship.pilot}.$Level?">
              <set_value name="$shownSkill" exact="global.$GT_Pilots.{$ship.pilot}.$Level"/>
            </do_if>
            <do_elseif value="$ship.pilot.skill.management?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.management"/>
            </do_elseif>
            <do_elseif value="$ship.pilot.skill.piloting?">
              <set_value name="$shownSkill" exact="$ship.pilot.skill.piloting"/>
            </do_elseif>
            <set_value name="$pilotInfo" exact="$ship.pilot.name + ' (Skill: ' + $shownSkill + ')'"/>
          </do_if>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === TRADE SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nPilot: ' + $pilotInfo + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin ROI: ' + $minROI + '%' + '\nMin Absolute Profit: ' + ($minAbsoluteProfit / 100) + ' Cr' + '\nShip Cargo: ' + ($ship.cargo.capacity.all - $ship.cargo.free.all) + '/' + $ship.cargo.capacity.all" chance="100"/>
        </do_if>
        
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== PHASE 1: CHECK TRADE CACHE WITH AGE VALIDATION ===== -->
        <signal_cue_instantly cue="SearchCachedTrades" param="table[
          $Ship = $ship,
          $MaxDistance = $maxDistance,
          $MinROI = $minROI,
          $MinAbsoluteProfit = $minAbsoluteProfit,
          $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
          $SkillLevel = $skillLevel,
          $AllowIllegal = $params.$AllowIllegal
        ]"/>
        
        <!-- Extract cache results from global return variable -->
        <set_value name="$foundCachedTrade" exact="@global.$GT_SearchResult.$Found"/>
        <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
        <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
        <set_value name="$cacheBlacklistRejections" exact="@global.$GT_SearchResult.$BlacklistRejections"/>
        <set_value name="$tradeList" exact="@global.$GT_SearchResult.$TradeList"/>
        
        <!-- ===== PHASE 2: LIVE TRADE SEARCH (if no good cached trade) ===== -->
        <do_if value="not $foundCachedTrade">
          <!-- DEBUG: No cached trade, performing live search -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') No suitable cached trade found, performing live market search'" chance="100"/>
          </do_if>
        
          <!-- Perform live search -->
          <signal_cue_instantly cue="SearchLiveTrades" param="table[
            $Ship = $ship,
            $MaxDistance = $maxDistance,
            $MinROI = $minROI,
            $MinAbsoluteProfit = $minAbsoluteProfit,
            $FactionPriority = $factionPriority,
            $FactionPriorityText = $factionPriorityText,
            $DistancePenaltyMultiplier = $distancePenaltyMultiplier,
            $SkillLevel = $skillLevel,
            $ThreatIntel = $gt_ThreatIntel,
            $FleetCoord = $gt_FleetCoord,
            $AdvancedAnalytics = $gt_AdvancedAnalytics
          ]"/>
          
          <!-- Extract live search results from global return variable -->
          <set_value name="$bestTrade" exact="@global.$GT_SearchResult.$BestTrade"/>
          <set_value name="$bestScore" exact="@global.$GT_SearchResult.$BestScore"/>
          <set_value name="$stationsEvaluated" exact="@global.$GT_SearchResult.$StationsEvaluated"/>
          <set_value name="$offersFound" exact="@global.$GT_SearchResult.$OffersFound"/>
          <set_value name="$tradeList" exact="@global.$GT_SearchResult.$TradeList"/>
          
          <!-- Failed sector filtering now happens during best trade tracking (inside evaluation loop) -->
          <!-- This ensures: 1) All trades are cached for other ships, 2) Best selection excludes failed sectors -->
        </do_if>  <!-- End of live trade search -->
        
        <!-- Execute best trade if found -->
        <do_if value="$bestTrade">
          <!-- DEBUG: Trade execution with full details -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📊 BEST TRADE SELECTED:' + '\n  📦 Ware: ' + $bestTrade.$BuyOffer.ware.name + ' (x' + $bestTrade.$Amount + ')' + '\n  📍 BUY from: ' + $bestTrade.$BuyOffer.owner.knownname + ' @ ' + ($bestTrade.$BuyPrice / 100) + ' Cr' + '\n  📍 SELL to: ' + $bestTrade.$SellOffer.owner.knownname + ' @ ' + ($bestTrade.$SellPrice / 100) + ' Cr' + '\n  🚀 Distance: ' + $bestTrade.$Distance + ' jumps' + '\n  💰 Profit: ' + ($bestTrade.$Profit / 100) + ' Cr' + '\n  📈 ROI: ' + @$bestTrade.$ROI + '%' + '\n  📊 Score: ' + $bestTrade.$Score + '\n  ⚠ Risk: ' + $bestTrade.$Risk" chance="100"/>
          </do_if>
          
          <!-- ✅ OPTIMIZED: Reserve trade route for fleet coordination (inline conflict resolution done during search) -->
          <do_if value="global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
            <do_if value="not global.$GT_ActiveTradeReservations?">
              <set_value name="global.$GT_ActiveTradeReservations" exact="table[]"/>
            </do_if>
            
            <set_value name="global.$GT_ActiveTradeReservations.{$ship}" exact="table[
              $BuyStation = $bestTrade.$BuyOffer.owner,
              $SellStation = $bestTrade.$SellOffer.owner,
              $Ware = $bestTrade.$BuyOffer.ware,
              $Timestamp = player.age
            ]"/>
          </do_if>
          
          <!-- Execute trade -->
          <do_if value="true">
            <!-- Signal execution module (which will signal AI after storing trade LIST) -->
            <signal_cue_instantly cue="md.GT_Trading_Execution.ExecuteTrade" param="table[
              $Ship = $ship,
              $Trade = $bestTrade,
              $TradeList = $tradeList
            ]"/>
            
            <!-- GT_Trade_Found signal now sent FROM ExecuteTrade cue after storing pending trade -->
          </do_if>
        </do_if>
        <do_else>
          <!-- No valid trades found -->
          <!-- DEBUG: No trades found -->
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === NO TRADES FOUND ANALYSIS ===' + '\nShip: ' + $ship.knownname + '\nSector: ' + $ship.sector.knownname + '\nSearch params: Dist=' + $maxDistance + ', MinROI=' + $minROI + '%, MinAbsoluteProfit=' + ($minAbsoluteProfit / 100) + ' Cr'" chance="100"/>
          </do_if>
          
          <debug_text text="'[GalaxyTrader MK3] No profitable trades found for ' + $ship.knownname" chance="100"/>
          
          <!-- Signal back to AI script: No Trade Found -->
          <!-- CRITICAL: Always send 'blacklist' param to prevent idle timeout escalation -->
          <!-- Reason: With blacklist-aware pre-filtering, we can't distinguish "filtered" from "genuinely empty" -->
          <!-- Better UX: Don't escalate to 60s timeout when ship might just need blacklist adjustment -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'" param2="'blacklist'"/>
        </do_else>
        
        <!-- CRITICAL: Release search lock for this ship -->
        <do_if value="global.$GT_SearchLocks.{$ship}?">
          <remove_value name="global.$GT_SearchLocks.{$ship}"/>
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Search lock released'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- CRITICAL: Clean up AI parameters for this ship -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
        
        <!-- ✅ PERFORMANCE FIX: Mark search complete and process next ship in queue -->
        <do_if value="global.$GT_SearchQueue.$Params? and global.$GT_SearchQueue.$Params.{$ship}?">
          <remove_value name="global.$GT_SearchQueue.$Params.{$ship}"/>
        </do_if>
        
        <!-- Decrement active search counter -->
        <set_value name="global.$GT_SearchQueue.$ActiveSearches" operation="subtract"/>
        
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🔍 SEARCH COMPLETE (active: ' + global.$GT_SearchQueue.$ActiveSearches + '/' + global.$GT_SearchQueue.$MaxConcurrent + ', queued: ' + global.$GT_SearchQueue.$Ships.count + ')'" chance="100"/>
        </do_if>
        
        <!-- Continue processing search queue if there are ships waiting -->
        <do_if value="global.$GT_SearchQueue.$Ships.count gt 0">
          <signal_cue_instantly cue="md.GT_Trading_Queue.ProcessSearchQueue"/>
        </do_if>
      </actions>
    </cue>
    
    <!-- Search Cached Trades (Sub-module) -->
    <cue name="SearchCachedTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$allowIllegal" exact="@$params.$AllowIllegal"/> <!-- Default to false if not provided -->
        
        <!-- Get ware basket for filtering (from global AI parameters) -->
        <set_value name="$wareBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
        
        <!-- ✅ NEW: Collect top 20 trades instead of just best one -->
        <set_value name="$tradeList" exact="[]"/>
        <set_value name="$maxTradesToReturn" exact="20"/>
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$foundCachedTrade" exact="false"/>
        
        <!-- ===== DETERMINE HOME SECTOR (same logic as live search) ===== -->
        <set_value name="$homeBase" exact="null"/>
        <do_if value="global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="not $homeBase? or not $homeBase.exists">
            <set_value name="$homeBase" exact="$ship.sector"/>
          </do_if>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <!-- DEBUG: Log home sector determination -->
        <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
          <debug_text text="'[GT-Cache-DEBUG] (' + $ship.idcode + ') Home sector resolution:' + 
            '\n  HomeBase: ' + @$homeBase.knownname + 
            '\n  HomeSector: ' + @$homeSector.knownname + 
            '\n  Ship current sector: ' + @$ship.sector.knownname" 
            chance="100"/>
        </do_if>
        
        <!-- Cache age check removed - not needed, individual entries have $Timestamp -->
        <set_value name="$cacheAge" exact="0s"/>
        
        <!-- Get failed trades for this ship -->
        <set_value name="$failedTrades" exact="[]"/>
        <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
          <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
        </do_if>
        
        <!-- ✅ CACHE REPLENISHMENT: Force live search if cache too small -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count lt 10">
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 1">
            <debug_text text="'[GT-Cache] ⚠ Cache too small (' + global.$GT_TradeCache.count + ' entries) - forcing live search to replenish'" chance="100"/>
          </do_if>
          
          <!-- Return null to trigger live search -->
          <signal_cue_instantly cue="$params.$ResultCue" param="$bestTrade"/>
          <cancel_cue cue="this"/>
        </do_if>
        
        <!-- ✅ LIST-BASED CACHE: Iterate through flat list of trade entries -->
        <do_if value="global.$GT_TradeCache? and global.$GT_TradeCache.count gt 0">
          <set_value name="$cacheMaxAge" exact="600s"/>  <!-- 10 minutes -->
          <set_value name="$checkedEntries" exact="0"/>
          <set_value name="$validEntries" exact="0"/>
          <set_value name="$expiredEntries" exact="0"/>
          
          <!-- DEBUG: Log cache status -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
            <debug_text text="'[GT-Cache-DEBUG] Cache has ' + global.$GT_TradeCache.count + ' trade entries'" chance="100"/>
          </do_if>
          
          <!-- Iterate through flat list of cached trades BACKWARDS to safely remove invalid entries -->
          <!-- When we remove entry N, entries 1 to N-1 remain at same indices (already processed) -->
          <set_value name="$cacheCount" exact="global.$GT_TradeCache.count"/>
          <do_all exact="$cacheCount" counter="$idx" reverse="true">
            <set_value name="$i" exact="$idx"/>
            <set_value name="$cacheEntry" exact="global.$GT_TradeCache.{$i}"/>
            <set_value name="$checkedEntries" exact="$checkedEntries + 1"/>
            
            <!-- Validate cache entry structure -->
            <do_if value="not $cacheEntry? or not $cacheEntry.$BuyOffer? or not $cacheEntry.$SellOffer? or not $cacheEntry.$Timestamp?">
              <continue/>
            </do_if>
            
            <!-- Check if entry is too old (TTL filter) -->
            <set_value name="$entryAge" exact="player.age - $cacheEntry.$Timestamp"/>
            <do_if value="$entryAge gt $cacheMaxAge">
              <set_value name="$expiredEntries" exact="$expiredEntries + 1"/>
              <continue/>
            </do_if>
            
            <!-- Validate offers still exist and are available -->
            <do_if value="not $cacheEntry.$BuyOffer.exists or not $cacheEntry.$SellOffer.exists">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers are still available (not out of stock) -->
            <do_if value="not $cacheEntry.$BuyOffer.available or not $cacheEntry.$SellOffer.available">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Validate offers have sufficient amount -->
            <do_if value="$cacheEntry.$BuyOffer.amount lt $cacheEntry.$Amount or $cacheEntry.$SellOffer.amount lt $cacheEntry.$Amount">
              <continue/>
            </do_if>
            
            <!-- Validate stations still operational -->
            <do_if value="not @$cacheEntry.$BuyOffer.owner.isoperational or not @$cacheEntry.$SellOffer.owner.isoperational">
              <continue/>
            </do_if>
            
            <!-- CRITICAL: Filter out sector pairs that previously failed for THIS ship -->
            <!-- One failure in a sector pair blocks ALL station combinations in that route -->
            <do_if value="$failedTrades.count gt 0">
              <set_value name="$skipThisCacheEntry" exact="false"/>
              <do_all exact="$failedTrades.count" counter="$failIdx">
                <set_value name="$failedTrade" exact="$failedTrades.{$failIdx}"/>
                
                <!-- Check if SECTOR PAIR matches (buy sector → sell sector) -->
                <!-- CRITICAL: Validate failed trade has complete sector data before comparing -->
                <do_if value="$failedTrade.$BuySector? and $failedTrade.$SellSector?">
                  <do_if value="@$cacheEntry.$BuyOffer.owner.sector == @$failedTrade.$BuySector and 
                                @$cacheEntry.$SellOffer.owner.sector == @$failedTrade.$SellSector">
                    <set_value name="$skipThisCacheEntry" exact="true"/>
                    <debug_text text="'[GT-Cache] ⛔ FILTERED sector pair: ' + 
                      @$failedTrade.$BuySector.knownname + ' → ' + @$failedTrade.$SellSector.knownname +
                      ' (reason: ' + $failedTrade.$Reason + ')'"
                      chance="100"/>
                    <break/>
                  </do_if>
                </do_if>
              </do_all>
              
              <do_if value="$skipThisCacheEntry">
                <continue/> <!-- Skip to next cache entry -->
              </do_if>
            </do_if>
            
            <!-- 
              TWO-STAGE DISTANCE VALIDATION:
              1. Range check: Is trade within ship's operational range from home base? (NO blacklist)
              2. Reachability check: Can ship reach it from current position? (basic connectivity)
            -->
            
            <!-- STAGE 1: Range check from home base (no blacklist) -->
            <set_value name="$rangeCheckBuy" exact="@$homeSector.gatedistance.{$cacheEntry.$BuyOffer.owner.sector}"/>
            <do_if value="not $rangeCheckBuy? or typeof $rangeCheckBuy != datatype.integer">
              <set_value name="$rangeCheckBuy" exact="-1"/>
            </do_if>
            
            <do_if value="$cacheEntry.$BuyOffer.owner.sector == $cacheEntry.$SellOffer.owner.sector">
              <set_value name="$rangeCheckSell" exact="0"/>
            </do_if>
            <do_else>
              <set_value name="$rangeCheckSell" exact="@$cacheEntry.$BuyOffer.owner.sector.gatedistance.{$cacheEntry.$SellOffer.owner.sector}"/>
              <do_if value="not $rangeCheckSell? or typeof $rangeCheckSell != datatype.integer">
                <set_value name="$rangeCheckSell" exact="-1"/>
              </do_if>
            </do_else>
            
            <set_value name="$totalRangeDistance" exact="$rangeCheckBuy + $rangeCheckSell"/>
            
            <!-- Skip if outside operational range -->
            <do_if value="$rangeCheckBuy lt 0 or $rangeCheckSell lt 0 or $totalRangeDistance gt $maxDistance">
              <continue/>
            </do_if>
            
            <!-- STAGE 2: Reachability check from CURRENT position with blacklist (pre-validate path) -->
            <!-- STAGE 2: Basic reachability check from current position (NO blacklist - AI will validate) -->
            <set_value name="$buyDistance" exact="$ship.gatedistance.{$cacheEntry.$BuyOffer.owner.sector}"/>
            
            <!-- Sell distance: BuyOffer station to SellOffer station -->
            <do_if value="$cacheEntry.$BuyOffer.owner.sector == $cacheEntry.$SellOffer.owner.sector">
              <set_value name="$sellDistance" exact="0"/>
            </do_if>
            <do_else>
              <set_value name="$sellDistance" exact="$cacheEntry.$BuyOffer.owner.sector.gatedistance.{$cacheEntry.$SellOffer.owner.sector}"/>
            </do_else>
            
            <!-- If trade route is in disconnected sectors, skip this trade -->
            <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
              <debug_text text="'[GT-Cache] ⚠ DISCONNECTED: Trade route has disconnected sectors' +
                '\n  Ship: ' + $ship.idcode +
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name +
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname"
                chance="100"/>
              <continue/>
            </do_if>
            
            <!-- DEBUG: Log distance calculations for first few entries -->
            <do_if value="$i le 3 and @global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <debug_text text="'[GT-Cache-DEBUG] Entry ' + $i + ' Two-stage distance check:' + 
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$BuyOffer.owner.sector.knownname + ')' +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$SellOffer.owner.sector.knownname + ')' +
                '\n  STAGE 1 - Range check (from home ' + @$homeSector.knownname + '):' +
                '\n    Buy: ' + $rangeCheckBuy + ' jumps, Sell: ' + $rangeCheckSell + ' jumps, Total: ' + $totalRangeDistance + ' jumps' +
                '\n  STAGE 2 - Reachability check (from current ' + @$ship.sector.knownname + '):' +
                '\n    Buy: ' + $buyDistance + ' jumps, Sell: ' + $sellDistance + ' jumps' +
                '\n  Note: Vanilla will handle blacklist routing when trade is executed'" 
                chance="100"/>
            </do_if>
            
            <!-- Safe defaults for null values (should be rare - only if sectors are completely disconnected) -->
            <do_if value="not $buyDistance? or typeof $buyDistance != datatype.integer">
              <set_value name="$buyDistance" exact="-1"/>
            </do_if>
            <do_if value="not $sellDistance? or typeof $sellDistance != datatype.integer">
              <set_value name="$sellDistance" exact="-1"/>
            </do_if>
            
            <!-- Filter genuinely unreachable trades (negative = no path exists at all) -->
            <!-- Note: Blacklist routing will be handled by vanilla when trade is executed -->
            <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
              <!-- REACHABILITY CHECK FAILED: No path exists (sectors disconnected) -->
              <debug_text text="'[GT-Cache] ⛔ UNREACHABLE from current position: Cached trade blocked for this ship' + 
                '\n  Ship: ' + $ship.idcode + ' (currently in: ' + $ship.sector.knownname + ')' +
                '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$BuyOffer.owner.sector.knownname + ')' +
                '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + ' (sector: ' + @$cacheEntry.$SellOffer.owner.sector.knownname + ')' +
                '\n  Range check (from home): PASSED (within ' + $maxDistance + ' jumps)' +
                '\n  Reachability check (from current sector): FAILED' +
                '\n    - Buy distance: ' + $buyDistance + ' jumps (from ' + $ship.sector.knownname + ')' +
                '\n    - Sell distance: ' + $sellDistance + ' jumps' +
                '\n  → Trade filtered: No safe route from current position through non-blacklisted sectors' +
                '\n  → Skipping for this ship, but KEEPING in cache for other ships in different locations'" 
                chance="100"/>
              
              <!-- ✅ POSITION-AWARE: Skip unreachable entry for THIS ship, but keep in global cache for other ships -->
              <!-- Path blocking is position-specific - other ships in different locations may be able to reach this trade -->
              <continue/>
            </do_if>
            
            <!-- Note: Station/sector blacklist checks removed - vanilla will handle when trade executes -->
            
            <!-- Calculate total distance -->
            <set_value name="$currentDistance" exact="$buyDistance + $sellDistance"/>
            
            <!-- Basic staleness check: if distance changed significantly, routes may have changed -->
            <!-- This can happen due to gate construction/destruction, not just blacklist changes -->
            <do_if value="$cacheEntry.$Distance? and $buyDistance ge 0 and $sellDistance ge 0">
              <set_value name="$distanceChange" exact="$currentDistance - $cacheEntry.$Distance"/>
              
              <!-- If distance increased by more than 50%, routes changed - remove stale entry -->
              <do_if value="$currentDistance gt ($cacheEntry.$Distance * 1.5)">
                <debug_text text="'[GT-Cache] ⚠️ STALE CACHE ENTRY: Routes changed after cache creation' + 
                  '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                  '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + 
                  '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + 
                  '\n  Cached distance: ' + $cacheEntry.$Distance + ' jumps' +
                  '\n  Current distance: ' + $currentDistance + ' jumps' +
                  '\n  Change: +' + $distanceChange + ' jumps (+' + (($distanceChange * 100) / $cacheEntry.$Distance) + '%)' +
                  '\n  → REMOVING STALE ENTRY: Route significantly changed due to blacklist update'" 
                  chance="100"/>
                
                <!-- Remove stale cache entry -->
                <remove_value name="global.$GT_TradeCache.{$i}"/>
                <set_value name="$expiredEntries" operation="add"/>
                <continue/>
              </do_if>
              
              <!-- LOG: Detect alternative routing (distance increased but not enough to invalidate) -->
              <do_if value="$currentDistance gt $cacheEntry.$Distance">
                <debug_text text="'[GT-Cache] ⚠️ ALTERNATIVE ROUTE: Blacklist forcing detour' + 
                  '\n  Ware: ' + @$cacheEntry.$BuyOffer.ware.name + 
                  '\n  Buy: ' + @$cacheEntry.$BuyOffer.owner.knownname + 
                  '\n  Sell: ' + @$cacheEntry.$SellOffer.owner.knownname + 
                  '\n  Original distance: ' + $cacheEntry.$Distance + ' jumps' +
                  '\n  Blacklist-aware distance: ' + $currentDistance + ' jumps' +
                  '\n  Detour: +' + $distanceChange + ' jumps (avoiding blacklisted sectors)'" 
                  chance="100"/>
              </do_if>
            </do_if>
            
            <!-- ✅ ILLEGAL WARE FILTER: Skip illegal wares if ship doesn't allow illegal trades -->
            <do_if value="not $allowIllegal and $cacheEntry.$BuyOffer.ware.illegal">
              <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Cache] ⛔ Skipping cached trade for ' + $cacheEntry.$BuyOffer.ware.name + ' (illegal ware, AllowIllegal=' + $allowIllegal + ') - continuing to next entry'" chance="100"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- ✅ WARE BASKET FILTER: Only consider manually selected wares -->
            <do_if value="$wareBasket? and $wareBasket.count gt 0">
              <do_if value="not $wareBasket.indexof.{$cacheEntry.$BuyOffer.ware}">
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⛔ Skipping cached trade for ' + $cacheEntry.$BuyOffer.ware.name + ' (not in ware basket) - continuing to next entry'" chance="100"/>
                </do_if>
                <continue/>
              </do_if>
            </do_if>
            
            <!-- CRITICAL: Validate prices haven't changed unfavorably (allow 10% variance) -->
            <!-- ❌ REMOVED: Stale price check was filtering out valid entries before querying fresh offers!
                 The old logic read prices from cached tradeoffer objects which are stale.
                 We should only validate against fresh prices AFTER querying fresh offers. -->
            
            <!-- Check distance constraint (use current blacklist-aware distance) -->
            <do_if value="$currentDistance gt $maxDistance">
              <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Cache] ⛔ Trade exceeds max distance (' + $currentDistance + ' > ' + $maxDistance + ')'" chance="100"/>
              </do_if>
              <continue/>
            </do_if>
            
            <!-- Check profit constraint -->
            <do_if value="$cacheEntry.$Profit? and $cacheEntry.$Profit lt $minAbsoluteProfit">
              <continue/>
            </do_if>
            
            <!-- Calculate current score with distance penalty (use blacklist-aware distance) -->
            <set_value name="$adjustedDistance" exact="$currentDistance * $distancePenaltyMultiplier"/>
            <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($cacheEntry.$Profit / $adjustedDistance) else $cacheEntry.$Profit"/>
            
            <!-- ✅ DEBUG: Log each entry being considered -->
            <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
              <set_value name="$willQuery" exact="if $efficiency gt $bestScore then 'YES' else 'NO'"/>
              <debug_text text="'[GT-Cache-DEBUG] Entry ' + $i + ': Ware=' + @$cacheEntry.$WareName + ', CachedEff=' + $efficiency + ', BestScore=' + $bestScore + ', WillQuery=' + $willQuery" chance="100"/>
            </do_if>
            
            <!-- ✅ CACHE AS HINT: Re-query FRESH trade offers from the cached stations -->
            <do_if value="$efficiency gt $bestScore">
              <!-- ✅ CRITICAL FIX: Get ware and station objects from cached IDs, not stale tradeoffer references! -->
              <!-- Ware objects don't go stale, so we can use the cached ware object directly -->
              <set_value name="$ware" exact="$cacheEntry.$BuyOffer.ware"/>
              
              <!-- Stations: Try using cached station references first (faster) -->
              <set_value name="$buyStation" exact="$cacheEntry.$BuyOffer.owner"/>
              <set_value name="$sellStation" exact="$cacheEntry.$SellOffer.owner"/>
              
              <!-- Validate stations still exist and are operational -->
              <do_if value="$buyStation.exists and $buyStation.isoperational and $sellStation.exists and $sellStation.isoperational and $ware">
                <!-- Query FRESH sell offer from buy station (ship buys from their sell offer) -->
                <find_sell_offer seller="$buyStation" wares="$ware" result="$freshBuyOffer">
                  <match_seller tradesknownto="$ship.owner"/>
                </find_sell_offer>
                
                <!-- Query FRESH buy offer from sell station (ship sells to their buy offer) -->
                <find_buy_offer buyer="$sellStation" wares="$ware" result="$freshSellOffer">
                  <match_buyer tradesknownto="$ship.owner"/>
                </find_buy_offer>
              </do_if>
              <do_else>
                <!-- Stations or ware no longer exist/operational - skip this entry -->
                <set_value name="$freshBuyOffer" exact="null"/>
                <set_value name="$freshSellOffer" exact="null"/>
                
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <set_value name="$buyExists" exact="if $buyStation.exists then '1' else '0'"/>
                  <set_value name="$sellExists" exact="if $sellStation.exists then '1' else '0'"/>
                  <debug_text text="'[GT-Cache] ⚠ Cached stations no longer valid: Buy=' + $buyExists + ', Sell=' + $sellExists" chance="100"/>
                </do_if>
              </do_else>
              
              <!-- Validate fresh offers exist and are available -->
              <do_if value="$freshBuyOffer and $freshBuyOffer.available and $freshSellOffer and $freshSellOffer.available">
                <!-- Calculate fresh prices and profit -->
                <set_value name="$freshBuyPrice" exact="$freshBuyOffer.unitprice"/>
                <set_value name="$freshSellPrice" exact="$freshSellOffer.unitprice"/>
                <set_value name="$freshMaxAmount" exact="[$freshBuyOffer.amount, $freshSellOffer.amount, $ship.cargo.free.all].min"/>
                
                <!-- Skip if no tradeable amount -->
                <do_if value="$freshMaxAmount gt 0">
                  <set_value name="$freshProfit" exact="($freshSellPrice - $freshBuyPrice) * $freshMaxAmount"/>
                  
                  <!-- ✅ CORRECT LOGIC: Calculate fresh ROI and check if it meets cache threshold -->
                  <do_if value="$freshProfit gt 0">
                    <!-- Calculate fresh ROI as percentage -->
                    <set_value name="$freshROI" exact="(($freshSellPrice - $freshBuyPrice) * 100) / $freshBuyPrice"/>
                    
                    <!-- Get cache threshold from global settings (default 20%) -->
                    <set_value name="$cacheThreshold" exact="20"/>
                    <do_if value="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold?">
                      <set_value name="$cacheThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
                    </do_if>
                    
                    <!-- Check if fresh ROI still meets or exceeds cache threshold -->
                    <do_if value="$freshROI ge $cacheThreshold and $freshProfit ge $minAbsoluteProfit">
                      <!-- ✅ CACHE HIT: Fresh trade still meets acceptance criteria! -->
                      <set_value name="$trade" exact="table[
                        $BuyOffer = $freshBuyOffer,
                        $SellOffer = $freshSellOffer,
                        $Amount = $freshMaxAmount,
                        $Profit = $freshProfit,
                        $ROI = $freshROI,
                        $BuyPrice = $freshBuyPrice,
                        $SellPrice = $freshSellPrice,
                        $Distance = $cacheEntry.$Distance,
                        $Score = $efficiency,
                        $Risk = 0
                      ]"/>
                      
                      <!-- ✅ NEW: Add to trade list (up to max) -->
                      <do_if value="$tradeList.count lt $maxTradesToReturn">
                        <append_to_list name="$tradeList" exact="$trade"/>
                      </do_if>
                      
                      <!-- Also track best trade for backward compatibility -->
                      <do_if value="$efficiency gt $bestScore">
                        <set_value name="$bestScore" exact="$efficiency"/>
                        <set_value name="$bestTrade" exact="$trade"/>
                      </do_if>
                      
                      <set_value name="$foundCachedTrade" exact="true"/>
                      <set_value name="$validEntries" exact="$validEntries + 1"/>
                      
                      <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                        <debug_text text="'[GT-Cache] ✅ FRESH offers validated for cached trade: ' + $ware.name + ' (CachedROI=' + $cacheEntry.$ROI + '%, FreshROI=' + $freshROI + '%, Threshold=' + $cacheThreshold + '%, Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                      </do_if>
                    </do_if>
                    <do_else>
                      <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                        <debug_text text="'[GT-Cache] ⚠ Fresh trade below threshold: ' + $ware.name + ' (FreshROI=' + $freshROI + '%, Threshold=' + $cacheThreshold + '%, Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                      </do_if>
                    </do_else>
                  </do_if>
                  <do_else>
                    <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                      <debug_text text="'[GT-Cache] ⚠ Fresh trade not profitable: ' + $ware.name + ' (Profit=' + ($freshProfit/100) + ' Cr)'" chance="100"/>
                    </do_if>
                  </do_else>
                </do_if>
              </do_if>
              <do_else>
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⚠ Fresh offers not available for cached trade: ' + $ware.name" chance="100"/>
                </do_if>
              </do_else>
            </do_if>
          </do_all>
          
          <!-- DEBUG: Log cache retrieval results -->
          <do_if value="@global.$GT_Config.$Debug.$Enabled">
            <do_if value="@global.$GT_Config.$Debug.$LogLevel ge 2">
              <do_if value="$foundCachedTrade">
                <debug_text text="'[GT-Cache] ✅ Cache HIT for ' + $ship.idcode + ': Found cached trade (Score: ' + $bestScore + ', checked: ' + $checkedEntries + ', valid: ' + $validEntries + ', expired: ' + $expiredEntries + ')'" chance="100"/>
              </do_if>
              <do_else>
                <debug_text text="'[GT-Cache] ❌ Cache MISS for ' + $ship.idcode + ': No valid cached trades (checked: ' + $checkedEntries + ', expired: ' + $expiredEntries + ')'" chance="100"/>
              </do_else>
            </do_if>
          </do_if>
        </do_if>
        
        <!-- Return results via global variable -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $Found = $foundCachedTrade,
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $TradeList = $tradeList
        ]"/>
      </actions>
    </cue>
    
    <!-- Search Live Trades (Sub-module) -->
    <cue name="SearchLiveTrades" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$params" exact="event.param"/>
        <!-- Extract all parameters -->
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minROI" exact="$params.$MinROI"/>
        <set_value name="$minAbsoluteProfit" exact="$params.$MinAbsoluteProfit"/>
        <set_value name="$factionPriority" exact="$params.$FactionPriority"/>
        <set_value name="$factionPriorityText" exact="$params.$FactionPriorityText"/>
        <set_value name="$distancePenaltyMultiplier" exact="$params.$DistancePenaltyMultiplier"/>
        <set_value name="$skillLevel" exact="$params.$SkillLevel"/>
        <set_value name="$gt_ThreatIntel" exact="$params.$ThreatIntel"/>
        <set_value name="$gt_FleetCoord" exact="$params.$FleetCoord"/>
        <set_value name="$gt_AdvancedAnalytics" exact="$params.$AdvancedAnalytics"/>
        
        <!-- NOTE: Do NOT clear failed trades here - we need to check them AFTER finding best trade -->
        <!-- Failed trades are only cleared on success (in gt_trading_signals.xml) -->
        
        <!-- Get failed trades for this ship (needed for filtering during best trade selection) -->
        <set_value name="$failedTrades" exact="[]"/>
        <do_if value="global.$GT_FailedTrades? and global.$GT_FailedTrades.{$ship}?">
          <set_value name="$failedTrades" exact="global.$GT_FailedTrades.{$ship}"/>
        </do_if>
        
        <!-- ✅ NEW: Collect top 20 trades instead of just best one -->
        <set_value name="$tradeList" exact="[]"/>
        <set_value name="$maxTradesToReturn" exact="20"/>
        <set_value name="$bestTrade" exact="null"/>
        <set_value name="$bestScore" exact="0"/>
        <set_value name="$stationsEvaluated" exact="0"/>
        <set_value name="$offersFound" exact="0"/>
        
        <!-- ===== DETERMINE HOME SECTOR ===== -->
        <set_value name="$homeBase" exact="null"/>
        <set_value name="$homeBaseSource" exact="'unknown'"/>
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}? and global.$GT_AIParameters.{$ship}.$HomeBase?">
          <set_value name="$homeBase" exact="global.$GT_AIParameters.{$ship}.$HomeBase"/>
          <set_value name="$homeBaseSource" exact="'order parameters'"/>
        </do_if>
        
        <!-- Fallback chain -->
        <do_if value="not $homeBase? or not $homeBase.exists">
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists">
            <set_value name="$homeBaseSource" exact="'defaultorder'"/>
          </do_if>
          <do_else>
            <set_value name="$homeBase" exact="$ship.sector"/>
            <set_value name="$homeBaseSource" exact="'ship.sector (fallback)'"/>
          </do_else>
        </do_if>
        
        <!-- Extract sector -->
        <do_if value="$homeBase.isclass.station">
          <set_value name="$homeSector" exact="$homeBase.sector"/>
        </do_if>
        <do_elseif value="$homeBase.isclass.sector">
          <set_value name="$homeSector" exact="$homeBase"/>
        </do_elseif>
        <do_else>
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_else>
        
        <!-- Validate -->
        <do_if value="not $homeSector? or not $homeSector.exists">
          <set_value name="$homeSector" exact="$ship.sector"/>
        </do_if>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 🏠 Home base: ' + @$homeBase.knownname + ' (sector: ' + $homeSector.knownname + ') [source: ' + $homeBaseSource + ']'" chance="100"/>
        </do_if>
        
        <!-- ===== GET STATIONS WITH FACTION PRIORITY ===== -->
        <set_value name="$foreignStations" exact="[]"/>
        <set_value name="$playerStations" exact="[]"/>
        
        <do_if value="$factionPriority != 0">
          <find_station space="player.galaxy" name="$foreignStations" multiple="true" knownto="$ship.owner" 
                        checkoperational="true" sortbygatedistanceto="$homeSector">
            <match_relation_to object="$ship" relation="dock" comparison="ge"/>
            <match canbuildships="false"/>
            <match owner="faction.player" negate="true"/>
          </find_station>
        </do_if>
        
        <find_station space="player.galaxy" name="$playerStations" multiple="true" owner="faction.player" 
                      checkoperational="true" sortbygatedistanceto="$homeSector" knownto="$ship.owner">
          <match canbuildships="false"/>
        </find_station>
        
        <!-- ✅ PERFORMANCE FIX: Merge stations without re-sorting (find_station already sorted them with sortbygatedistanceto) -->
        <set_value name="$stations" exact="[]"/>
        <do_if value="$factionPriority == 0">
          <!-- Player only: use as-is (already sorted) -->
          <set_value name="$stations" exact="$playerStations"/>
        </do_if>
        <do_else>
          <!-- Merge foreign (already sorted) + player (already sorted) = roughly sorted list -->
          <!-- Both lists are pre-sorted by find_station with sortbygatedistanceto, so simple append is sufficient -->
          <do_if value="$factionPriority != 0">
            <do_all exact="$foreignStations.count" counter="$fs">
              <append_to_list name="$stations" exact="$foreignStations.{$fs}"/>
            </do_all>
          </do_if>
          <do_all exact="$playerStations.count" counter="$ps">
            <append_to_list name="$stations" exact="$playerStations.{$ps}"/>
          </do_all>
        </do_else>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Merged ' + $stations.count + ' stations (pre-sorted by distance)'" chance="100"/>
        </do_if>
        
        <!-- ===== COLLECT ALL TRADE OFFERS ===== -->
        <set_value name="$allSellOffers" exact="[]"/>
        <set_value name="$allBuyOffers" exact="[]"/>
        <set_value name="$totalFilteredIllegal" exact="0"/>
        <set_value name="$stationsSkipped" exact="0"/>
        <set_value name="$tradesRejectedDocking" exact="0"/>
        
        <!-- Get AI parameters for filtering -->
        <set_value name="$wareBasket" exact="@global.$GT_AIParameters.{$ship}.$WareBasket"/>
        <set_value name="$allowIllegal" exact="@global.$GT_AIParameters.{$ship}.$AllowIllegal"/>
        
        <!-- Collect offers from all stations -->
        <do_all exact="$stations.count" counter="$i">
          <set_value name="$station" exact="$stations.{$i}"/>
          <set_value name="$stationDistance" exact="@$homeSector.gatedistance.{$station.sector}"/>
          <do_if value="not $stationDistance?">
            <set_value name="$stationDistance" exact="-1"/>
          </do_if>
          
          <do_if value="$stationDistance lt 0">
            <set_value name="$stationsSkipped" operation="add"/>
            <continue/>
          </do_if>
          
          <!-- Early exit when exceeding max distance -->
          <do_if value="$stationDistance gt $maxDistance">
            <set_value name="$stationsSkipped" exact="$stationsSkipped + ($stations.count - $i + 1)"/>
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') ⚡ EARLY EXIT: Reached distance limit at station ' + $i + '/' + $stations.count" chance="100"/>
            </do_if>
            <break/>
          </do_if>
          
          <!-- Validate station (threat avoidance now handled by vanilla pathfinding) -->
          <run_actions ref="md.GT_Utilities.GT_ValidateStation" result="$stationValid">
            <param name="station" value="$station"/>
            <param name="ship" value="$ship"/>
          </run_actions>
          
          <do_if value="$stationValid">
            <set_value name="$stationsEvaluated" operation="add"/>
            
            <!-- ✅ EFFICIENT WARE FILTERING: Query X4 engine for specific wares instead of post-filtering in MD -->
            <do_if value="$wareBasket? and $wareBasket.count gt 0">
              <!-- MANUAL WARE SELECTION MODE: Query only selected wares (much more efficient) -->
              <create_list name="$buyOffers"/>
              <create_list name="$sellOffers"/>
              
              <!-- Commented out - bloats log with per-station messages -->
              <!--<do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Search] 🎯 Manual ware selection active: ' + $wareBasket.count + ' wares in basket for station ' + $station.knownname" chance="100"/>
              </do_if>-->
              
              <do_all exact="$wareBasket.count" counter="$wareIdx">
                <set_value name="$currentWare" exact="$wareBasket.{$wareIdx}"/>
                
                <!-- Query buy offers for this specific ware -->
                <find_buy_offer buyer="$station" result="$wareSpecificBuyOffers" multiple="true" wares="$currentWare">
                  <match_buyer tradesknownto="$ship.owner"/>
                </find_buy_offer>
                
                <!-- Query sell offers for this specific ware -->
                <find_sell_offer seller="$station" result="$wareSpecificSellOffers" multiple="true" wares="$currentWare">
                  <match_seller tradesknownto="$ship.owner"/>
                </find_sell_offer>
                
                <!-- Log per-ware results -->
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 3">
                  <set_value name="$totalWareOffers" exact="$wareSpecificBuyOffers.count + $wareSpecificSellOffers.count"/>
                  <do_if value="$totalWareOffers gt 0">
                    <debug_text text="'[GT-Search]   ✓ ' + $currentWare.name + ': ' + $wareSpecificSellOffers.count + ' sell, ' + $wareSpecificBuyOffers.count + ' buy'" chance="100"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'[GT-Search]   ⊘ ' + $currentWare.name + ': no offers at this station'" chance="100"/>
                  </do_else>
                </do_if>
                
                <!-- Accumulate offers -->
                <do_all exact="$wareSpecificBuyOffers.count" counter="$k">
                  <append_to_list name="$buyOffers" exact="$wareSpecificBuyOffers.{$k}"/>
                </do_all>
                <do_all exact="$wareSpecificSellOffers.count" counter="$k">
                  <append_to_list name="$sellOffers" exact="$wareSpecificSellOffers.{$k}"/>
                </do_all>
              </do_all>
              
              <!-- Commented out - bloats log with per-station messages -->
              <!--<do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                <debug_text text="'[GT-Search] 📊 Total offers for basket: ' + $sellOffers.count + ' sell, ' + $buyOffers.count + ' buy from ' + $station.knownname" chance="100"/>
              </do_if>-->
            </do_if>
            <do_else>
              <!-- AUTO WARES MODE: Query all compatible wares (default behavior) -->
              <find_buy_offer buyer="$station" result="$buyOffers" multiple="true">
                <match_buyer tradesknownto="$ship.owner"/>
              </find_buy_offer>
              
              <find_sell_offer seller="$station" result="$sellOffers" multiple="true">
                <match_seller tradesknownto="$ship.owner"/>
              </find_sell_offer>
            </do_else>
            
            <set_value name="$stationOffers" exact="$buyOffers.count + $sellOffers.count"/>
            <set_value name="$offersFound" exact="$offersFound + $stationOffers"/>
            
            <!-- Filter offers -->
            <set_value name="$filteredIllegalCount" exact="0"/>
            
            <do_all exact="$sellOffers.count" counter="$j">
              <set_value name="$offer" exact="$sellOffers.{$j}"/>
              <set_value name="$isValid" exact="true"/>
              
              <!-- Filter checks -->
              <do_if value="$offer.ismission or $offer.iswareexchange or not $offer.available">
                <set_value name="$isValid" exact="false"/>
              </do_if>
              
              <!-- NOTE: Ware basket filtering now done at query level for efficiency (see line 661-686) -->
              
              <!-- Faction restrictions -->
              <do_if value="$isValid and $offer.restriction.factions.count gt 0">
                <set_value name="$isRestricted" exact="false"/>
                <do_if value="$offer.restriction.inverted == 0">
                  <do_if value="not $offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_if>
                <do_else>
                  <do_if value="$offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_else>
                <do_if value="$isRestricted">
                  <set_value name="$isValid" exact="false"/>
                </do_if>
              </do_if>
              
              <!-- Illegal ware check (simple type check, not faction-specific) -->
              <set_value name="$isIllegal" exact="false"/>
              <do_if value="$isValid and not $allowIllegal">
                <do_if value="$offer.ware.illegal">
                  <set_value name="$isIllegal" exact="true"/>
                </do_if>
              </do_if>
              
              <!-- NOTE: Blacklist validation now done in AI script -->
              <!-- MD only filters illegal wares and checks basic connectivity -->
              
              <do_if value="$isValid and not $isIllegal">
                <append_to_list name="$allSellOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$filteredIllegalCount" operation="add"/>
              </do_else>
            </do_all>
            
            <do_all exact="$buyOffers.count" counter="$j">
              <set_value name="$offer" exact="$buyOffers.{$j}"/>
              <set_value name="$isValid" exact="true"/>
              
              <!-- Filter checks -->
              <do_if value="$offer.ismission or $offer.iswareexchange or not $offer.available">
                <set_value name="$isValid" exact="false"/>
              </do_if>
              
              <!-- NOTE: Ware basket filtering now done at query level for efficiency (see line 661-686) -->
              
              <!-- Faction restrictions -->
              <do_if value="$isValid and $offer.restriction.factions.count gt 0">
                <set_value name="$isRestricted" exact="false"/>
                <do_if value="$offer.restriction.inverted == 0">
                  <do_if value="not $offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_if>
                <do_else>
                  <do_if value="$offer.restriction.factions.indexof.{$ship.owner}">
                    <set_value name="$isRestricted" exact="true"/>
                  </do_if>
                </do_else>
                <do_if value="$isRestricted">
                  <set_value name="$isValid" exact="false"/>
                </do_if>
              </do_if>
              
              <!-- Illegal ware check (simple type check, not faction-specific) -->
              <set_value name="$isIllegal" exact="false"/>
              <do_if value="$isValid and not $allowIllegal">
                <do_if value="$offer.ware.illegal">
                  <set_value name="$isIllegal" exact="true"/>
                </do_if>
              </do_if>
              
              <!-- NOTE: Buy offers (sell destinations) don't need sector blacklist check -->
              <!-- Only the BUY source sectors are blacklisted based on pathfinding failures -->
              
              <do_if value="$isValid and not $isIllegal">
                <append_to_list name="$allBuyOffers" exact="$offer"/>
              </do_if>
              <do_else>
                <set_value name="$filteredIllegalCount" operation="add"/>
              </do_else>
            </do_all>
            
            <set_value name="$totalFilteredIllegal" exact="$totalFilteredIllegal + $filteredIllegalCount"/>
          </do_if>
        </do_all>
        
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') Total offers collected: ' + $allSellOffers.count + ' sell, ' + $allBuyOffers.count + ' buy'" chance="100"/>
        </do_if>
        
        <!-- ===== CROSS-STATION TRADE MATCHING ===== -->
        <do_if value="$allSellOffers.count gt 0 and $allBuyOffers.count gt 0">
          
          <!-- ✅ OPTIMIZATION: Calculate available money ONCE (before loops, not inside) -->
          <set_value name="$availableMoney" exact="player.money"/>
          <set_value name="$homeBase" exact="@$ship.defaultorder.$home"/>
          <do_if value="$homeBase? and $homeBase.exists and $homeBase.isclass.station">
            <set_value name="$availableMoney" exact="$homeBase.money"/>
          </do_if>
          
          <!-- ✅ OPTIMIZATION: Pre-calculate station distances to avoid repeated lookups -->
          <!-- Note: Vanilla will handle blacklist routing when trade executes -->
          <set_value name="$stationDistanceCache" exact="table[]"/>
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$sellStation" exact="$allSellOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$sellStation}?">
              <!-- Calculate basic distance (vanilla will route around blacklist) -->
              <set_value name="$stationDistanceCache.{$sellStation}" exact="@$homeSector.gatedistance.{$sellStation.sector}"/>
              <!-- Convert null to -1 for disconnected sectors -->
              <do_if value="not $stationDistanceCache.{$sellStation}? or typeof $stationDistanceCache.{$sellStation} != datatype.integer">
                <set_value name="$stationDistanceCache.{$sellStation}" exact="-1"/>
              </do_if>
            </do_if>
          </do_all>
          <do_all exact="$allBuyOffers.count" counter="$i">
            <set_value name="$buyStation" exact="$allBuyOffers.{$i}.owner"/>
            <do_if value="not $stationDistanceCache.{$buyStation}?">
              <!-- Calculate basic distance (vanilla will route around blacklist) -->
              <set_value name="$stationDistanceCache.{$buyStation}" exact="@$homeSector.gatedistance.{$buyStation.sector}"/>
              <!-- Convert null to -1 for disconnected sectors -->
              <do_if value="not $stationDistanceCache.{$buyStation}? or typeof $stationDistanceCache.{$buyStation} != datatype.integer">
                <set_value name="$stationDistanceCache.{$buyStation}" exact="-1"/>
              </do_if>
            </do_if>
          </do_all>
          
          <!-- Index offers by ware -->
          <set_value name="$sellOffersByWare" exact="table[]"/>
          <set_value name="$buyOffersByWare" exact="table[]"/>
          
          <do_all exact="$allSellOffers.count" counter="$i">
            <set_value name="$offer" exact="$allSellOffers.{$i}"/>
            <do_if value="not $sellOffersByWare.{$offer.ware}?">
              <set_value name="$sellOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$sellOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <do_all exact="$allBuyOffers.count" counter="$j">
            <set_value name="$offer" exact="$allBuyOffers.{$j}"/>
            <do_if value="not $buyOffersByWare.{$offer.ware}?">
              <set_value name="$buyOffersByWare.{$offer.ware}" exact="[]"/>
            </do_if>
            <append_to_list name="$buyOffersByWare.{$offer.ware}" exact="$offer"/>
          </do_all>
          
          <set_value name="$crossStationBestTrade" exact="null"/>
          <set_value name="$crossStationBestScore" exact="0"/>
          
          <!-- ✅ OPTIMIZED: Dual-tracking for inline conflict resolution -->
          <set_value name="$nonConflictedBestTrade" exact="null"/>
          <set_value name="$nonConflictedBestScore" exact="0"/>
          
          <!-- Match offers of same ware -->
          <do_all exact="$sellOffersByWare.keys.count" counter="$wareIdx">
            <set_value name="$ware" exact="$sellOffersByWare.keys.{$wareIdx}"/>
            
            <do_if value="$buyOffersByWare.{$ware}?">
              <set_value name="$sellOffersForWare" exact="$sellOffersByWare.{$ware}"/>
              <set_value name="$buyOffersForWare" exact="$buyOffersByWare.{$ware}"/>
              
                <do_all exact="$sellOffersForWare.count" counter="$i">
                  <set_value name="$sellOffer" exact="$sellOffersForWare.{$i}"/>
                  
                  <do_all exact="$buyOffersForWare.count" counter="$j">
                    <set_value name="$buyOffer" exact="$buyOffersForWare.{$j}"/>
                    
                    <!-- Different stations only -->
                    <do_if value="$sellOffer.owner != $buyOffer.owner">
                    <!-- CRITICAL: Check if ship can dock at BOTH stations (buy and sell) -->
                    <set_value name="$canDockAtBuyStation" exact="$sellOffer.owner.dockingallowed.{$ship}"/>
                    <set_value name="$canDockAtSellStation" exact="$buyOffer.owner.dockingallowed.{$ship}"/>
                    
                    <do_if value="not $canDockAtBuyStation or not $canDockAtSellStation">
                      <!-- Ship cannot dock at one or both stations - skip this trade -->
                      <set_value name="$tradesRejectedDocking" operation="add"/>
                      <continue/>
                    </do_if>
                    
                    <!-- Calculate trade details -->
                    <set_value name="$buyPrice" exact="$sellOffer.unitprice"/>
                    <set_value name="$sellPrice" exact="$buyOffer.unitprice"/>
                    
                    <!-- ✅ OPTIMIZED: Money calculated once outside loops, just use it -->
                    <!-- Calculate max affordable -->
                    <set_value name="$maxAffordable" exact="99999"/>
                    <do_if value="$buyPrice gt 0">
                      <set_value name="$maxAffordable" exact="($availableMoney / $buyPrice)i"/>
                    </do_if>
                    
                    <set_value name="$maxAmount" exact="[$sellOffer.amount, $buyOffer.amount, $ship.cargo.{$sellOffer.ware}.max, $maxAffordable].min"/>
                    
                    <do_if value="$maxAmount gt 0">
                      <set_value name="$investment" exact="$buyPrice * $maxAmount"/>
                      <set_value name="$revenue" exact="$sellPrice * $maxAmount"/>
                      <set_value name="$profit" exact="$revenue - $investment"/>
                      
                      <!-- ✅ OPTIMIZED: Inline ROI calculation (avoid run_actions overhead) -->
                      <set_value name="$roi" exact="if $investment gt 0 then (($profit * 100) / $investment) else 100"/>
                      
                      <!-- Check thresholds -->
                      <set_value name="$roiThreshold" exact="$minROI"/>
                      <set_value name="$profitThreshold" exact="$minAbsoluteProfit"/>
                      <do_if value="$gt_AdvancedAnalytics">
                        <set_value name="$roiThreshold" exact="$roiThreshold * 0.95"/>
                        <set_value name="$profitThreshold" exact="($profitThreshold * 0.95)i"/>
                      </do_if>
                      
                      <do_if value="$roi ge $roiThreshold and $profit ge $profitThreshold">
                        <!-- ✅ OPTIMIZED: Use cached distances instead of repeated lookups -->
                        <set_value name="$buyDistance" exact="@$stationDistanceCache.{$sellOffer.owner}"/>
                        <do_if value="not $buyDistance? or typeof $buyDistance != datatype.integer">
                          <set_value name="$buyDistance" exact="-1"/>
                        </do_if>
                        
                        <do_if value="$sellOffer.owner.sector == $buyOffer.owner.sector">
                          <set_value name="$sellDistance" exact="0"/>
                        </do_if>
                        <do_else>
                          <!-- Calculate basic inter-sector distance (vanilla will route around blacklist) -->
                          <set_value name="$sellDistance" exact="@$sellOffer.owner.sector.gatedistance.{$buyOffer.owner.sector}"/>
                          <do_if value="not $sellDistance? or typeof $sellDistance != datatype.integer">
                            <set_value name="$sellDistance" exact="-1"/>
                          </do_if>
                        </do_else>
                        
                        <!-- Filter genuinely unreachable trades (sectors completely disconnected) -->
                        <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
                          <debug_text text="'[GT-Search] ⛔ UNREACHABLE: Trade route has disconnected sectors' + 
                            '\n  Ware: ' + @$sellOffer.ware.name + 
                            '\n  Buy: ' + @$sellOffer.owner.knownname + ' (sector: ' + @$sellOffer.owner.sector.knownname + ')' +
                            '\n  Sell: ' + @$buyOffer.owner.knownname + ' (sector: ' + @$buyOffer.owner.sector.knownname + ')' +
                            '\n  Distance: Buy=' + $buyDistance + ' jumps, Sell=' + $sellDistance + ' jumps' +
                            '\n  → Trade filtered: No path exists (not a blacklist issue)'" 
                            chance="100"/>
                          <continue/>
                        </do_if>
                        
                        <!-- Note: Station/sector blacklist checks removed - vanilla will validate when executing trade -->
                        <!-- Failed trade filtering moved to AFTER best trade selection (post-loop) -->
                        
                        <set_value name="$totalDistance" exact="$buyDistance + $sellDistance"/>
                        
                        <do_if value="$totalDistance gt $maxDistance">
                          <continue/>
                        </do_if>
                        
                        <!-- Calculate efficiency with distance penalty -->
                        <set_value name="$adjustedDistance" exact="$totalDistance * $distancePenaltyMultiplier"/>
                        <set_value name="$efficiency" exact="if $adjustedDistance gt 0 then ($profit / $adjustedDistance) else $profit"/>
                        
                        <!-- ✅ CRITICAL: Check if this sector pair previously failed for THIS ship -->
                        <set_value name="$isFailedSectorPair" exact="false"/>
                        <do_if value="$failedTrades.count gt 0">
                          <do_all exact="$failedTrades.count" counter="$failIdx">
                            <set_value name="$failedTrade" exact="$failedTrades.{$failIdx}"/>
                            
                            <!-- Check if SECTOR PAIR matches (buy sector → sell sector) -->
                            <do_if value="$failedTrade.$BuySector? and $failedTrade.$SellSector?">
                              <do_if value="@$sellOffer.owner.sector == $failedTrade.$BuySector and 
                                            @$buyOffer.owner.sector == $failedTrade.$SellSector">
                                <set_value name="$isFailedSectorPair" exact="true"/>
                                <break/>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_if>
                        
                        <!-- ✅ NEW: Collect all valid trades (non-failed sectors) for AI validation -->
                        <do_if value="not $isFailedSectorPair">
                          <set_value name="$trade" exact="table[
                            $BuyOffer = $sellOffer,
                            $SellOffer = $buyOffer,
                            $Amount = $maxAmount,
                            $Profit = $profit,
                            $ROI = $roi,
                            $Score = $efficiency,
                            $BuyPrice = $buyPrice,
                            $SellPrice = $sellPrice,
                            $Distance = $totalDistance,
                            $Risk = 0
                          ]"/>
                          
                          <!-- Add to trade list (collect all, will sort and trim later) -->
                          <append_to_list name="$tradeList" exact="$trade"/>
                          
                          <!-- Also track overall best for backward compatibility -->
                          <do_if value="$efficiency gt $crossStationBestScore">
                            <set_value name="$crossStationBestScore" exact="$efficiency"/>
                            <set_value name="$crossStationBestTrade" exact="$trade"/>
                          </do_if>
                          
                          <!-- ✅ OPTIMIZED: Inline conflict checking for fleet coordination -->
                          <set_value name="$routeConflicted" exact="false"/>
                          <do_if value="global.$GT_ActiveTradeReservations? and global.$GT_GlobalSettings.$Fleet.$EnableFleetCoordination">
                            <do_all exact="global.$GT_ActiveTradeReservations.keys.count" counter="$resIdx">
                              <set_value name="$otherShip" exact="global.$GT_ActiveTradeReservations.keys.{$resIdx}"/>
                              <set_value name="$otherRoute" exact="global.$GT_ActiveTradeReservations.{$otherShip}"/>
                              
                              <do_if value="$otherShip != $ship and $otherShip.exists">
                                <do_if value="$otherRoute.$BuyStation == $sellOffer.owner and 
                                              $otherRoute.$SellStation == $buyOffer.owner and 
                                              $otherRoute.$Ware == $sellOffer.ware">
                                  <set_value name="$routeConflicted" exact="true"/>
                                  <break/>
                                </do_if>
                              </do_if>
                            </do_all>
                          </do_if>
                          
                          <!-- ✅ OPTIMIZED: Also track best non-conflicted trade (no bubble sort!) -->
                          <!-- Also exclude failed sector pairs from non-conflicted tracking -->
                          <do_if value="not $routeConflicted and not $isFailedSectorPair and $efficiency gt $nonConflictedBestScore">
                            <set_value name="$nonConflictedBestScore" exact="$efficiency"/>
                            <set_value name="$nonConflictedBestTrade" exact="$crossStationBestTrade"/>
                          </do_if>
                          
          <!-- Cache trade if Level 12+ -->
          <do_if value="$skillLevel ge 12 and global.$GT_GlobalSettings.$Fleet.$EnableTradeCache">
            <set_value name="$cacheProfitThreshold" exact="global.$GT_GlobalSettings.$Fleet.$CacheProfitThreshold"/>
            <do_if value="$roi ge $cacheProfitThreshold">
              <!-- ✅ FIX: Use string keys at ALL levels - X4 won't let you mix object keys with string keys -->
              <!-- Convert ware object to string using ware.id property -->
              <!-- ✅ LIST-BASED CACHE: Append trade entry to flat list -->
              <!-- Validate required data exists before caching -->
              <do_if value="$sellOffer.ware? and $sellOffer.owner? and $buyOffer.owner?">
                <!-- Ensure cache list exists -->
                <do_if value="not global.$GT_TradeCache?">
                  <set_value name="global.$GT_TradeCache" exact="[]"/>
                </do_if>
                
                <!-- Append trade entry as flat table to list -->
                <!-- ✅ CRITICAL: Store from SHIP's perspective!
                     Ship BUYS from station's SELL offer
                     Ship SELLS to station's BUY offer -->
                <append_to_list name="global.$GT_TradeCache" exact="table[
                  $WareId = $sellOffer.ware.id,
                  $WareName = $sellOffer.ware.name,
                  $SellStationId = $buyOffer.owner.idcode,
                  $BuyStationId = $sellOffer.owner.idcode,
                  $BuyOffer = $sellOffer,
                  $SellOffer = $buyOffer,
                  $Amount = $maxAmount,
                  $Profit = $profit,
                  $ROI = $roi,
                  $BuyPrice = $buyPrice,
                  $SellPrice = $sellPrice,
                  $Distance = $totalDistance,
                  $Timestamp = player.age
                ]"/>
                
                <!-- DEBUG: Log successful cache -->
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ✅ Trade cached: ' + $sellOffer.ware.name + ', ROI=' + $roi + '%, Profit=' + ($profit/100) + ' Cr, Distance=' + $totalDistance + ' jumps'" chance="100"/>
                </do_if>
              </do_if>
              <do_else>
                <!-- DEBUG: Log skipped cache (invalid data) -->
                <do_if value="@global.$GT_Config.$Debug.$Enabled and @global.$GT_Config.$Debug.$LogLevel ge 2">
                  <debug_text text="'[GT-Cache] ⚠ Skipped caching trade with invalid data'" chance="100"/>
                </do_if>
              </do_else>
            </do_if>
          </do_if>
                        </do_if>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_all>
              </do_all>
            </do_if>
          </do_all>
          
          <!-- ✅ OPTIMIZED: Smart trade selection - prefer non-conflicted, fallback to best overall -->
          <do_if value="$nonConflictedBestTrade">
            <set_value name="$bestTrade" exact="$nonConflictedBestTrade"/>
            <set_value name="$bestScore" exact="$nonConflictedBestScore"/>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-FLEET] (' + $ship.idcode + ') ✅ Selected non-conflicted trade (Score: ' + $nonConflictedBestScore + ')'" chance="100"/>
            </do_if>
          </do_if>
          <do_elseif value="$crossStationBestTrade">
            <set_value name="$bestTrade" exact="$crossStationBestTrade"/>
            <set_value name="$bestScore" exact="$crossStationBestScore"/>
            
            <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
              <debug_text text="'[GT-FLEET] (' + $ship.idcode + ') ⚠️ Using best trade (Score: ' + $crossStationBestScore + ') - may conflict with active fleet routes'" chance="100"/>
            </do_if>
          </do_elseif>
        </do_if>
        
        <!-- ✅ NEW: Sort trade list by efficiency (Score) descending and trim to top 20 -->
        <do_if value="$tradeList.count gt 0">
          <!-- Bubble sort by Score descending (X4 MD doesn't have built-in sort) -->
          <do_if value="$tradeList.count gt 1">
            <do_all exact="$tradeList.count" counter="$i">
              <do_all exact="$tradeList.count - $i" counter="$j">
                <do_if value="$tradeList.{$j}.$Score lt $tradeList.{$j + 1}.$Score">
                  <!-- Swap -->
                  <set_value name="$temp" exact="$tradeList.{$j}"/>
                  <set_value name="$tradeList.{$j}" exact="$tradeList.{$j + 1}"/>
                  <set_value name="$tradeList.{$j + 1}" exact="$temp"/>
                </do_if>
              </do_all>
            </do_all>
          </do_if>
          
          <!-- Trim to top 20 -->
          <do_if value="$tradeList.count gt $maxTradesToReturn">
            <do_all exact="$tradeList.count - $maxTradesToReturn" counter="$trim">
              <remove_value name="$tradeList.{$maxTradesToReturn + 1}"/>
            </do_all>
          </do_if>
          
          <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') 📋 Collected ' + $tradeList.count + ' valid trades for AI validation'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- Failed trade check removed from SearchLiveTrades - now done in SearchTradeRoutes after result extraction -->
        
        <!-- DEBUG: Log selected trade docking status -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch and $bestTrade and $bestTrade.$BuyStation? and $bestTrade.$SellStation?">
          <set_value name="$canDockBuy" exact="@$bestTrade.$BuyStation.dockingallowed.{$ship}"/>
          <set_value name="$canDockSell" exact="@$bestTrade.$SellStation.dockingallowed.{$ship}"/>
          <set_value name="$buyDockStatus" exact="if $canDockBuy then 'OK' else 'FAIL'"/>
          <set_value name="$sellDockStatus" exact="if $canDockSell then 'OK' else 'FAIL'"/>
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') SELECTED TRADE DOCKING: Ship=' + $ship.class + ' | BUY=' + @$bestTrade.$BuyStation.knownname + ' [' + $buyDockStatus + '] | SELL=' + @$bestTrade.$SellStation.knownname + ' [' + $sellDockStatus + ']'" chance="100"/>
        </do_if>
        
        <!-- DEBUG: Log docking restriction statistics -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <do_if value="$tradesRejectedDocking gt 0">
            <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') DOCKING RESTRICTIONS: Rejected ' + $tradesRejectedDocking + ' trade pairs due to incompatible docking (ship class: ' + $ship.class + ')'" chance="100"/>
          </do_if>
        </do_if>
        
        <!-- Return results via global variable -->
        <set_value name="global.$GT_SearchResult" exact="table[
          $BestTrade = $bestTrade,
          $BestScore = $bestScore,
          $StationsEvaluated = $stationsEvaluated,
          $OffersFound = $offersFound,
          $TradeList = $tradeList
        ]"/>
      </actions>
    </cue>
    
    <!-- Search for Sell Opportunities -->
    <cue name="SearchSellOpportunities" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <!-- Receive parameters directly -->
        <set_value name="$params" exact="event.param"/>
        <set_value name="$ship" exact="$params.$Ship"/>
        <set_value name="$maxDistance" exact="$params.$MaxDistance"/>
        <set_value name="$minProfit" exact="$params.$MinProfit"/>
        
        <!-- DEBUG: Sell search start -->
        <do_if value="global.$GT_Config.$Debug.$Enabled and global.$GT_Config.$Debug.$TradeSearch">
          <debug_text text="'[GalaxyTrader MK3 DEBUG] (' + $ship.idcode + ') === SELL SEARCH START ===' + '\nShip: ' + $ship.knownname + '\nCurrent Sector: ' + $ship.sector.knownname + '\nMax Distance: ' + $maxDistance + ' jumps' + '\nMin Profit: ' + $minProfit + ' Cr'" chance="100"/>
        </do_if>
        
        <!-- Find best sell location for current cargo -->
        <set_value name="$bestOffer" exact="null"/>
        <set_value name="$bestPrice" exact="0"/>
        <set_value name="$bestAmount" exact="0"/>
        
        <!-- Get ship's current cargo -->
        <set_value name="$currentCargo" exact="$ship.cargo.list"/>
        
        <do_if value="$currentCargo.count gt 0">
          <!-- For each ware in cargo, find best sell location -->
          <do_all exact="$currentCargo.count" counter="$i">
            <set_value name="$ware" exact="$currentCargo.{$i}"/>
            <set_value name="$amount" exact="$ship.cargo.{$ware}.count"/>
            
            <!-- Find buy offers for this ware -->
            <find_buy_offer space="player.galaxy" result="$buyOffers" multiple="true" wares="$ware">
              <match_buyer tradesknownto="$ship.owner">
                <match_gate_distance object="$ship" max="$maxDistance"/>
              </match_buyer>
            </find_buy_offer>
            
            <!-- Find best price -->
            <do_all exact="$buyOffers.count" counter="$j">
              <set_value name="$offer" exact="$buyOffers.{$j}"/>
              <set_value name="$tradeAmount" exact="[$amount, $offer.amount].min"/>
              <set_value name="$profit" exact="$offer.unitprice * $tradeAmount"/>
              
              <do_if value="$profit gt $bestPrice and $offer.available">
                <set_value name="$bestOffer" exact="$offer"/>
                <set_value name="$bestPrice" exact="$profit"/>
                <set_value name="$bestAmount" exact="$tradeAmount"/>
              </do_if>
            </do_all>
          </do_all>
          
          <!-- Execute best sell if found -->
          <do_if value="$bestOffer and $bestPrice gt $minProfit">
            <debug_text text="'[GalaxyTrader MK3] ' + $ship.knownname + ' found sell opportunity'" chance="100"/>
            
            <!-- Create trade order with blacklist routing enabled -->
            <!-- internal="true" ensures pathfinding routes around blacklisted sectors -->
            <create_trade_order object="$ship" tradeoffer="$bestOffer" amount="$bestAmount" immediate="false" internal="true"/>
            
            <!-- Signal back to AI script: Trade Found -->
            <signal_objects object="$ship" param="'GT_Trade_Found'"/>
          </do_if>
          <do_else>
            <!-- Signal back to AI script: No Trade Found -->
            <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
          </do_else>
        </do_if>
        <do_else>
          <!-- Signal back to AI script: No Trade Found (no cargo) -->
          <signal_objects object="$ship" param="'GT_No_Trade_Found'"/>
        </do_else>
        
        <!-- CRITICAL: Clean up AI parameters -->
        <do_if value="global.$GT_AIParameters? and global.$GT_AIParameters.{$ship}?">
          <remove_value name="global.$GT_AIParameters.{$ship}"/>
        </do_if>
      </actions>
    </cue>
  </cues>
</mdscript>
