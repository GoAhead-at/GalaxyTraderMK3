<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GT_Utilities" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/md.xsd">
  <cues>
    <!-- ========================================= -->
    <!-- NOTIFICATION SYSTEM -->
    <!-- ========================================= -->
    
    <!-- Show Notification -->
    <library name="GT_ShowNotification" purpose="run_actions">
      <params>
        <param name="text" comment="Notification text"/>
        <param name="category" default="'info'" comment="Notification category"/>
        <param name="timeout" default="5s" comment="Notification timeout"/>
      </params>
      <actions>
        <show_notification text="$text" timeout="$timeout"/>
      </actions>
    </library>
    
    <!-- ========================================= -->
    <!-- VALIDATION HELPERS -->
    <!-- ========================================= -->
    
    <!-- Validate Ship -->
    <library name="GT_ValidateShip" purpose="run_actions">
      <params>
        <param name="ship" comment="Ship object to validate"/>
      </params>
      <actions>
        <do_if value="$ship? and $ship.exists and $ship.isoperational and not $ship.iswreck and $ship.pilot">
          <return value="true"/>
        </do_if>
        <return value="false"/>
      </actions>
    </library>
    
    <!-- Validate Station -->
    <library name="GT_ValidateStation" purpose="run_actions">
      <params>
        <param name="station" comment="Station object to validate"/>
        <param name="ship" default="null" comment="Optional: Ship to check threat avoidance for"/>
      </params>
      <actions>
        <do_if value="$station? and $station.exists and $station.isoperational">
          <!-- Check threat avoidance if ship is provided -->
          <do_if value="$ship and @global.$GT_GlobalSettings.$ThreatAvoidance.$Enabled">
            <set_value name="$sectorMacro" exact="@$station.sector.macro.id"/>
            
            <!-- Check if sector has detected threats -->
            <do_if value="$sectorMacro and global.$GT_ThreatIntelligence? and global.$GT_ThreatIntelligence.{$sectorMacro}?">
              <set_value name="$threatLevel" exact="@global.$GT_ThreatIntelligence.{$sectorMacro}.$ThreatLevel"/>
              <set_value name="$riskTolerance" exact="@global.$GT_AIParameters.{$ship}.$RiskTolerance"/>
              
              <!-- Default risk tolerance: 0 (avoid all threats) -->
              <do_if value="not $riskTolerance?">
                <set_value name="$riskTolerance" exact="0"/>
              </do_if>
              
              <!-- Reject station if threat level exceeds ship's risk tolerance -->
              <do_if value="$threatLevel gt $riskTolerance">
                <return value="false"/> <!-- Sector too dangerous for this ship -->
              </do_if>
            </do_if>
          </do_if>
          
          <return value="true"/>
        </do_if>
        <return value="false"/>
      </actions>
    </library>
    
    <!-- Check if Ware is Allowed -->
    <library name="GT_IsWareAllowed" purpose="run_actions">
      <params>
        <param name="ware" comment="Ware to check"/>
        <param name="allowIllegal" default="true" comment="Whether to allow illegal wares"/>
        <param name="zone" default="null" comment="Optional: Zone context for illegal check"/>
        <param name="shipOwner" default="null" comment="Optional: Ship owner for license check"/>
      </params>
      <actions>
        <!-- Context-aware illegal check when zone and ship owner are provided -->
        <do_if value="not $allowIllegal">
          <do_if value="$zone and $shipOwner">
            <!-- Check if ware is illegal to police faction in this zone, considering ship owner's licenses -->
            <set_value name="$policeFaction" exact="$zone.policefaction"/>
            <do_if value="$policeFaction and $policeFaction != $shipOwner">
              <do_if value="$ware.illegalto.{$policeFaction}.{$shipOwner}">
                <return value="false"/>
              </do_if>
            </do_if>
          </do_if>
          <do_else>
            <!-- Fallback: Global illegal check (may be overly restrictive - use context-aware check when possible) -->
            <do_if value="$ware.illegal">
              <return value="false"/>
            </do_if>
          </do_else>
        </do_if>
        
        <!-- Check blacklist -->
        <do_if value="global.$GT_Config.$WareFilter.$BlacklistedWares?">
          <do_all exact="global.$GT_Config.$WareFilter.$BlacklistedWares.count" counter="$i">
            <do_if value="global.$GT_Config.$WareFilter.$BlacklistedWares.{$i} == $ware">
              <return value="false"/>
            </do_if>
          </do_all>
        </do_if>
        
        <!-- Check whitelist if exists -->
        <do_if value="global.$GT_Config.$WareFilter.$WhitelistedWares? and global.$GT_Config.$WareFilter.$WhitelistedWares.count gt 0">
          <do_all exact="global.$GT_Config.$WareFilter.$WhitelistedWares.count" counter="$j">
            <do_if value="global.$GT_Config.$WareFilter.$WhitelistedWares.{$j} == $ware">
              <return value="true"/>
            </do_if>
          </do_all>
          <return value="false"/>
        </do_if>
        
        <return value="true"/>
      </actions>
    </library>
    
    <!-- ========================================= -->
    <!-- XP CALCULATIONS -->
    <!-- ========================================= -->
    
    <!-- Calculate XP Award -->
    <library name="GT_CalculateXP" purpose="run_actions">
      <params>
        <param name="ship" comment="Ship that completed trade"/>
        <param name="profit" comment="Trade profit amount"/>
        <param name="jumps" default="1" comment="Number of jumps"/>
      </params>
      <actions>
        <!-- Get base XP from config -->
        <set_value name="$baseXP" exact="@global.$GT_Config.$XP.$BaseXPPerTrade"/>
        <do_if value="not $baseXP">
          <set_value name="$baseXP" exact="100"/>
        </do_if>
        
        <!-- Calculate distance bonus -->
        <set_value name="$distanceBonusPerJump" exact="@global.$GT_Config.$XP.$DistanceBonus"/>
        <do_if value="not $distanceBonusPerJump">
          <set_value name="$distanceBonusPerJump" exact="20"/>
        </do_if>
        <set_value name="$distanceBonus" exact="$jumps * $distanceBonusPerJump"/>
        
        <!-- Calculate risk bonus -->
        <set_value name="$riskBonus" exact="0"/>
              <!-- Risk bonus calculation disabled - sector security property uncertain -->
      <set_value name="$riskBonus" exact="0"/>
        
        <!-- Return total XP -->
        <return value="$baseXP + $distanceBonus + $riskBonus"/>
      </actions>
    </library>
    
    <!-- ========================================= -->
    <!-- CONFIGURATION HELPERS -->
    <!-- ========================================= -->
    
    <!-- Get Configuration Value -->
    <library name="GT_GetConfigValue" purpose="run_actions">
      <params>
        <param name="section" comment="Configuration section"/>
        <param name="key" comment="Configuration key"/>
        <param name="default" default="null" comment="Default value if not found"/>
      </params>
      <actions>
        <do_if value="global.$GT_Config? and global.$GT_Config.{$section}? and global.$GT_Config.{$section}.{$key}?">
          <return value="@global.$GT_Config.{$section}.{$key}"/>
        </do_if>
        <return value="$default"/>
      </actions>
    </library>
    
    <!-- ========================================= -->
    <!-- TRADE FILTERING AND ANALYSIS -->
    <!-- ========================================= -->
    
    <!-- Filter Trade Offer -->
    <library name="GT_FilterTradeOffer" purpose="run_actions">
      <params>
        <param name="offer" comment="Trade offer to filter"/>
        <param name="ship" comment="Ship that would execute the trade"/>
        <param name="allowIllegal" default="true" comment="Whether to allow illegal wares"/>
      </params>
      <actions>
        <!-- Check if ware is allowed (with context for illegal check) -->
        <run_actions ref="GT_IsWareAllowed" result="$wareAllowed">
          <param name="ware" value="$offer.ware"/>
          <param name="allowIllegal" value="$allowIllegal"/>
          <param name="zone" value="$offer.owner.zone"/>
          <param name="shipOwner" value="$ship.owner"/>
        </run_actions>
        <do_if value="not $wareAllowed">
          <return value="false"/>
        </do_if>
        
        <!-- Check if ship can carry this ware -->
        <do_if value="$ship.cargo.{$offer.ware}.max le 0">
          <return value="false"/>
        </do_if>
        
        <!-- Check if offer has sufficient amount -->
        <do_if value="$offer.amount le 0">
          <return value="false"/>
        </do_if>
        
        <return value="true"/>
      </actions>
    </library>
    
    <!-- Calculate Trade Profit -->
    <library name="GT_CalculateProfit" purpose="run_actions">
      <params>
        <param name="buyPrice" comment="Price to buy at"/>
        <param name="sellPrice" comment="Price to sell at"/>
        <param name="amount" comment="Amount to trade"/>
        <param name="expenses" default="0Cr" comment="Additional expenses"/>
      </params>
      <actions>
        <set_value name="$revenue" exact="$sellPrice * $amount"/>
        <set_value name="$cost" exact="$buyPrice * $amount"/>
        <return value="$revenue - $cost - $expenses"/>
      </actions>
    </library>
    
    <!-- Calculate ROI (Return on Investment) -->
    <library name="GT_CalculateROI" purpose="run_actions">
      <params>
        <param name="investment" comment="Investment amount in credits"/>
        <param name="profit" comment="Profit amount in credits"/>
      </params>
      <actions>
        <!-- Returns ROI as percentage (21 = 21%) to avoid integer division issues -->
        <!-- OLD approach with decimals (0.15 = 15%) failed due to X4 MD integer truncation -->
        <do_if value="$investment gt 0">
          <return value="(($profit * 100) / $investment)"/>
        </do_if>
        <return value="0"/>
      </actions>
    </library>
    
    <!-- Calculate Trade Risk -->
    <library name="GT_CalculateRisk" purpose="run_actions">
      <params>
        <param name="sector" comment="Sector to assess risk for"/>
        <param name="ship" comment="Ship that would travel there"/>
      </params>
      <actions>
              <!-- Calculate security based on faction relations and sector characteristics -->
      <set_value name="$sectorSecurity" exact="0.5"/>
      
      <do_if value="$sector? and $sector.owner?">
                      <set_value name="$relation" exact="faction.player.relationto.{$sector.owner}"/>
        <do_if value="$relation ge 0.1">
          <set_value name="$sectorSecurity" exact="1.0"/>  <!-- Friendly = very safe -->
        </do_if>
        <do_elseif value="$relation ge -0.1">
          <set_value name="$sectorSecurity" exact="0.75"/> <!-- Neutral = safe -->
        </do_elseif>
        <do_elseif value="$relation ge -0.5">
          <set_value name="$sectorSecurity" exact="0.5"/>  <!-- Hostile = moderate -->
        </do_elseif>
        <do_else>
          <set_value name="$sectorSecurity" exact="0.25"/> <!-- Very hostile = dangerous -->
        </do_else>
        
        <!-- Extra danger for Xenon/Kha'ak sectors -->
        <do_if value="$sector.owner.id == 'xenon' or $sector.owner.id == 'khaak'">
          <set_value name="$sectorSecurity" exact="0.1"/>
        </do_if>
      </do_if>
      
      <!-- Base risk from security level -->
      <set_value name="$securityRisk" exact="1.0 - $sectorSecurity"/>
        
        <!-- Distance risk factor -->
        <set_value name="$distance" exact="$ship.distanceto.{$sector}"/>
        <set_value name="$distanceRisk" exact="[$distance / 100000, 0.5].min"/>
        
        <!-- Faction relation risk -->
        <set_value name="$relationRisk" exact="0"/>
        <do_if value="$sector.owner != $ship.owner">
          <set_value name="$relation" exact="$ship.owner.relationto.{$sector.owner}"/>
          <do_if value="$relation lt 0">
            <set_value name="$relationRisk" exact="($relation * -1) / 100"/>
          </do_if>
        </do_if>
        
        <!-- Combined risk (weighted average) -->
        <set_value name="$combinedRisk" exact="($securityRisk * 0.5) + ($distanceRisk * 0.3) + ($relationRisk * 0.2)"/>
        <return value="[$combinedRisk, 1.0].min"/>
      </actions>
    </library>
    
    <!-- ========================================= -->
    <!-- MARKET ANALYSIS -->
    <!-- ========================================= -->
    
    <!-- Find Best Trade -->
    <library name="GT_FindBestTrade">
      <params>
        <param name="ship" comment="Ship to find trade for"/>
        <param name="warebasket" comment="List of allowed wares"/>
      </params>
      <actions>
        <set_value name="$return" exact="null"/>
        <set_value name="$bestProfit" exact="0"/>
        
        <!-- Find buy offers -->
        <find_buy_offer space="player.galaxy" result="$buyoffers" multiple="true">
          <match_buyer tradesknownto="@this.owner"/>
          <match_seller tradesknownto="@this.owner"/>
        </find_buy_offer>
        
        <!-- Evaluate trades -->
        <do_all exact="[$buyoffers.count, 20].min" counter="$i">
          <set_value name="$buyoffer" exact="$buyoffers.{$i}"/>
          
          <!-- Check if ware is in basket -->
          <do_if value="$warebasket.indexof.{$buyoffer.ware} != -1">
            <!-- Find sell offers -->
            <find_sell_offer buyer="$buyoffer.buyer" wares="$buyoffer.ware" result="$selloffer">
              <match_seller tradesknownto="@this.owner"/>
            </find_sell_offer>
            
            <do_if value="$selloffer">
              <!-- Calculate profit -->
              <set_value name="$amount" exact="[this.ship.cargo.{$buyoffer.ware}.free, $buyoffer.amount, $selloffer.amount].min"/>
              <do_if value="$amount gt 0">
                <set_value name="$profit" exact="($selloffer.unitprice - $buyoffer.unitprice) * $amount"/>
                
                <!-- Check ROI and absolute profit thresholds -->
                <set_value name="$minROI" exact="@global.$GT_Config.$Trading.$MinROI"/>
                <do_if value="not $minROI">
                  <set_value name="$minROI" exact="0.10"/>
                </do_if>
                
                <set_value name="$minAbsoluteProfit" exact="@global.$GT_Config.$Trading.$MinAbsoluteProfit"/>
                <do_if value="not $minAbsoluteProfit">
                  <set_value name="$minAbsoluteProfit" exact="10000"/> <!-- 100 Cr in RAW format -->
                </do_if>
                
                <!-- Calculate ROI -->
                <set_value name="$investment" exact="$buyoffer.unitprice * $amount"/>
                <set_value name="$roi" exact="if $investment gt 0 then (($profit * 100.0) / $investment) else 0.0"/>
                
                <do_if value="$roi ge ($minROI * 100) and $profit ge $minAbsoluteProfit and $profit gt $bestProfit">
                  <set_value name="$bestProfit" exact="$profit"/>
                  <set_value name="$return" exact="$buyoffer"/>
                </do_if>
              </do_if>
            </do_if>
          </do_if>
        </do_all>
      </actions>
    </library>
    
    <!-- Analyze Route Threat -->
    <library name="GT_AnalyzeRouteThreat" purpose="run_actions">
      <params>
        <param name="buyStation" comment="Station to buy from"/>
        <param name="sellStation" comment="Station to sell to"/>
        <param name="ship" comment="Ship for context"/>
      </params>
      <actions>
        <!-- Initialize return table -->
        <set_value name="$return" exact="table[]"/>
        <set_value name="$return.$MaxThreat" exact="0"/>
        <set_value name="$return.$TotalThreatScore" exact="0"/>
        <set_value name="$return.$ThreatSectors" exact="[]"/>
        <set_value name="$return.$SectorCount" exact="0"/>
        
        <!-- Check if threat avoidance is enabled -->
        <do_if value="not global.$GT_GlobalSettings.$ThreatAvoidance? or not global.$GT_GlobalSettings.$ThreatAvoidance.$Enabled">
          <return value="$return"/>
        </do_if>
        
        <!-- Get threat expiry time -->
        <set_value name="$threatExpiry" exact="if global.$GT_GlobalSettings.$ThreatAvoidance.$ThreatExpiry? then global.$GT_GlobalSettings.$ThreatAvoidance.$ThreatExpiry else 600s"/>
        
        <!-- Build list of sectors to check: buy sector, sell sector, and all sectors in between -->
        <set_value name="$sectorsToCheck" exact="[]"/>
        
        <!-- Add buy station sector -->
        <append_to_list name="$sectorsToCheck" exact="$buyStation.sector"/>
        
        <!-- Add sell station sector if different -->
        <do_if value="$sellStation.sector != $buyStation.sector">
          <append_to_list name="$sectorsToCheck" exact="$sellStation.sector"/>
          
          <!-- Get path between sectors (use safe accessor) -->
          <set_value name="$path" exact="@$buyStation.sector.gatedistance.{$sellStation.sector}.path"/>
          
          <!-- Add all intermediate sectors (with safe count check) -->
          <set_value name="$pathCount" exact="0"/>
          <do_if value="$path?">
            <set_value name="$pathCount" exact="@$path.count"/>
          </do_if>
          
          <do_if value="$pathCount gt 0">
            <do_all exact="$pathCount" counter="$i">
              <set_value name="$pathSector" exact="$path.{$i}"/>
              
              <!-- Only add if not already in list -->
              <do_if value="$pathSector? and $pathSector != $buyStation.sector and $pathSector != $sellStation.sector">
                <do_if value="$sectorsToCheck.indexof.{$pathSector} == 0">
                  <append_to_list name="$sectorsToCheck" exact="$pathSector"/>
                </do_if>
              </do_if>
            </do_all>
          </do_if>
        </do_if>
        
        <set_value name="$return.$SectorCount" exact="$sectorsToCheck.count"/>
        
        <!-- Check threat level for each sector -->
        <do_all exact="$sectorsToCheck.count" counter="$i">
          <set_value name="$sector" exact="$sectorsToCheck.{$i}"/>
          
          <!-- Check if we have threat data for this sector -->
          <do_if value="global.$GT_ThreatIntelligence.{$sector}?">
            <set_value name="$threatData" exact="global.$GT_ThreatIntelligence.{$sector}"/>
            
            <!-- Check if threat data is still valid (not expired) -->
            <do_if value="$threatData.$Timestamp?">
              <set_value name="$age" exact="player.age - $threatData.$Timestamp"/>
              
              <do_if value="$age le $threatExpiry">
                <set_value name="$threatLevel" exact="@$threatData.$ThreatLevel"/>
                
                <do_if value="$threatLevel?">
                  <!-- Update max threat -->
                  <do_if value="$threatLevel gt $return.$MaxThreat">
                    <set_value name="$return.$MaxThreat" exact="$threatLevel"/>
                  </do_if>
                  
                  <!-- Add to total threat score -->
                  <set_value name="$return.$TotalThreatScore" exact="$return.$TotalThreatScore + $threatLevel"/>
                  
                  <!-- Add sector to threat list if threat level > 1 -->
                  <do_if value="$threatLevel gt 1">
                    <set_value name="$threatSectorInfo" exact="table[]"/>
                    <set_value name="$threatSectorInfo.$Sector" exact="$sector"/>
                    <set_value name="$threatSectorInfo.$ThreatLevel" exact="$threatLevel"/>
                    <set_value name="$threatSectorInfo.$HostileCount" exact="@$threatData.$HostileCount"/>
                    <append_to_list name="$return.$ThreatSectors" exact="$threatSectorInfo"/>
                  </do_if>
                </do_if>
              </do_if>
            </do_if>
          </do_if>
        </do_all>
        
        <!-- Calculate average threat -->
        <set_value name="$return.$AverageThreat" exact="if $return.$SectorCount gt 0 then ($return.$TotalThreatScore / $return.$SectorCount) else 0"/>
        
        <!-- Return threat analysis result -->
        <return value="$return"/>
      </actions>
    </library>
    
  </cues>
</mdscript> 
