<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.trade.galaxytrader" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/aiscripts.xsd" version="3">
  <order id="GalaxyTraderMK3" name="{77000, 10002}" description="{77000, 10102}" category="trade" infinite="true" allowinloop="false" canplayercancel="true">
    <params>
      <!-- ========================================== -->
      <!-- BASIC TRADING SETTINGS                    -->
      <!-- ========================================== -->
              <param name="home" default="this.sector" type="object" text="{77000,1002}" comment="Home base for trading operations (sector or station)">
        <input_param name="class" value="[class.sector,class.station]"/>
      </param>
      <param name="maxbuy" default="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max" type="number" text="{1041, 10054}" comment="Maximum gate distance for buy opportunities (skill-based: Lv1-2=1j, Lv3-5=3j, Lv6-8=5j, Lv9-11=10j, Lv12-13=15j, Lv14+=25j)">
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="maxsell" default="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max" type="number" text="{1041, 10057}" comment="Maximum gate distance for sell opportunities (skill-based: Lv1-2=1j, Lv3-5=3j, Lv6-8=5j, Lv9-11=10j, Lv12-13=15j, Lv14+=25j)">
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="allowillegal" default="false" type="bool" text="Allow Illegal Wares" comment="Allow trading in illegal wares (contraband, spaceweed, etc.)"/>
      <param name="logbookentries" default="true" type="bool" text="Logbook Entries" comment="Enable per-trade logbook entries and immersive training messages (TaterTrader style)"/>
      <param name="risktolerance" default="5" type="number" text="Risk Tolerance" comment="Risk tolerance level: 0=Very Safe, 2=Cautious, 5=Normal, 7=Aggressive, 10=Reckless">
        <input_param name="min" value="0"/>
        <input_param name="max" value="10"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="factionpriority" default="1" type="number" text="Faction Priority" comment="Trading priority: 0=Player stations only, 1=Foreign factions first (recommended), 2=All factions equally">
        <input_param name="min" value="0"/>
        <input_param name="max" value="2"/>
        <input_param name="step" value="1"/>
      </param>
      
      <!-- ========================================== -->
      <!-- WARE SELECTION                           -->
      <!-- ========================================== -->
      <param name="autowares" default="true" type="bool" text="Auto Wares" comment="Automatically select all compatible wares (recommended) or use manual selection"/>
      <param name="warebasket" default="[]" type="list" text="{1041, 10179}" comment="Manual ware selection (only used if Auto Wares is disabled)">
        <input_param name="type" value="'ware'"/>
        <input_param name="cancarry" value="this.ship"/>
      </param>
      
      <!-- ========================================== -->
      <!-- TRADING RANGE (Ship-specific)             -->
      <!-- ========================================== -->
      <param name="distancepenalty" default="50" type="number" text="Distance Penalty %" comment="Distance impact on trade scoring: 0%=Ignore distance (pure profit), 50%=Balanced, 100%=Prefer close trades (2x distance penalty)">
        <input_param name="min" value="0"/>
        <input_param name="max" value="100"/>
        <input_param name="step" value="5"/>
      </param>
      
      <!-- ========================================== -->
      <!-- NOTIFICATION LEVEL (Global setting override) -->
      <!-- ========================================== -->
      <param name="notifications" default="1" type="number" text="Notification Level (Use Global Settings)" comment="Notification level: 0=Minimal, 1=Normal, 2=Detailed alerts">
        <input_param name="min" value="0"/>
        <input_param name="max" value="2"/>
        <input_param name="step" value="1"/>
      </param>
      
      <!-- ========================================== -->
      <!-- ADVANCED SETTINGS                         -->
      <!-- ========================================== -->
      <param name="fleetcoordination" default="true" type="bool" text="Fleet Coordination" advanced="true" comment="Enable fleet coordination to avoid trade route conflicts with other ships (recommended for fleets)"/>
      <param name="cargotarget" default="90" type="number" text="Cargo Fill Target %" advanced="true" comment="Target cargo utilization percentage before prioritizing sales">
        <input_param name="min" value="50"/>
        <input_param name="max" value="100"/>
        <input_param name="step" value="5"/>
      </param>
      <param name="marketupdatefreq" default="60s" type="time" text="Market Update Frequency" advanced="true" comment="How often to refresh market data and pricing information">
        <input_param name="min" value="30s"/>
        <input_param name="max" value="300s"/>
        <input_param name="step" value="30s"/>
      </param>
      <param name="debuglevel" default="1" type="number" text="{1041, 10086}" advanced="true" comment="Debug output level: 0=None, 1=Basic, 2=Verbose logging">
        <input_param name="min" value="0"/>
        <input_param name="max" value="2"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="tradeeval" default="false" type="bool" text="Trade Evaluation Logging" advanced="true" comment="Enable detailed logging of individual trade evaluations and rejections (can be very verbose)"/>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
  </order>
  
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler"/>
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="TideHandler"/>
    
    <!-- High-Performance Training Event Handlers -->
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'GT_Training_Station_Found'"/>
      </conditions>
      <actions>
        <set_value name="$trainingData" exact="event.param2"/>
        <set_value name="$trainingStation" exact="$trainingData.$Station"/>
        <set_value name="$requiredLevel" exact="$trainingData.$Level"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🎓 Training station found: ' + $trainingStation.knownname + ' for level ' + $requiredLevel" chance="$debugchance"/>
        
        <!-- Create training order immediately (event-driven, no polling) -->
        <create_order object="this.ship" id="'DockAndTrain'" immediate="true">
          <param name="destination" value="$trainingStation"/>
          <param name="debugchance" value="$debugchance"/>
        </create_order>
        
        <!-- Set flag to indicate training is in progress -->
        <set_value name="this.$training_in_progress" exact="true"/>
        <!-- Set flag to indicate training transition for on_abort handler -->
        <set_value name="this.$training_transition" exact="true"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📋 DockAndTrain order created for ' + $trainingStation.knownname" chance="$debugchance"/>
        
        <!-- CRITICAL FIX: Set flag to prevent race condition in on_abort handler -->
        <!-- This ensures the on_abort handler knows a training order was just created -->
        <set_value name="this.$training_order_created" exact="player.age"/>
      </actions>
    </handler>
    
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'GT_Training_Complete'"/>
      </conditions>
      <actions>
        <set_value name="$completionData" exact="event.param2"/>
        <set_value name="$completedLevel" exact="$completionData.$Level"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training completed for level ' + $completedLevel + ' - setting flag to resume trading'" chance="$debugchance"/>
        
        <!-- Set flag to resume trading (can't use resume in interrupt handler) -->
        <set_value name="this.$training_complete" exact="true"/>
        <remove_value name="this.$training_in_progress"/>
        <remove_value name="this.$training_transition"/>
        <remove_value name="this.$training_order_created"/>
      </actions>
    </handler>
    
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'GT_Training_Failed'"/>
      </conditions>
      <actions>
        <set_value name="$failureData" exact="event.param2"/>
        <set_value name="$reason" exact="$failureData.$Reason"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training failed: ' + $reason + ' - setting flag to resume trading'" chance="$debugchance"/>
        
        <!-- Set flag to resume trading (can't use resume in interrupt handler) -->
        <set_value name="this.$training_complete" exact="true"/>
        <remove_value name="this.$training_in_progress"/>
        <remove_value name="this.$training_transition"/>
        <remove_value name="this.$training_order_created"/>
      </actions>
    </handler>

  </interrupts>
  
  <init>
    <set_order_syncpoint_reached order="this.ship.order"/>
    <set_command command="command.searchtrades"/>
    <set_command_action commandaction="commandaction.searchingtrades"/>
    
    <!-- ============================================================================= -->
    <!-- MODULAR INITIALIZATION - REPLACES ~200 LINES OF COMPLEX INITIALIZATION CODE -->
    <!-- ============================================================================= -->
    
    <!-- Create order parameters table for library compatibility -->
    <set_value name="$orderParams" exact="table[]"/>
    
    <!-- SUBORDINATE HOME BASE INHERITANCE: If subordinate, try to inherit commander's home -->
    <set_value name="$effectiveHome" exact="$home"/>
    <do_if value="this.ship.commander and this.ship.commander.exists and this.ship.commander != this.ship">
      <!-- Ship is a subordinate -->
      <do_if value="not $effectiveHome? or not $effectiveHome.exists or $effectiveHome == this.sector">
        <!-- Home not set or is default (ship's current sector) - try to inherit from commander -->
        <do_if value="this.ship.commander.defaultorder and this.ship.commander.defaultorder.$home?">
          <set_value name="$effectiveHome" exact="this.ship.commander.defaultorder.$home"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 👥 Subordinate inheriting home base from commander ' + this.ship.commander.idcode + ': ' + $effectiveHome.knownname" chance="100"/>
        </do_if>
      </do_if>
    </do_if>
    
    <!-- Store as script variable for persistence throughout execution -->
    <set_value name="this.$effectiveHome" exact="$effectiveHome"/>
    
    <!-- ============================================================================= -->
    <!-- SUBORDINATE SETTINGS INHERITANCE: Inherit strategic settings from commander -->
    <!-- ============================================================================= -->
    <set_value name="$isSubordinate" exact="this.ship.commander and this.ship.commander.exists and this.ship.commander != this.ship"/>
    <set_value name="$commanderOrder" exact="null"/>
    <do_if value="$isSubordinate">
      <set_value name="$commanderOrder" exact="this.ship.commander.defaultorder"/>
    </do_if>
    
    <!-- Fleet Coordination -->
    <set_value name="$effectiveFleetCoordination" exact="$fleetcoordination"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$fleetcoordination?">
      <set_value name="$effectiveFleetCoordination" exact="$commanderOrder.$fleetcoordination"/>
    </do_if>
    
    <!-- Allow Illegal Wares -->
    <set_value name="$effectiveAllowIllegal" exact="$allowillegal"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$allowillegal?">
      <set_value name="$effectiveAllowIllegal" exact="$commanderOrder.$allowillegal"/>
    </do_if>
    
    <!-- Risk Tolerance -->
    <set_value name="$effectiveRiskTolerance" exact="$risktolerance"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$risktolerance?">
      <set_value name="$effectiveRiskTolerance" exact="$commanderOrder.$risktolerance"/>
    </do_if>
    
    <!-- Faction Priority -->
    <set_value name="$effectiveFactionPriority" exact="$factionpriority"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$factionpriority?">
      <set_value name="$effectiveFactionPriority" exact="$commanderOrder.$factionpriority"/>
    </do_if>
    
    <!-- Auto Wares -->
    <set_value name="$effectiveAutoWares" exact="$autowares"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$autowares?">
      <set_value name="$effectiveAutoWares" exact="$commanderOrder.$autowares"/>
    </do_if>
    
    <!-- Ware Basket -->
    <set_value name="$effectiveWareBasket" exact="$warebasket"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$warebasket?">
      <set_value name="$effectiveWareBasket" exact="$commanderOrder.$warebasket"/>
    </do_if>
    
    <!-- Distance Penalty -->
    <set_value name="$effectiveDistancePenalty" exact="$distancepenalty"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$distancepenalty?">
      <set_value name="$effectiveDistancePenalty" exact="$commanderOrder.$distancepenalty"/>
    </do_if>
    
    <!-- Logbook Entries -->
    <set_value name="$effectiveLogbookEntries" exact="$logbookentries"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$logbookentries?">
      <set_value name="$effectiveLogbookEntries" exact="$commanderOrder.$logbookentries"/>
    </do_if>
    
    <!-- Notifications -->
    <set_value name="$effectiveNotifications" exact="$notifications"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$notifications?">
      <set_value name="$effectiveNotifications" exact="$commanderOrder.$notifications"/>
    </do_if>
    
    <!-- Debug Level -->
    <set_value name="$effectiveDebugLevel" exact="$debuglevel"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$debuglevel?">
      <set_value name="$effectiveDebugLevel" exact="$commanderOrder.$debuglevel"/>
    </do_if>
    
    <!-- Trade Evaluation Logging -->
    <set_value name="$effectiveTradeEval" exact="$tradeeval"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$tradeeval?">
      <set_value name="$effectiveTradeEval" exact="$commanderOrder.$tradeeval"/>
    </do_if>
    
    <!-- Debug message for subordinates showing inherited settings -->
    <do_if value="$isSubordinate">
      <set_value name="$inheritedSettings" exact="[]"/>
      <do_if value="$effectiveFleetCoordination != $fleetcoordination"><append_to_list name="$inheritedSettings" exact="'FleetCoord=' + $effectiveFleetCoordination"/></do_if>
      <do_if value="$effectiveAllowIllegal != $allowillegal"><append_to_list name="$inheritedSettings" exact="'AllowIllegal=' + $effectiveAllowIllegal"/></do_if>
      <do_if value="$effectiveRiskTolerance != $risktolerance"><append_to_list name="$inheritedSettings" exact="'Risk=' + $effectiveRiskTolerance"/></do_if>
      <do_if value="$effectiveFactionPriority != $factionpriority"><append_to_list name="$inheritedSettings" exact="'FactionPri=' + $effectiveFactionPriority"/></do_if>
      <do_if value="$effectiveAutoWares != $autowares"><append_to_list name="$inheritedSettings" exact="'AutoWares=' + $effectiveAutoWares"/></do_if>
      <do_if value="$effectiveDistancePenalty != $distancepenalty"><append_to_list name="$inheritedSettings" exact="'DistPenalty=' + $effectiveDistancePenalty + '%'"/></do_if>
      <do_if value="$effectiveLogbookEntries != $logbookentries"><append_to_list name="$inheritedSettings" exact="'Logbook=' + $effectiveLogbookEntries"/></do_if>
      <do_if value="$effectiveNotifications != $notifications"><append_to_list name="$inheritedSettings" exact="'Notify=' + $effectiveNotifications"/></do_if>
      <do_if value="$effectiveDebugLevel != $debuglevel"><append_to_list name="$inheritedSettings" exact="'Debug=' + $effectiveDebugLevel"/></do_if>
      <do_if value="$effectiveTradeEval != $tradeeval"><append_to_list name="$inheritedSettings" exact="'TradeEval=' + $effectiveTradeEval"/></do_if>
      
      <do_if value="$inheritedSettings.count gt 0">
        <set_value name="$inheritedSettingsText" exact="''"/>
        <do_all exact="$inheritedSettings.count" counter="$i">
          <set_value name="$inheritedSettingsText" exact="$inheritedSettingsText + $inheritedSettings.{$i}"/>
          <do_if value="$i lt $inheritedSettings.count">
            <set_value name="$inheritedSettingsText" exact="$inheritedSettingsText + ', '"/>
          </do_if>
        </do_all>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 👥 Subordinate inherited settings from ' + this.ship.commander.idcode + ': ' + $inheritedSettingsText" chance="100"/>
      </do_if>
    </do_if>
    
    <set_value name="$orderParams.$home" exact="$effectiveHome"/>
    <set_value name="$orderParams.$maxbuy" exact="$maxbuy"/>
    <set_value name="$orderParams.$maxsell" exact="$maxsell"/>
    <set_value name="$orderParams.$allowillegal" exact="$effectiveAllowIllegal"/>
    <set_value name="$orderParams.$risktolerance" exact="$effectiveRiskTolerance"/> <!-- Inherited from commander if subordinate -->
    <set_value name="$orderParams.$factionpriority" exact="$effectiveFactionPriority"/>
    <set_value name="$orderParams.$autowares" exact="$effectiveAutoWares"/>
    <set_value name="$orderParams.$warebasket" exact="$effectiveWareBasket"/>
    <set_value name="$orderParams.$distancepenalty" exact="$effectiveDistancePenalty"/>
    <set_value name="$orderParams.$notifications" exact="$effectiveNotifications"/>
    <set_value name="$orderParams.$cargotarget" exact="$cargotarget"/>
    <set_value name="$orderParams.$marketupdatefreq" exact="$marketupdatefreq"/>
    <set_value name="$orderParams.$debuglevel" exact="$effectiveDebugLevel"/>
    <set_value name="$orderParams.$tradeeval" exact="$effectiveTradeEval"/>
    <set_value name="$orderParams.$fleetcoordination" exact="$effectiveFleetCoordination"/>
    <set_value name="$orderParams.$logbookentries" exact="$effectiveLogbookEntries"/>
    
    <!-- =========================================== -->
    <!-- HIGH-PERFORMANCE INITIALIZATION (Option A) -->
    <!-- =========================================== -->
    
    <!-- Fast variable assignment - using effective (inherited) values -->
    <set_value name="$gt_debuglevel" exact="$effectiveDebugLevel"/>
    <set_value name="$debugchance" exact="if $gt_debuglevel ge 2 then 100 else if $gt_debuglevel ge 1 then 50 else 0"/>
    
    <!-- Core trading parameters (performance optimized) - using effective (inherited) values -->
    <set_value name="$gt_allowillegal" exact="$effectiveAllowIllegal"/>
    <!-- Convert risk tolerance from 0-10 integer scale to 0.0-1.0 float scale -->
    <set_value name="$gt_risktolerance" exact="$effectiveRiskTolerance / 10.0"/>
    <set_value name="$gt_factionpriority" exact="$effectiveFactionPriority"/>
    <!-- Convert distance penalty from 0-100% to multiplier: 0%=0.0, 50%=1.0, 100%=2.0 -->
    <set_value name="$gt_distancepenalty" exact="$effectiveDistancePenalty / 50.0"/>
    <set_value name="$gt_cargotarget" exact="$cargotarget"/>
    <set_value name="$gt_marketupdatefreq" exact="$marketupdatefreq"/>
    
    <!-- Global defaults (fastest approach - direct assignment) -->
    <set_value name="$gt_enablexp" exact="true"/>
    <set_value name="$gt_autotraining" exact="true"/>
    <set_value name="$gt_fleetcoord" exact="false"/>
    
    <!-- Ware selection (optimized) - using effective inherited values -->
    <set_value name="$warebasket" exact="if $effectiveAutoWares then [] else $effectiveWareBasket"/>
    
    <!-- Single non-blocking signal to MD system -->
    <signal_objects object="player.galaxy" param="'GT_AI_Started'" param2="table[
      $Ship = this.ship,
      $Config = table[
        $allowillegal = $gt_allowillegal,
        $debuglevel = $gt_debuglevel,
        $autotraining = $gt_autotraining
      ]
    ]"/>
    
    <debug_text text="'[GT-AI] ' + this.ship.idcode + ': High-performance initialization complete'" chance="$debugchance"/>
    <do_if value="$effectiveHome? and $effectiveHome.exists">
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Operating with home base: ' + $effectiveHome.knownname + ' (maxbuy=' + $maxbuy + ', maxsell=' + $maxsell + ')'" chance="$debugchance"/>
    </do_if>
    
    <!-- Log configuration summary -->
    <do_if value="$gt_debuglevel ge 1">
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': === CONFIGURATION SUMMARY ==='" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Risk=' + $effectiveRiskTolerance + ', Illegal=' + $effectiveAllowIllegal + ', DistancePenalty=' + $effectiveDistancePenalty + '%'" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': FleetCoord=' + $effectiveFleetCoordination + ', LogbookEntries=' + $effectiveLogbookEntries + ', Notifications=' + $effectiveNotifications" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Distance limits: MaxBuy=' + $maxbuy + ' jumps, MaxSell=' + $maxsell + ' jumps'" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': AutoWares=' + $effectiveAutoWares + ', WareBasket=' + $effectiveWareBasket.count + ' wares, TradeEval=' + $effectiveTradeEval" chance="100"/>
    </do_if>
    
    <!-- ============================================================================= -->
    <!-- END MODULAR INITIALIZATION                                                   -->
    <!-- ============================================================================= -->
    
    <debug_text text="'[GalaxyTrader MK3] ' + this.ship.idcode + ': === INITIALIZATION COMPLETE === Starting main trading loop...'" chance="$debugchance"/>
    
  </init>
  
  <attention min="unknown">
    <actions>
      
      <!-- =============================================== -->
      <!-- MAIN TRADING LOOP (Modularized)                -->
      <!-- =============================================== -->
      
      <label name="main_loop"/>
      
      <!-- ======================================= -->
      <!-- MANDATORY TRAINING CHECK (BLOCKS ALL TRADING) -->
      <!-- ======================================= -->
      
      <!-- Check if training was completed by interrupt handler -->
      <do_if value="this.$training_complete?">
        <remove_value name="this.$training_complete"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training completed - continuing with trading'" chance="$debugchance"/>
      </do_if>
      
      <!-- MANDATORY: Check if pilot is XP blocked - NO trading allowed if blocked -->
      <set_value name="$pilotXPBlocked" exact="false"/>
      <set_value name="$pilotNameForDebug" exact="'No Pilot'"/>
      
      <do_if value="this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}?">
        <!-- Treat paused-with-training-needed as blocking to avoid any trading until training resumes -->
        <set_value name="$pilotXPBlocked" exact="global.$GT_Pilots.{this.ship.pilot}.$XPBlocked? or global.$GT_Pilots.{this.ship.pilot}.$PausedWithTrainingNeeded?"/>
        <set_value name="$pilotNameForDebug" exact="this.ship.pilot.name"/>
      </do_if>
      
      <!-- BLOCKING CONDITION: If pilot is XP blocked, training is MANDATORY before any trading -->
      <!-- Get both current level and blocked level for proper decision making -->
      <set_value name="$pilotLevel" exact="1"/>
      <set_value name="$blockedLevel" exact="1"/>
      <do_if value="this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}?">
        <do_if value="global.$GT_Pilots.{this.ship.pilot}.$Level?">
          <set_value name="$pilotLevel" exact="global.$GT_Pilots.{this.ship.pilot}.$Level"/>
        </do_if>
        <do_if value="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel?">
          <set_value name="$blockedLevel" exact="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel"/>
        </do_if>
      </do_if>
      
      <!-- DEBUG: Show the decision logic -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 DECISION LOGIC: XPBlocked=' + $pilotXPBlocked + ', ManagementLevel=' + $pilotLevel + ', BlockedLevel=' + $blockedLevel + ', Pilot=' + $pilotNameForDebug" chance="100"/>
      
      <do_if value="$pilotXPBlocked">
        <!-- Check if this is a legitimate training requirement (blocked level > 1) -->
        <do_if value="$blockedLevel gt 1">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⛔ TRAINING MANDATORY: Pilot ' + $pilotNameForDebug + ' needs Level ' + $blockedLevel + ' training - no trading allowed until training completes'" chance="100"/>
          <resume label="handle_mandatory_training"/>
        </do_if>
        <do_else>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Pilot XP blocked at Level 1 (invalid) - clearing block and proceeding with trading'" chance="100"/>
          <!-- Clear the incorrect XP block for Level 1 pilots -->
          <signal_objects object="player.galaxy" param="'GT_Clear_XP_Block'" param2="table[
            $Ship = this.ship,
            $Pilot = this.ship.pilot,
            $Reason = 'Level 1 pilots should never be XP blocked'
          ]"/>
        </do_else>
      </do_if>
      <do_elseif value="not $pilotXPBlocked">
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Pilot not XP blocked - proceeding with normal trading'" chance="100"/>
        <!-- Skip training handler and go directly to trading -->
        <resume label="start_trading"/>
      </do_elseif>
      
      <!-- ======================================= -->
      <!-- HIGH-PERFORMANCE TRADING LOOP          -->
      <!-- ======================================= -->
      
      <!-- ========================================= -->
      <!-- MANDATORY TRAINING HANDLER              -->
      <!-- ========================================= -->
      
      <label name="handle_mandatory_training"/>
      
      <!-- Check if ship has an active DockAndTrain order -->
      <set_value name="$hasActiveTrainingOrder" exact="false"/>
      <do_if value="this.ship.orders.count gt 0">
        <do_all exact="this.ship.orders.count" counter="$i">
          <do_if value="this.ship.orders.{$i}.id == 'DockAndTrain'">
            <set_value name="$hasActiveTrainingOrder" exact="true"/>
            <break/>
          </do_if>
        </do_all>
      </do_if>
      
      <!-- ENHANCED LOGIC: Auto-restart training if it was previously interrupted -->
      <!-- Conditions for starting/restarting training:
           1. Auto-training is enabled
           2. Ship has a pilot with GT pilot data
           3. Either: training not in progress OR no active training order (interrupted training)
      -->
      <do_if value="$gt_autotraining and this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}">
        <set_value name="$shouldStartTraining" exact="false"/>
        
        <!-- Case 1: Training not currently in progress -->
        <do_if value="not this.$training_in_progress?">
          <set_value name="$shouldStartTraining" exact="true"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Training not in progress - can start training'" chance="$debugchance"/>
        </do_if>
        <!-- Case 2: Training was marked as in progress but no active training order (interrupted) -->
        <do_elseif value="this.$training_in_progress? and not $hasActiveTrainingOrder">
          <set_value name="$shouldStartTraining" exact="true"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 TRAINING INTERRUPTED: Previous training was aborted - restarting automatically'" chance="100"/>
          <!-- Clear the stale flag -->
          <remove_value name="this.$training_in_progress"/>
        </do_elseif>
        
        <do_if value="$shouldStartTraining">
          <!-- Get blocked level with safety check -->
          <set_value name="$blockedLevel" exact="1"/>
          <do_if value="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel?">
            <set_value name="$blockedLevel" exact="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel"/>
          </do_if>
          <do_else>
            <!-- Calculate current skill level as fallback -->
            <do_if value="global.$GT_Pilots.{this.ship.pilot}.$XP?">
              <set_value name="$currentXP" exact="global.$GT_Pilots.{this.ship.pilot}.$XP"/>
              <do_all exact="15" counter="$skillLevel">
                <do_if value="$currentXP ge global.$GT_Config.$XP.$SkillThresholds.{$skillLevel}">
                  <set_value name="$blockedLevel" exact="$skillLevel"/>
                </do_if>
              </do_all>
            </do_if>
          </do_else>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🎓 Initiating mandatory training for pilot ' + $pilotNameForDebug + ' (Level ' + $blockedLevel + ')'" chance="$debugchance"/>
          
          <!-- Signal MD system to handle training -->
          <signal_objects object="player.galaxy" param="'GT_Training_Needed'" param2="table[
            $Ship = this.ship,
            $Pilot = this.ship.pilot,
            $RequiredLevel = $blockedLevel
          ]"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📡 Training signal sent to MD system for pilot ' + $pilotNameForDebug" chance="$debugchance"/>
        </do_if>
        <do_else>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⏳ Training already in progress (active order: ' + $hasActiveTrainingOrder + ') - waiting'" chance="$debugchance"/>
        </do_else>
      </do_if>
      <do_else>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Auto-training disabled or no pilot data - waiting'" chance="$debugchance"/>
      </do_else>
      
      <!-- Wait and check again - training is mandatory -->
      <wait exact="10s"/>
      <resume label="main_loop"/>
      
      <!-- ========================================= -->
      <!-- EVENT-DRIVEN TRADE SEARCH WITH RETRY     -->
      <!-- ========================================= -->
      
      <label name="start_trading"/>
      
      <!-- Initialize retry counter if not exists -->
      <do_if value="not this.$searchFailed?">
        <set_value name="this.$searchFailed" exact="0"/>
      </do_if>
      
      <!-- Signal MD system for trade opportunities -->
      <do_if value="this.ship.cargo.free.all gt 0">
        <!-- Look for buy opportunities -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Looking for trade opportunities...'" chance="$debugchance"/>
        
        <signal_objects object="player.galaxy" param="'GT_Find_Trade'" param2="table[
          $Ship = this.ship,
          $HomeBase = this.$effectiveHome,
          $MaxBuy = $maxbuy,
          $MaxSell = $maxsell,
          $CargoTarget = $gt_cargotarget,
          $WareBasket = $warebasket,
          $AllowIllegal = $gt_allowillegal,
          $RiskTolerance = $gt_risktolerance,
          $DistancePenalty = $effectiveDistancePenalty,
          $FleetCoordination = $effectiveFleetCoordination
        ]"/>
      </do_if>
      <do_else>
        <!-- Ship is full, look for sell opportunities -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Cargo full, looking for sell opportunities...'" chance="$debugchance"/>
        
        <signal_objects object="player.galaxy" param="'GT_Find_Sell'" param2="table[
          $Ship = this.ship,
          $HomeBase = this.$effectiveHome,
          $MaxSell = $maxsell,
          $RiskTolerance = $gt_risktolerance,
          $DistancePenalty = $effectiveDistancePenalty,
          $FleetCoordination = $effectiveFleetCoordination
        ]"/>
      </do_else>
      
      <!-- Wait for MD system response with single interrupt -->
      <!-- Timeout accounts for: max pre-search delay (30s) + search time (5s) + buffer (25s) = 60s -->
      <label name="wait_for_response"/>
      <wait exact="60s" comment="Wait for MD system response">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="this.ship" param="'GT_Trade_Found'"/>
              <event_object_signalled object="this.ship" param="'GT_No_Trade_Found'"/>
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.param == 'GT_Trade_Found'">
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Trade found by MD system - proceeding with execution'" chance="$debugchance"/>
              <!-- Reset retry counter on successful trade -->
              <set_value name="this.$searchFailed" exact="0"/>
              <resume label="trade_found"/>
            </do_if>
            <do_elseif value="event.param == 'GT_No_Trade_Found'">
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': No trades found by MD system - starting retry logic'" chance="$debugchance"/>
              <resume label="no_trade_retry"/>
            </do_elseif>
          </actions>
        </interrupt>
      </wait>
      
      <!-- Timeout fallback - treat as no trade found -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': MD system response timeout - assuming no trades'" chance="$debugchance"/>
      <resume label="no_trade_retry"/>
      
      <!-- ========================================= -->
      <!-- TRADE FOUND - EXECUTE AND UPDATE XP      -->
      <!-- ========================================= -->
      <label name="trade_found"/>
      
      <!-- Non-blocking XP update signal -->
      <do_if value="$gt_enablexp and this.ship.pilot">
        <signal_objects object="player.galaxy" param="'GT_Update_Pilot_XP'" param2="table[
          $Ship = this.ship,
          $Pilot = this.ship.pilot
        ]"/>
      </do_if>
      
      <!-- Set ship to trading state -->
      <set_command command="command.trade"/>
      
      <!-- Wait for trade completion signal from MD system (event-driven, no polling) -->
      <wait max="300s" comment="Wait for trade completion signal">
        <interrupt>
          <conditions>
            <event_object_signalled object="this.ship" param="'GT_Trade_Completed'"/>
          </conditions>
          <actions>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Trade completion signal received - resuming trading'" chance="$debugchance"/>
            <resume label="trade_completed"/>
          </actions>
        </interrupt>
      </wait>
      
      <!-- Timeout fallback -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Trade completion timeout after 300s - resuming anyway'" chance="$debugchance"/>
      
      <label name="trade_completed"/>
      
      <!-- NOTE: Auto-repair check has been moved to MD system (gt_trading_ai.xml TradeCompleted cue) -->
      <!-- This ensures it runs even when the order is aborted/replaced during trade execution -->
      
      <!-- Update market data interval -->
      <wait exact="$gt_marketupdatefreq"/>
      <resume label="main_loop"/>
      
      <!-- ========================================= -->
      <!-- NO TRADE FOUND - ESCALATING RETRY LOGIC  -->
      <!-- ========================================= -->
      <label name="no_trade_retry"/>
      
      <!-- Increment failure counter -->
      <set_value name="this.$searchFailed" exact="this.$searchFailed + 1"/>
      
      <!-- Calculate escalating wait time: 10s, 20s, 30s, 40s, 50s, 60s (max) -->
      <set_value name="$waitTime" exact="[this.$searchFailed * 10s, 60s].min"/>
      
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': No profitable trades found (attempt ' + this.$searchFailed + ') - waiting ' + ($waitTime/1s) + 's before retry'" chance="$debugchance"/>
      
      <!-- Set ship to waiting state -->
      <set_command command="command.wait"/>
      <set_command_action commandaction="commandaction.standingby"/>
      
      <!-- Wait with escalating delay -->
      <wait exact="$waitTime"/>
      
      <!-- Reset command state and resume search -->
      <set_command command="command.searchtrades"/>
      <set_command_action commandaction="commandaction.searchingtrades"/>
      
      <!-- Resume main trading loop -->
      <resume label="main_loop"/>
      
      <!-- ========================================= -->
      <!-- AUTO-REPAIR HANDLING                     -->
      <!-- ========================================= -->
      <label name="start_repair"/>
      
      <!-- Retrieve repair destination from global data -->
      <set_value name="$repairStation" exact="global.$GT_AutoRepair.{this.ship}.$Station"/>
      
      <do_if value="$repairStation and $repairStation.exists">
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Hull at ' + this.ship.hullpercentage + '% - going for repairs at ' + $repairStation.knownname" chance="$debugchance"/>
        
        <!-- Set repair command state -->
        <set_command command="command.repair"/>
        <set_command_action commandaction="commandaction.calculating"/>
        
        <!-- Create repair order -->
        <create_order object="this.ship" id="'Repair'" immediate="true">
          <param name="destination" value="$repairStation"/>
          <param name="repairall" value="true"/>
        </create_order>
        
        <!-- Wait for repair completion -->
        <set_value name="$repairComplete" exact="false"/>
        <wait max="3600s">
          <interrupt>
            <conditions>
              <event_object_signalled object="this.ship" param="'GT_RepairCompleted'"/>
            </conditions>
            <actions>
              <set_value name="$repairComplete" exact="true"/>
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Repairs completed (hull now at ' + this.ship.hullpercentage + '%) - resuming trading'" chance="$debugchance"/>
            </actions>
          </interrupt>
        </wait>
        
        <!-- Check if we timed out -->
        <do_if value="not $repairComplete">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Repair timeout after 1 hour - resuming trading anyway'" chance="$debugchance"/>
        </do_if>
        
        <!-- Clean up repair tracking -->
        <do_if value="global.$GT_AutoRepair.{this.ship}?">
          <remove_value name="global.$GT_AutoRepair.{this.ship}"/>
        </do_if>
        
        <!-- Reset search failure counter since we're starting fresh -->
        <set_value name="this.$searchFailed" exact="0"/>
      </do_if>
      <do_else>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Repair station not found or no longer exists - resuming trading'" chance="$debugchance"/>
      </do_else>
      
      <!-- Resume normal trading loop -->
      <resume label="main_loop"/>
      
    </actions>
  </attention>
  
  <on_abort>
    <!-- Enhanced cleanup when order is aborted/replaced -->
    <!-- CRITICAL FIX: Preserve pilot XP data when order is manually replaced by player -->
    <!-- Only completely wipe data in genuine cleanup scenarios (ship destroyed, pilot changed, etc.) -->
    <set_value name="$isActivelyTrading" exact="false"/>
    <set_value name="$isTrainingTransition" exact="false"/>
    
    <!-- Check if ship has active TradePerform orders -->
    <do_if value="this.ship.orders.count gt 1">
      <do_all exact="this.ship.orders.count" counter="$i">
        <do_if value="this.ship.orders.{$i}.id == 'TradePerform'">
          <set_value name="$isActivelyTrading" exact="true"/>
          <break/>
        </do_if>
      </do_all>
    </do_if>
    
    <!-- Check if a training order was recently created (within last 5 seconds) -->
    <do_if value="this.$training_order_created? and (player.age - this.$training_order_created) lt 5s">
      <set_value name="$isTrainingTransition" exact="true"/>
    </do_if>
    
    <!-- Also check the flag-based detection -->
    <do_if value="this.$training_transition?">
      <set_value name="$isTrainingTransition" exact="true"/>
    </do_if>
    
    <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Order terminating (actively trading: ' + $isActivelyTrading + ', training transition: ' + $isTrainingTransition + ')'" chance="100"/>
    
    <!-- Only send cleanup signal if NOT actively trading AND NOT transitioning to training -->
    <do_if value="not $isActivelyTrading and not $isTrainingTransition">
      <!-- CRITICAL XP PRESERVATION: Send 'paused' signal instead of 'aborted' to preserve pilot data -->
      <!-- This allows the system to preserve XP when orders are manually replaced -->
      <set_value name="$pauseData" exact="table[
        $Ship = this.ship,
        $Pilot = this.ship.pilot,
        $Reason = 'Order replaced or paused by player',
        $PreserveData = true
      ]"/>
      
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Sending pause signal to MD system (preserving pilot XP data)'" chance="100"/>
      
      <!-- Send pause signal instead of abort signal to preserve pilot data -->
      <signal_objects object="player.galaxy" param="'GT_Ship_Order_Paused'" param2="$pauseData"/>
      
      <!-- CORRECT FIX: Only clear training flags when order is manually aborted (not during training transitions) -->
      <remove_value name="this.$training_in_progress"/>
      <remove_value name="this.$training_order_created"/>
      <remove_value name="this.$training_transition"/>
    </do_if>
    <do_else>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Ship still actively trading or training - NOT sending any signals'" chance="100"/>
    </do_else>
  </on_abort>
  
</aiscript> 