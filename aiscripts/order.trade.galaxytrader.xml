<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.trade.galaxytrader" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../ORIGINAL_MODS_DO NOT_MODIFY/X4Original/libraries/aiscripts.xsd" version="3">
  <order id="GalaxyTraderMK3" name="{77000, 10002}" description="{77000, 10102}" category="trade" infinite="true" allowinloop="false" canplayercancel="true">
    <params>
      <!-- ========================================== -->
      <!-- BASIC TRADING SETTINGS                    -->
      <!-- ========================================== -->
              <param name="home" default="this.sector" type="object" text="{77000,1002}" comment="Home base for trading operations (sector or station)">
        <input_param name="class" value="[class.sector,class.station]"/>
      </param>
      <param name="maxbuy" default="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max" type="number" text="{1041, 10054}" comment="Maximum gate distance for buy opportunities (skill-based: Lv1-2=1j, Lv3-5=3j, Lv6-8=5j, Lv9-11=10j, Lv12-13=15j, Lv14+=25j)">
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="maxsell" default="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max" type="number" text="{1041, 10057}" comment="Maximum gate distance for sell opportunities (skill-based: Lv1-2=1j, Lv3-5=3j, Lv6-8=5j, Lv9-11=10j, Lv12-13=15j, Lv14+=25j)">
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="[if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 2) then 1 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 5) then 3 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 8) then 5 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 11) then 10 else if ([@this.ship.pilot.skill.management, @this.ship.commander.tradenpc.skill.management].max le 13) then 15 else 25, 1].max"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="allowillegal" default="false" type="bool" text="{77000,1011}" comment="{77000,1025}"/>
      <param name="logbookentries" default="true" type="bool" text="{77000,1012}" comment="{77000,1041}"/>
      <param name="risktolerance" default="5" type="number" text="{77000,1013}" comment="{77000,1026}">
        <input_param name="min" value="0"/>
        <input_param name="max" value="10"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="factionpriority" default="1" type="number" text="{77000,1014}" comment="Trading priority: 0=Player stations only, 1=Foreign factions first (recommended), 2=All factions equally">
        <input_param name="min" value="0"/>
        <input_param name="max" value="2"/>
        <input_param name="step" value="1"/>
      </param>
      
      <!-- ========================================== -->
      <!-- WARE SELECTION                           -->
      <!-- ========================================== -->
      <param name="autowares" default="true" type="bool" text="{77000,1015}" comment="{77000,1023}"/>
      <param name="warebasket" default="[]" type="list" text="{1041, 10179}" comment="Manual ware selection (only used if Auto Wares is disabled)">
        <input_param name="type" value="'ware'"/>
        <input_param name="cancarry" value="this.ship"/>
      </param>
      
      <!-- ========================================== -->
      <!-- TRADING RANGE (Ship-specific)             -->
      <!-- ========================================== -->
      <param name="distancepenalty" default="50" type="number" text="{77000,1016}" comment="Distance impact on trade scoring: 0%=Ignore distance (pure profit), 50%=Balanced, 100%=Prefer close trades (2x distance penalty)">
        <input_param name="min" value="0"/>
        <input_param name="max" value="100"/>
        <input_param name="step" value="5"/>
      </param>
      
      <!-- ========================================== -->
      <!-- NOTIFICATION LEVEL (Global setting override) -->
      <!-- ========================================== -->
      <param name="notifications" default="1" type="number" text="{77000,1017}" comment="{77000,1032}">
        <input_param name="min" value="0"/>
        <input_param name="max" value="2"/>
        <input_param name="step" value="1"/>
      </param>
      
      <!-- ========================================== -->
      <!-- ADVANCED SETTINGS                         -->
      <!-- ========================================== -->
      <param name="fleetcoordination" default="true" type="bool" text="{77000,1018}" advanced="true" comment="{77000,1029}"/>
      <param name="cargotarget" default="90" type="number" text="{77000,1019}" advanced="true" comment="{77000,1033}">
        <input_param name="min" value="50"/>
        <input_param name="max" value="100"/>
        <input_param name="step" value="5"/>
      </param>
      <param name="marketupdatefreq" default="60s" type="time" text="{77000,1050}" advanced="true" comment="{77000,1034}">
        <input_param name="min" value="30s"/>
        <input_param name="max" value="300s"/>
        <input_param name="step" value="30s"/>
      </param>
      <param name="debuglevel" default="1" type="number" text="{1041, 10086}" advanced="true" comment="{77000,1035}">
        <input_param name="min" value="0"/>
        <input_param name="max" value="2"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="tradeeval" default="false" type="bool" text="{77000,1051}" advanced="true" comment="{77000,1040}"/>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
  </order>
  
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler"/>
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="TideHandler"/>
    
    <!-- High-Performance Training Event Handlers -->
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'GT_Training_Station_Found'"/>
      </conditions>
      <actions>
        <set_value name="$trainingData" exact="event.param2"/>
        <set_value name="$trainingStation" exact="$trainingData.$Station"/>
        <set_value name="$requiredLevel" exact="$trainingData.$Level"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🎓 Training station found: ' + $trainingStation.knownname + ' for level ' + $requiredLevel" chance="$debugchance"/>
        
        <!-- Create training order immediately (event-driven, no polling) -->
        <create_order object="this.ship" id="'DockAndTrain'" immediate="true">
          <param name="destination" value="$trainingStation"/>
          <param name="debugchance" value="$debugchance"/>
        </create_order>
        
        <!-- Set flag to indicate training is in progress -->
        <set_value name="this.$training_in_progress" exact="true"/>
        <!-- Set flag to indicate training transition for on_abort handler -->
        <set_value name="this.$training_transition" exact="true"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📋 DockAndTrain order created for ' + $trainingStation.knownname" chance="$debugchance"/>
        
        <!-- CRITICAL FIX: Set flag to prevent race condition in on_abort handler -->
        <!-- This ensures the on_abort handler knows a training order was just created -->
        <set_value name="this.$training_order_created" exact="player.age"/>
      </actions>
    </handler>
    
    <!-- ✅ Subordinate Resync Handler: Listen for commander order changes (like vanilla order.assist) -->
    <handler comment="Subordinate resync on commander order change">
      <conditions>
        <check_all>
          <event_object_order_ready object="this.ship.commander" check="false" comment="Commander's order ready"/>
          <check_value value="event.param == event.object.defaultorder" comment="It's the default order"/>
        </check_all>
      </conditions>
      <actions>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 Commander order changed - restarting to resync settings'" chance="100"/>
        <!-- Use abort_called_scripts like vanilla - forcefully restart at init label -->
        <abort_called_scripts resume="init"/>
      </actions>
    </handler>
    
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'GT_Training_Complete'"/>
      </conditions>
      <actions>
        <set_value name="$completionData" exact="event.param2"/>
        <set_value name="$completedLevel" exact="$completionData.$Level"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training completed for level ' + $completedLevel + ' - setting flag to resume trading'" chance="$debugchance"/>
        
        <!-- Set flag to resume trading (can't use resume in interrupt handler) -->
        <set_value name="this.$training_complete" exact="true"/>
        <remove_value name="this.$training_in_progress"/>
        <remove_value name="this.$training_transition"/>
        <remove_value name="this.$training_order_created"/>
      </actions>
    </handler>
    
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'GT_Training_Failed'"/>
      </conditions>
      <actions>
        <set_value name="$failureData" exact="event.param2"/>
        <set_value name="$reason" exact="$failureData.$Reason"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training failed: ' + $reason + ' - setting flag to resume trading'" chance="$debugchance"/>
        
        <!-- Set flag to resume trading (can't use resume in interrupt handler) -->
        <set_value name="this.$training_complete" exact="true"/>
        <remove_value name="this.$training_in_progress"/>
        <remove_value name="this.$training_transition"/>
        <remove_value name="this.$training_order_created"/>
      </actions>
    </handler>

  </interrupts>
  
  <init>
    <set_order_syncpoint_reached order="this.ship.order"/>
    <set_command command="command.searchtrades"/>
    <set_command_action commandaction="commandaction.searchingtrades"/>
    
    <!-- Legacy persistent variables removed - no longer needed with unified maintenance system -->
    
    <!-- ============================================================================= -->
    <!-- SAVE GAME CLEANUP: Clear stale tracking data when loading from a save game  -->
    <!-- ============================================================================= -->
    <!-- Check if resupply tracking exists and verify if the order is still active.   -->
    <!-- Only remove tracking if the order no longer exists (stale data).             -->
    <!-- ============================================================================= -->
    <do_if value="global.$GT_ResupplyOrders? and global.$GT_ResupplyOrders.{this.ship}?">
      <!-- Verify if ship still has an active resupply/repair order -->
      <set_value name="$hasActiveResupplyOrder" exact="false"/>
      <do_all exact="this.ship.orders.count" counter="$orderIdx">
        <do_if value="this.ship.orders.{$orderIdx}.id == 'Resupply' or this.ship.orders.{$orderIdx}.id == 'Repair'">
          <set_value name="$hasActiveResupplyOrder" exact="true"/>
          <break/>
        </do_if>
      </do_all>
      
      <do_if value="not $hasActiveResupplyOrder">
        <!-- No active order - tracking is stale, remove it -->
        <remove_value name="global.$GT_ResupplyOrders.{this.ship}"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🧹 Cleared stale resupply tracking (no active order)'" chance="100"/>
      </do_if>
      <do_else>
        <!-- Order still active - keep tracking -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Resupply order still active after save load - keeping tracking'" chance="100"/>
      </do_else>
    </do_if>
    
    <!-- ============================================================================= -->
    <!-- MODULAR INITIALIZATION - REPLACES ~200 LINES OF COMPLEX INITIALIZATION CODE -->
    <!-- ============================================================================= -->
    
    <!-- Create order parameters table for library compatibility -->
    <set_value name="$orderParams" exact="table[]"/>
    
    <!-- Legacy maintenance variables removed - no longer needed with unified maintenance system -->
    
    <!-- SUBORDINATE HOME BASE INHERITANCE: If subordinate, try to inherit commander's home -->
    <set_value name="$effectiveHome" exact="$home"/>
    <do_if value="this.ship.commander and this.ship.commander.exists and this.ship.commander != this.ship">
      <!-- Ship is a subordinate -->
      <do_if value="not $effectiveHome? or not $effectiveHome.exists or $effectiveHome == this.sector">
        <!-- Home not set or is default (ship's current sector) - try to inherit from commander -->
        <do_if value="this.ship.commander.defaultorder and this.ship.commander.defaultorder.$home?">
          <set_value name="$effectiveHome" exact="this.ship.commander.defaultorder.$home"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 👥 Subordinate inheriting home base from commander ' + this.ship.commander.idcode + ': ' + $effectiveHome.knownname" chance="100"/>
        </do_if>
      </do_if>
    </do_if>
    
    <!-- Store as script variable for persistence throughout execution -->
    <set_value name="this.$effectiveHome" exact="$effectiveHome"/>
    
    <!-- ============================================================================= -->
    <!-- SUBORDINATE SETTINGS INHERITANCE: Inherit strategic settings from commander -->
    <!-- ============================================================================= -->
    <set_value name="$isSubordinate" exact="this.ship.commander and this.ship.commander.exists and this.ship.commander != this.ship"/>
    <set_value name="$commanderOrder" exact="null"/>
    <do_if value="$isSubordinate">
      <set_value name="$commanderOrder" exact="this.ship.commander.defaultorder"/>
    </do_if>
    
    <!-- Fleet Coordination -->
    <set_value name="$effectiveFleetCoordination" exact="$fleetcoordination"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$fleetcoordination?">
      <set_value name="$effectiveFleetCoordination" exact="$commanderOrder.$fleetcoordination"/>
    </do_if>
    
    <!-- Allow Illegal Wares -->
    <set_value name="$effectiveAllowIllegal" exact="$allowillegal"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$allowillegal?">
      <set_value name="$effectiveAllowIllegal" exact="$commanderOrder.$allowillegal"/>
    </do_if>
    
    <!-- Risk Tolerance -->
    <set_value name="$effectiveRiskTolerance" exact="$risktolerance"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$risktolerance?">
      <set_value name="$effectiveRiskTolerance" exact="$commanderOrder.$risktolerance"/>
    </do_if>
    
    <!-- Faction Priority -->
    <set_value name="$effectiveFactionPriority" exact="$factionpriority"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$factionpriority?">
      <set_value name="$effectiveFactionPriority" exact="$commanderOrder.$factionpriority"/>
    </do_if>
    
    <!-- Auto Wares -->
    <set_value name="$effectiveAutoWares" exact="$autowares"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$autowares?">
      <set_value name="$effectiveAutoWares" exact="$commanderOrder.$autowares"/>
    </do_if>
    
    <!-- Ware Basket -->
    <set_value name="$effectiveWareBasket" exact="$warebasket"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$warebasket?">
      <set_value name="$effectiveWareBasket" exact="$commanderOrder.$warebasket"/>
    </do_if>
    
    <!-- Distance Penalty -->
    <set_value name="$effectiveDistancePenalty" exact="$distancepenalty"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$distancepenalty?">
      <set_value name="$effectiveDistancePenalty" exact="$commanderOrder.$distancepenalty"/>
    </do_if>
    
    <!-- Logbook Entries -->
    <set_value name="$effectiveLogbookEntries" exact="$logbookentries"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$logbookentries?">
      <set_value name="$effectiveLogbookEntries" exact="$commanderOrder.$logbookentries"/>
    </do_if>
    
    <!-- Notifications -->
    <set_value name="$effectiveNotifications" exact="$notifications"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$notifications?">
      <set_value name="$effectiveNotifications" exact="$commanderOrder.$notifications"/>
    </do_if>
    
    <!-- Debug Level -->
    <set_value name="$effectiveDebugLevel" exact="$debuglevel"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$debuglevel?">
      <set_value name="$effectiveDebugLevel" exact="$commanderOrder.$debuglevel"/>
    </do_if>
    
    <!-- Trade Evaluation Logging -->
    <set_value name="$effectiveTradeEval" exact="$tradeeval"/>
    <do_if value="$isSubordinate and $commanderOrder and $commanderOrder.$tradeeval?">
      <set_value name="$effectiveTradeEval" exact="$commanderOrder.$tradeeval"/>
    </do_if>
    
    <!-- Debug message for subordinates showing inherited settings -->
    <do_if value="$isSubordinate">
      <set_value name="$inheritedSettings" exact="[]"/>
      <do_if value="$effectiveFleetCoordination != $fleetcoordination"><append_to_list name="$inheritedSettings" exact="'FleetCoord=' + $effectiveFleetCoordination"/></do_if>
      <do_if value="$effectiveAllowIllegal != $allowillegal"><append_to_list name="$inheritedSettings" exact="'AllowIllegal=' + $effectiveAllowIllegal"/></do_if>
      <do_if value="$effectiveRiskTolerance != $risktolerance"><append_to_list name="$inheritedSettings" exact="'Risk=' + $effectiveRiskTolerance"/></do_if>
      <do_if value="$effectiveFactionPriority != $factionpriority"><append_to_list name="$inheritedSettings" exact="'FactionPri=' + $effectiveFactionPriority"/></do_if>
      <do_if value="$effectiveAutoWares != $autowares"><append_to_list name="$inheritedSettings" exact="'AutoWares=' + $effectiveAutoWares"/></do_if>
      <do_if value="$effectiveDistancePenalty != $distancepenalty"><append_to_list name="$inheritedSettings" exact="'DistPenalty=' + $effectiveDistancePenalty + '%'"/></do_if>
      <do_if value="$effectiveLogbookEntries != $logbookentries"><append_to_list name="$inheritedSettings" exact="'Logbook=' + $effectiveLogbookEntries"/></do_if>
      <do_if value="$effectiveNotifications != $notifications"><append_to_list name="$inheritedSettings" exact="'Notify=' + $effectiveNotifications"/></do_if>
      <do_if value="$effectiveDebugLevel != $debuglevel"><append_to_list name="$inheritedSettings" exact="'Debug=' + $effectiveDebugLevel"/></do_if>
      <do_if value="$effectiveTradeEval != $tradeeval"><append_to_list name="$inheritedSettings" exact="'TradeEval=' + $effectiveTradeEval"/></do_if>
      
      <do_if value="$inheritedSettings.count gt 0">
        <set_value name="$inheritedSettingsText" exact="''"/>
        <do_all exact="$inheritedSettings.count" counter="$i">
          <set_value name="$inheritedSettingsText" exact="$inheritedSettingsText + $inheritedSettings.{$i}"/>
          <do_if value="$i lt $inheritedSettings.count">
            <set_value name="$inheritedSettingsText" exact="$inheritedSettingsText + ', '"/>
          </do_if>
        </do_all>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 👥 Subordinate inherited settings from ' + this.ship.commander.idcode + ': ' + $inheritedSettingsText" chance="100"/>
      </do_if>
    </do_if>
    
    <set_value name="$orderParams.$home" exact="$effectiveHome"/>
    <set_value name="$orderParams.$maxbuy" exact="$maxbuy"/>
    <set_value name="$orderParams.$maxsell" exact="$maxsell"/>
    <set_value name="$orderParams.$allowillegal" exact="$effectiveAllowIllegal"/>
    <set_value name="$orderParams.$risktolerance" exact="$effectiveRiskTolerance"/> <!-- Inherited from commander if subordinate -->
    <set_value name="$orderParams.$factionpriority" exact="$effectiveFactionPriority"/>
    <set_value name="$orderParams.$autowares" exact="$effectiveAutoWares"/>
    <set_value name="$orderParams.$warebasket" exact="$effectiveWareBasket"/>
    <set_value name="$orderParams.$distancepenalty" exact="$effectiveDistancePenalty"/>
    <set_value name="$orderParams.$notifications" exact="$effectiveNotifications"/>
    <set_value name="$orderParams.$cargotarget" exact="$cargotarget"/>
    <set_value name="$orderParams.$marketupdatefreq" exact="$marketupdatefreq"/>
    <set_value name="$orderParams.$debuglevel" exact="$effectiveDebugLevel"/>
    <set_value name="$orderParams.$tradeeval" exact="$effectiveTradeEval"/>
    <set_value name="$orderParams.$fleetcoordination" exact="$effectiveFleetCoordination"/>
    <set_value name="$orderParams.$logbookentries" exact="$effectiveLogbookEntries"/>
    
    <!-- =========================================== -->
    <!-- HIGH-PERFORMANCE INITIALIZATION (Option A) -->
    <!-- =========================================== -->
    
    <!-- Fast variable assignment - using effective (inherited) values -->
    <set_value name="$gt_debuglevel" exact="$effectiveDebugLevel"/>
    <set_value name="$debugchance" exact="if $gt_debuglevel ge 2 then 100 else if $gt_debuglevel ge 1 then 50 else 0"/>
    
    <!-- Core trading parameters (performance optimized) - using effective (inherited) values -->
    <set_value name="$gt_allowillegal" exact="$effectiveAllowIllegal"/>
    <!-- Convert risk tolerance from 0-10 integer scale to 0.0-1.0 float scale -->
    <set_value name="$gt_risktolerance" exact="$effectiveRiskTolerance / 10.0"/>
    <set_value name="$gt_factionpriority" exact="$effectiveFactionPriority"/>
    <!-- Convert distance penalty from 0-100% to multiplier: 0%=0.0, 50%=1.0, 100%=2.0 -->
    <set_value name="$gt_distancepenalty" exact="$effectiveDistancePenalty / 50.0"/>
    <set_value name="$gt_cargotarget" exact="$cargotarget"/>
    <set_value name="$gt_marketupdatefreq" exact="$marketupdatefreq"/>
    <set_value name="$gt_logbookentries" exact="$effectiveLogbookEntries"/>
    
    <!-- Global defaults (fastest approach - direct assignment) -->
    <set_value name="$gt_enablexp" exact="true"/>
    <set_value name="$gt_autotraining" exact="true"/>
    <set_value name="$gt_fleetcoord" exact="false"/>
    
    <!-- Ware selection (optimized) - using effective inherited values -->
    <set_value name="$warebasket" exact="if $effectiveAutoWares then [] else $effectiveWareBasket"/>
    
    <!-- Single non-blocking signal to MD system -->
    <signal_objects object="player.galaxy" param="'GT_AI_Started'" param2="table[
      $Ship = this.ship,
      $Config = table[
        $allowillegal = $gt_allowillegal,
        $debuglevel = $gt_debuglevel,
        $autotraining = $gt_autotraining
      ]
    ]"/>
    
    <debug_text text="'[GT-AI] ' + this.ship.idcode + ': High-performance initialization complete'" chance="$debugchance"/>
    <do_if value="$effectiveHome? and $effectiveHome.exists">
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Operating with home base: ' + $effectiveHome.knownname + ' (maxbuy=' + $maxbuy + ', maxsell=' + $maxsell + ')'" chance="$debugchance"/>
    </do_if>
    
    <!-- Log configuration summary -->
    <do_if value="$gt_debuglevel ge 1">
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': === CONFIGURATION SUMMARY ==='" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Risk=' + $effectiveRiskTolerance + ', Illegal=' + $effectiveAllowIllegal + ', DistancePenalty=' + $effectiveDistancePenalty + '%'" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': FleetCoord=' + $effectiveFleetCoordination + ', LogbookEntries=' + $effectiveLogbookEntries + ', Notifications=' + $effectiveNotifications" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Distance limits: MaxBuy=' + $maxbuy + ' jumps, MaxSell=' + $maxsell + ' jumps'" chance="100"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': AutoWares=' + $effectiveAutoWares + ', WareBasket=' + $effectiveWareBasket.count + ' wares, TradeEval=' + $effectiveTradeEval" chance="100"/>
    </do_if>
    
    <!-- ============================================================================= -->
    <!-- END MODULAR INITIALIZATION                                                   -->
    <!-- ============================================================================= -->
    
    <!-- Initialize pilot tracking for instant pilot change detection -->
    <set_value name="this.$trackedPilot" exact="this.ship.pilot"/>
    <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Tracking pilot: ' + @this.$trackedPilot.name + ' (instant detection enabled)'" chance="$debugchance"/>
    
    <!-- ✅ CRITICAL: Register pilot on first run (for initial assignment or ship with existing cargo) -->
    <!-- This ensures ships get renamed even when first assigned to GT order -->
    <do_if value="this.ship.pilot">
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📝 INITIAL REGISTRATION: Registering pilot ' + @this.ship.pilot.name + ' on order start'" chance="100"/>
      <signal_objects object="player.galaxy" param="'GT_Update_Ship'" param2="table[
        $updateType = 'pilot_change',
        $ship = this.ship,
        $pilot = this.ship.pilot,
        $oldPilot = null
      ]"/>
    </do_if>
    
    <debug_text text="'[GalaxyTrader MK3] ' + this.ship.idcode + ': === INITIALIZATION COMPLETE === Starting main trading loop...'" chance="$debugchance"/>
    
  </init>
  
  <attention min="unknown">
    <actions>
      
      <!-- ✅ SUBORDINATE REINITIALIZATION: Jump here to restart and re-inherit commander settings -->
      <label name="init"/>
      
      <!-- Re-inherit settings from commander if this is a subordinate -->
      <do_if value="this.ship.commander and this.ship.commander.exists and this.ship.commander != this.ship">
        <set_value name="$commanderOrder" exact="this.ship.commander.defaultorder"/>
        <do_if value="$commanderOrder?">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 Re-inheriting settings from commander ' + this.ship.commander.idcode" chance="100"/>
          <!-- Re-inherit all commander settings -->
          <do_if value="$commanderOrder.$fleetcoordination?"><set_value name="$effectiveFleetCoordination" exact="$commanderOrder.$fleetcoordination"/></do_if>
          <do_if value="$commanderOrder.$allowillegal?"><set_value name="$effectiveAllowIllegal" exact="$commanderOrder.$allowillegal"/></do_if>
          <do_if value="$commanderOrder.$risktolerance?"><set_value name="$effectiveRiskTolerance" exact="$commanderOrder.$risktolerance"/></do_if>
          <do_if value="$commanderOrder.$home?"><set_value name="$effectiveHome" exact="$commanderOrder.$home"/></do_if>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Settings re-inherited successfully'" chance="100"/>
        </do_if>
      </do_if>
      
      <!-- =============================================== -->
      <!-- MAIN TRADING LOOP (Modularized)                -->
      <!-- =============================================== -->
      
      <label name="main_loop"/>
      
      <!-- ======================================= -->
      <!-- MANDATORY TRAINING CHECK (BLOCKS ALL TRADING) -->
      <!-- ======================================= -->
      
      <!-- Check if training was completed by interrupt handler -->
      <do_if value="this.$training_complete?">
        <remove_value name="this.$training_complete"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training completed - continuing with trading'" chance="$debugchance"/>
      </do_if>
      
      <!-- ✅ CRITICAL FIX: Clear stale training flags when not in training -->
      <!-- These flags can persist when AI context is reused after rapid abort/restart -->
      <do_if value="this.$training_transition? or this.$training_order_created?">
        <do_if value="not this.ship.pilot or not global.$GT_Pilots.{this.ship.pilot}.$XPBlocked?">
          <!-- Pilot is not XP blocked, so training flags are stale - clear them -->
          <remove_value name="this.$training_transition"/>
          <remove_value name="this.$training_order_created"/>
          <remove_value name="this.$training_in_progress"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🧹 Cleared stale training flags (pilot not XP blocked)'" chance="100"/>
        </do_if>
      </do_if>
      
      <!-- ======================================= -->
      <!-- PILOT CHANGE DETECTION (Instant)       -->
      <!-- ======================================= -->
      <!-- Track the current pilot and detect if player swaps pilots -->
      <set_value name="$currentPilot" exact="this.ship.pilot"/>
      <do_if value="this.$trackedPilot? and $currentPilot != this.$trackedPilot">
        <!-- Pilot changed! Send signal to MD system -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 PILOT CHANGE DETECTED! Old: ' + @this.$trackedPilot.name + ', New: ' + @$currentPilot.name" chance="100"/>
        
        <signal_objects object="player.galaxy" param="'GT_Update_Ship'" param2="table[
          $updateType = 'pilot_change',
          $ship = this.ship,
          $pilot = $currentPilot,
          $oldPilot = this.$trackedPilot
        ]"/>
      </do_if>
      <!-- Update tracked pilot -->
      <set_value name="this.$trackedPilot" exact="$currentPilot"/>
      
      <!-- ======================================= -->
      <!-- SUBORDINATE COMMANDER CHECK            -->
      <!-- ======================================= -->
      <!-- If subordinate and commander no longer has GT order, restore ship name and self-abort -->
      <do_if value="this.ship.commander and this.ship.commander.exists and this.ship.commander != this.ship">
        <set_value name="$commanderHasGT" exact="false"/>
        <do_if value="this.ship.commander.defaultorder?">
          <do_if value="@this.ship.commander.defaultorder.id == 'GalaxyTraderMK3'">
            <set_value name="$commanderHasGT" exact="true"/>
          </do_if>
        </do_if>
        
        <do_if value="not $commanderHasGT">
          <!-- Commander no longer has GT order - subordinate will follow commander's new order via Assist -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🚨 SUBORDINATE ORPHANED: Commander ' + this.ship.commander.idcode + ' no longer has GT order - restoring ship name and self-aborting'" chance="100"/>
          
          <!-- Send signal to restore ship name and cleanup -->
          <signal_objects object="player.galaxy" param="'GT_Ship_Order_Aborted'" param2="table[
            $Ship = this.ship,
            $Pilot = this.ship.pilot,
            $Reason = 'Subordinate commander changed to non-GT order',
            $OriginalName = if this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}? and global.$GT_Pilots.{this.ship.pilot}.$OriginalShipName? then global.$GT_Pilots.{this.ship.pilot}.$OriginalShipName else null
          ]"/>
          
          <!-- Set flag to prevent duplicate signal in on_abort handler -->
          <set_value name="this.$subordinate_cleanup_sent" exact="true"/>
          
          <!-- Self-cancel GT order since X4 will make us follow commander's new order anyway -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Self-canceling GT order - will follow commander via Assist'" chance="100"/>
          <cancel_order order="this.ship.defaultorder"/>
          <return/>
        </do_if>
      </do_if>
      
      <!-- MANDATORY: Check if pilot is XP blocked - NO trading allowed if blocked -->
      <set_value name="$pilotXPBlocked" exact="false"/>
      <set_value name="$pilotNameForDebug" exact="'No Pilot'"/>
      
      <do_if value="this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}?">
        <!-- Treat paused-with-training-needed as blocking to avoid any trading until training resumes -->
        <set_value name="$pilotXPBlocked" exact="global.$GT_Pilots.{this.ship.pilot}.$XPBlocked? or global.$GT_Pilots.{this.ship.pilot}.$PausedWithTrainingNeeded?"/>
        <set_value name="$pilotNameForDebug" exact="this.ship.pilot.name"/>
      </do_if>
      
      <!-- BLOCKING CONDITION: If pilot is XP blocked, training is MANDATORY before any trading -->
      <!-- Get both current level and blocked level for proper decision making -->
      <set_value name="$pilotLevel" exact="1"/>
      <set_value name="$blockedLevel" exact="1"/>
      <do_if value="this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}?">
        <do_if value="global.$GT_Pilots.{this.ship.pilot}.$Level?">
          <set_value name="$pilotLevel" exact="global.$GT_Pilots.{this.ship.pilot}.$Level"/>
        </do_if>
        <do_if value="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel?">
          <set_value name="$blockedLevel" exact="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel"/>
        </do_if>
      </do_if>
      
      <!-- DEBUG: Show the decision logic -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 DECISION LOGIC: XPBlocked=' + $pilotXPBlocked + ', ManagementLevel=' + $pilotLevel + ', BlockedLevel=' + $blockedLevel + ', Pilot=' + $pilotNameForDebug" chance="100"/>
      
      <do_if value="$pilotXPBlocked">
        <!-- Check if this is a legitimate training requirement (blocked level > 1) -->
        <do_if value="$blockedLevel gt 1">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⛔ TRAINING MANDATORY: Pilot ' + $pilotNameForDebug + ' needs Level ' + $blockedLevel + ' training - no trading allowed until training completes'" chance="100"/>
          <resume label="handle_mandatory_training"/>
        </do_if>
        <do_else>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Pilot XP blocked at Level 1 (invalid) - clearing block and proceeding with trading'" chance="100"/>
          <!-- Clear the incorrect XP block for Level 1 pilots -->
          <signal_objects object="player.galaxy" param="'GT_Clear_XP_Block'" param2="table[
            $Ship = this.ship,
            $Pilot = this.ship.pilot,
            $Reason = 'Level 1 pilots should never be XP blocked'
          ]"/>
        </do_else>
      </do_if>
      <do_elseif value="not $pilotXPBlocked">
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Pilot not XP blocked - proceeding to maintenance check'" chance="100"/>
        <!-- Check maintenance needs before trading starts -->
        <resume label="check_maintenance"/>
      </do_elseif>
      
      <!-- ======================================= -->
      <!-- INITIAL MAINTENANCE CHECK              -->
      <!-- ======================================= -->
      
      <label name="check_maintenance"/>
      
      <!-- ============================================================================= -->
      <!-- PRE-TRADE MAINTENANCE CHECK (UNIFIED SYSTEM)                                  -->
      <!-- ============================================================================= -->
      <!-- Signal unified maintenance system and wait for completion.                    -->
      <!-- MD system handles ALL logic: checking, finding stations, creating orders,     -->
      <!-- and monitoring. AI script just triggers and waits - clean separation!         -->
      <!-- ============================================================================= -->
      
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔧 Requesting maintenance check'" chance="100"/>
      
      <!-- Signal unified maintenance system to analyze and prepare data -->
      <signal_objects object="player.galaxy" param="'GT_DoMaintenance'" param2="this.ship"/>
      
      <!-- Wait for MD system to prepare data -->
      <wait exact="0.5s"/>
      
      <!-- Create Repair order if data prepared -->
      <do_if value="global.$GT_RepairOrders? and global.$GT_RepairOrders.{this.ship}?">
        <set_value name="$repairData" exact="global.$GT_RepairOrders.{this.ship}"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔧 Creating Repair order at ' + $repairData.$Station.knownname" chance="100"/>
        
        <!-- Set flag to indicate maintenance transition for on_abort handler -->
        <set_value name="this.$maintenance_transition" exact="true"/>
        
        <create_order object="this.ship" id="'Repair'" immediate="false">
          <param name="destination" value="$repairData.$Station"/>
          <param name="hullpercent" value="100"/>
          <param name="repairall" value="true"/>
          <param name="acceptedcost" value="$repairData.$AcceptedCost"/>
          <param name="urgent" value="false"/>
          <param name="internalorder" value="true"/>
        </create_order>
      </do_if>
      
      <!-- Create Resupply order if data prepared -->
      <do_if value="global.$GT_ResupplyOrders? and global.$GT_ResupplyOrders.{this.ship}?">
        <set_value name="$resupplyData" exact="global.$GT_ResupplyOrders.{this.ship}"/>
        <debug_text text="'[GT-AI] ═══════════════════════════════════════════════════════'" chance="100"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🛡️ CREATING RESUPPLY BUILD ORDER'" chance="100"/>
        <debug_text text="'[GT-AI]    Target Station: ' + $resupplyData.$Station.knownname" chance="100"/>
        <debug_text text="'[GT-AI]    Station Owner: ' + @$resupplyData.$Station.owner.knownname" chance="100"/>
        <debug_text text="'[GT-AI]    Station Sector: ' + @$resupplyData.$Station.sector.knownname" chance="100"/>
        <debug_text text="'[GT-AI]    Station exists: ' + $resupplyData.$Station.exists" chance="100"/>
        <debug_text text="'[GT-AI]    Station operational: ' + @$resupplyData.$Station.isoperational" chance="100"/>
        <debug_text text="'[GT-AI]    Distance from ship: ' + this.ship.gatedistance.{$resupplyData.$Station} + ' jumps'" chance="100"/>
        
        <!-- Use vanilla's pattern: add_build_to_modify_ship with shopping list -->
        <!-- This is what actually creates the order with specific items to buy -->
        <set_value name="$buildSuccessful" exact="false"/>
        
        <do_if value="$resupplyData.$AmmoTable or $resupplyData.$UnitTable">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📋 Shopping list - Ammo types: ' + @$resupplyData.$AmmoTable.keys.count + ', Unit types: ' + @$resupplyData.$UnitTable.keys.count" chance="100"/>
          
          <!-- Set flag to indicate maintenance transition for on_abort handler -->
          <set_value name="this.$maintenance_transition" exact="true"/>
          
          <!-- Use vanilla's add_build_to_modify_ship action -->
          <add_build_to_modify_ship 
            object="$resupplyData.$Station" 
            buildobject="this.ship" 
            ammo="$resupplyData.$AmmoTable" 
            units="$resupplyData.$UnitTable" 
            immediate="true"
            internal="true"
            result="$buildSuccessful"/>
          
          <do_if value="$buildSuccessful">
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Build order created successfully - waiting for completion'" chance="100"/>
            <debug_text text="'[GT-AI] ═══════════════════════════════════════════════════════'" chance="100"/>
            <!-- Order will complete and trigger our diff patch's on_abort handler -->
          </do_if>
          <do_else>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ❌ FAILED to create build order!'" chance="100"/>
            <debug_text text="'[GT-AI]    This usually means the station cannot build the requested items'" chance="100"/>
            <debug_text text="'[GT-AI] ═══════════════════════════════════════════════════════'" chance="100"/>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Build order creation failed - station cannot fulfill order'" chance="100"/>
            
            <!-- Clean up resupply data -->
            <remove_value name="global.$GT_ResupplyOrders.{this.ship}"/>
            
            <!-- Apply cooldown to prevent immediate retry -->
            <do_if value="not global.$GT_MaintenanceFailedResupply?">
              <set_value name="global.$GT_MaintenanceFailedResupply" exact="table[]"/>
            </do_if>
            <set_value name="global.$GT_MaintenanceFailedResupply.{this.ship}" exact="player.age + 300s"/>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🕒 Applied 5-minute cooldown due to failed build order'" chance="100"/>
            
            <!-- Remove maintenance order flag -->
            <do_if value="global.$GT_MaintenanceOrders? and global.$GT_MaintenanceOrders.{this.ship}?">
              <remove_value name="global.$GT_MaintenanceOrders.{this.ship}"/>
            </do_if>
            
            <!-- Signal MD that we're done (failed) -->
            <signal_objects object="this.ship" param="'GT_Maintenance_Complete'"/>
          </do_else>
        </do_if>
        <do_else>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Empty shopping list - nothing to buy'" chance="100"/>
          
          <!-- Clean up and skip -->
          <remove_value name="global.$GT_ResupplyOrders.{this.ship}"/>
          <do_if value="global.$GT_MaintenanceOrders? and global.$GT_MaintenanceOrders.{this.ship}?">
            <remove_value name="global.$GT_MaintenanceOrders.{this.ship}"/>
          </do_if>
          
          <signal_objects object="this.ship" param="'GT_Maintenance_Complete'"/>
        </do_else>
      </do_if>
      
      <!-- Wait for maintenance to complete -->
      <do_if value="(global.$GT_RepairOrders? and global.$GT_RepairOrders.{this.ship}?) or (global.$GT_ResupplyOrders? and global.$GT_ResupplyOrders.{this.ship}?)">
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⏳ Waiting for maintenance orders to complete (max 600s)...'" chance="100"/>
        
        <wait max="600s">
          <interrupt>
            <conditions>
              <event_object_signalled object="this.ship" param="'GT_Maintenance_Complete'"/>
            </conditions>
            <actions>
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Maintenance complete signal received, proceeding to trade search'" chance="100"/>
              
              <!-- Clear maintenance transition flag -->
              <remove_value name="this.$maintenance_transition"/>
            </actions>
          </interrupt>
        </wait>
        
        <!-- Timeout fallback -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⏱️ Maintenance timeout after 600s, proceeding anyway'" chance="100"/>
        
        <!-- Clear maintenance transition flag on timeout as well -->
        <remove_value name="this.$maintenance_transition"/>
      </do_if>
      <do_else>
        <!-- No maintenance needed -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ No maintenance needed, proceeding to trade search'" chance="100"/>
      </do_else>
      
      <!-- Proceed to trading -->
      <resume label="start_trading"/>
      
      <!-- ======================================= -->
      <!-- HIGH-PERFORMANCE TRADING LOOP          -->
      <!-- ======================================= -->
      
      <!-- ========================================= -->
      <!-- MANDATORY TRAINING HANDLER              -->
      <!-- ========================================= -->
      
      <label name="handle_mandatory_training"/>
      
      <!-- Check if ship has an active DockAndTrain order -->
      <set_value name="$hasActiveTrainingOrder" exact="false"/>
      <do_if value="this.ship.orders.count gt 0">
        <do_all exact="this.ship.orders.count" counter="$i">
          <do_if value="this.ship.orders.{$i}.id == 'DockAndTrain'">
            <set_value name="$hasActiveTrainingOrder" exact="true"/>
            <break/>
          </do_if>
        </do_all>
      </do_if>
      
      <!-- ENHANCED LOGIC: Auto-restart training if it was previously interrupted -->
      <!-- Conditions for starting/restarting training:
           1. Auto-training is enabled
           2. Ship has a pilot with GT pilot data
           3. Either: training not in progress OR no active training order (interrupted training)
      -->
      <do_if value="$gt_autotraining and this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}">
        <set_value name="$shouldStartTraining" exact="false"/>
        
        <!-- Case 1: Training not currently in progress -->
        <do_if value="not this.$training_in_progress?">
          <set_value name="$shouldStartTraining" exact="true"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Training not in progress - can start training'" chance="$debugchance"/>
        </do_if>
        <!-- Case 2: Training was marked as in progress but no active training order (interrupted) -->
        <do_elseif value="this.$training_in_progress? and not $hasActiveTrainingOrder">
          <set_value name="$shouldStartTraining" exact="true"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 TRAINING INTERRUPTED: Previous training was aborted - restarting automatically'" chance="100"/>
          <!-- Clear the stale flag -->
          <remove_value name="this.$training_in_progress"/>
        </do_elseif>
        
        <do_if value="$shouldStartTraining">
          <!-- Get blocked level with safety check -->
          <set_value name="$blockedLevel" exact="1"/>
          <do_if value="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel?">
            <set_value name="$blockedLevel" exact="global.$GT_Pilots.{this.ship.pilot}.$BlockedLevel"/>
          </do_if>
          <do_else>
            <!-- Calculate current skill level as fallback -->
            <do_if value="global.$GT_Pilots.{this.ship.pilot}.$XP?">
              <set_value name="$currentXP" exact="global.$GT_Pilots.{this.ship.pilot}.$XP"/>
              <do_all exact="15" counter="$skillLevel">
                <do_if value="$currentXP ge global.$GT_Config.$XP.$SkillThresholds.{$skillLevel}">
                  <set_value name="$blockedLevel" exact="$skillLevel"/>
                </do_if>
              </do_all>
            </do_if>
          </do_else>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🎓 Initiating mandatory training for pilot ' + $pilotNameForDebug + ' (Level ' + $blockedLevel + ')'" chance="$debugchance"/>
          
          <!-- Signal MD system to handle training -->
          <signal_objects object="player.galaxy" param="'GT_Training_Needed'" param2="table[
            $Ship = this.ship,
            $Pilot = this.ship.pilot,
            $RequiredLevel = $blockedLevel
          ]"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📡 Training signal sent to MD system for pilot ' + $pilotNameForDebug" chance="$debugchance"/>
        </do_if>
        <do_else>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⏳ Training already in progress (active order: ' + $hasActiveTrainingOrder + ') - waiting'" chance="$debugchance"/>
        </do_else>
      </do_if>
      <do_else>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Auto-training disabled or no pilot data - waiting'" chance="$debugchance"/>
      </do_else>
      
      <!-- Wait and check again - training is mandatory -->
      <wait max="10s">
        <interrupt>
          <conditions>
            <event_object_signalled object="this.ship" param="'GT_Training_Station_Found'"/>
          </conditions>
          <actions>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Training station found during wait - proceeding immediately'" chance="$debugchance"/>
          </actions>
        </interrupt>
      </wait>
      <resume label="main_loop"/>
      
      <!-- ========================================= -->
      <!-- EVENT-DRIVEN TRADE SEARCH WITH RETRY     -->
      <!-- ========================================= -->
      
      <label name="start_trading"/>
      
      <!-- Initialize retry counter if not exists -->
      <do_if value="not this.$searchFailed?">
        <set_value name="this.$searchFailed" exact="0"/>
      </do_if>
      
      <!-- Signal MD system for trade opportunities -->
      <!-- ✅ CRITICAL FIX: Check if ship already has trade orders BEFORE requesting new trade -->
      <set_value name="$hasTradeOrders" exact="false"/>
      <do_if value="this.ship.tradeorders? and this.ship.tradeorders.count gt 0">
        <set_value name="$hasTradeOrders" exact="true"/>
      </do_if>
      
      <do_if value="$hasTradeOrders">
        <!-- Ship already has pending trade orders - wait instead of requesting more -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ Ship already has ' + this.ship.tradeorders.count + ' trade orders - waiting for completion'" chance="100"/>
        
        <!-- Wait for trade completion -->
        <wait max="10s">
          <interrupt>
            <conditions>
              <check_any>
                <event_object_signalled object="this.ship" param="'GT_Trade_Completed'"/>
                <event_object_signalled object="this.ship" param="'GT_Trade_Failed'"/>
              </check_any>
            </conditions>
            <actions>
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Trade order completed early - checking status immediately'" chance="100"/>
            </actions>
          </interrupt>
        </wait>
        <resume label="main_loop"/>
      </do_if>
      <do_else>
        <!-- Ship ready for new trade - check cargo status -->
        <!-- ✅ CARGO CHECK: Only trade if cargo is EMPTY -->
        <set_value name="$hasCargo" exact="this.ship.cargo.free.all lt this.ship.cargo.capacity.all"/>
        
        <do_if value="$hasCargo">
          <!-- Ship has cargo - sell it first using our trade search -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Ship has cargo - finding best buyer using trade search...'" chance="100"/>
          
          <!-- Set cargo disposal flag for ship name -->
          <do_if value="global.$GT_Ships? and global.$GT_Ships.{this.ship}?">
            <set_value name="global.$GT_Ships.{this.ship}.$CargoDisposal" exact="true"/>
          </do_if>
          
          <!-- Trigger ship rename to show [CLEARANCE] state -->
          <do_if value="@this.ship.pilot and global.$GT_Pilots? and global.$GT_Pilots.{this.ship.pilot}?">
            <signal_objects object="player.galaxy" param="'GT_Update_Ship_Name'" param2="table[
              $ship=this.ship, 
              $pilot=this.ship.pilot, 
              $xp=global.$GT_Pilots.{this.ship.pilot}.$XP, 
              $level=global.$GT_Pilots.{this.ship.pilot}.$Level,
              $rank=@global.$GT_Pilots.{this.ship.pilot}.$CurrentRank,
              $nameType='trader'
            ]"/>
          </do_if>
          
          <!-- Write logbook entry about cargo safety -->
          <do_if value="$gt_logbookentries">
            <set_value name="$message" exact="{77000,3204}.[this.ship.knownname]"/>
            <write_to_logbook 
              category="upkeep" 
              title="'Cargo Safety: ' + this.ship.knownname" 
              text="$message"
              interaction="showonmap" 
              object="this.ship"/>
          </do_if>
          
          <signal_objects object="player.galaxy" param="'GT_Find_Sell'" param2="table[
            $Ship = this.ship,
            $HomeBase = this.$effectiveHome,
            $MaxSell = $maxsell,
            $RiskTolerance = $gt_risktolerance,
            $DistancePenalty = $effectiveDistancePenalty,
            $FleetCoordination = $effectiveFleetCoordination
          ]"/>
        </do_if>
        <do_else>
          <!-- Ship cargo is EMPTY - look for buy opportunities -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Cargo empty - looking for trade opportunities...'" chance="$debugchance"/>
          
          <!-- Clear cargo disposal flag (cargo is now empty) -->
          <do_if value="global.$GT_Ships? and global.$GT_Ships.{this.ship}? and global.$GT_Ships.{this.ship}.$CargoDisposal?">
            <remove_value name="global.$GT_Ships.{this.ship}.$CargoDisposal"/>
            
            <!-- Trigger ship rename to remove [CLEARANCE] state -->
            <do_if value="@this.ship.pilot and global.$GT_Pilots? and global.$GT_Pilots.{this.ship.pilot}?">
              <signal_objects object="player.galaxy" param="'GT_Update_Ship_Name'" param2="table[
                $ship=this.ship, 
                $pilot=this.ship.pilot, 
                $xp=global.$GT_Pilots.{this.ship.pilot}.$XP, 
                $level=global.$GT_Pilots.{this.ship.pilot}.$Level,
                $rank=@global.$GT_Pilots.{this.ship.pilot}.$CurrentRank,
                $nameType='trader'
              ]"/>
            </do_if>
          </do_if>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📤 SENDING GT_Find_Trade signal to MD at game time ' + player.age" chance="100"/>
          <signal_objects object="player.galaxy" param="'GT_Find_Trade'" param2="table[
            $Ship = this.ship,
            $HomeBase = this.$effectiveHome,
            $MaxBuy = $maxbuy,
            $MaxSell = $maxsell,
            $CargoTarget = $gt_cargotarget,
            $WareBasket = $warebasket,
            $AllowIllegal = $gt_allowillegal,
            $RiskTolerance = $gt_risktolerance,
            $DistancePenalty = $effectiveDistancePenalty,
            $FleetCoordination = $effectiveFleetCoordination
          ]"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📤 GT_Find_Trade signal SENT, now at game time ' + player.age" chance="100"/>
        </do_else>
      </do_else>
      
      <!-- Wait for MD system response with interrupt -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🕐 Entering wait state for MD response at game time ' + player.age" chance="100"/>
      <label name="wait_for_response"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 👂 Wait interrupt handler ACTIVE at game time ' + player.age" chance="100"/>
      <wait max="60s" comment="Wait for MD system response">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="this.ship" param="'GT_Trade_Found'"/>
              <event_object_signalled object="this.ship" param="'GT_No_Trade_Found'"/>
              <!-- ✅ SIMPLE: Destination threatened → abort and restart main loop -->
              <event_object_signalled object="this.ship" param="'GT_Destination_Threatened'"/>
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.param == 'GT_Trade_Found'">
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📥 INTERRUPT FIRED: GT_Trade_Found received at game time ' + player.age" chance="100"/>
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Trade found by MD system - proceeding with execution'" chance="100"/>
              <!-- Reset retry counter on successful trade -->
              <set_value name="this.$searchFailed" exact="0"/>
              
              <!-- Clear reroute flag (new destination found) -->
              <do_if value="global.$GT_Ships? and global.$GT_Ships.{this.ship}? and global.$GT_Ships.{this.ship}.$Rerouting?">
                <remove_value name="global.$GT_Ships.{this.ship}.$Rerouting"/>
                
                <!-- Trigger ship rename to remove [REROUTE] state -->
                <do_if value="@this.ship.pilot and global.$GT_Pilots? and global.$GT_Pilots.{this.ship.pilot}?">
                  <signal_objects object="player.galaxy" param="'GT_Update_Ship_Name'" param2="table[
                    $ship=this.ship, 
                    $pilot=this.ship.pilot, 
                    $xp=global.$GT_Pilots.{this.ship.pilot}.$XP, 
                    $level=global.$GT_Pilots.{this.ship.pilot}.$Level,
                    $rank=@global.$GT_Pilots.{this.ship.pilot}.$CurrentRank,
                    $nameType='trader'
                  ]"/>
                </do_if>
              </do_if>
              
              <resume label="trade_found"/>
            </do_if>
            <do_elseif value="event.param == 'GT_No_Trade_Found'">
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📥 INTERRUPT FIRED: GT_No_Trade_Found received at game time ' + player.age" chance="100"/>
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📨 RECEIVED GT_No_Trade_Found signal - starting retry logic'" chance="100"/>
              <resume label="no_trade_retry"/>
            </do_elseif>
            <do_elseif value="event.param == 'GT_Destination_Threatened'">
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📥 INTERRUPT FIRED: Destination threatened - aborting current trade'" chance="100"/>
              
              <!-- Set reroute flag for ship name -->
              <do_if value="global.$GT_Ships? and global.$GT_Ships.{this.ship}?">
                <set_value name="global.$GT_Ships.{this.ship}.$Rerouting" exact="true"/>
              </do_if>
              
              <!-- Trigger ship rename to show [REROUTE] state -->
              <do_if value="@this.ship.pilot and global.$GT_Pilots? and global.$GT_Pilots.{this.ship.pilot}?">
                <signal_objects object="player.galaxy" param="'GT_Update_Ship_Name'" param2="table[
                  $ship=this.ship, 
                  $pilot=this.ship.pilot, 
                  $xp=global.$GT_Pilots.{this.ship.pilot}.$XP, 
                  $level=global.$GT_Pilots.{this.ship.pilot}.$Level,
                  $rank=@global.$GT_Pilots.{this.ship.pilot}.$CurrentRank,
                  $nameType='trader'
                ]"/>
              </do_if>
              
              <!-- Player logbook notification about route threat -->
              <do_if value="$gt_logbookentries">
                <set_value name="$threatData" exact="event.param2"/>
                <set_value name="$threatenedSector" exact="@$threatData.$Sector"/>
                <set_value name="$threatLevel" exact="@$threatData.$ThreatLevel"/>
                <set_value name="$hasCargo" exact="this.ship.cargo.free.all lt this.ship.cargo.capacity.all"/>
                
                <set_value name="$message" exact="{77000,3209}.[@$threatenedSector.knownname, $threatLevel, this.ship.knownname]"/>
                <write_to_logbook
                  category="alerts"
                  title="'Route Threat Detected: ' + this.ship.knownname"
                  text="$message"
                  interaction="showonmap"
                  object="this.ship"
                  highlighted="true"/>
              </do_if>
              
              <!-- ✅ SIMPLE: Abort current trade, go back to main loop -->
              <!-- Cargo check will detect cargo and send GT_Find_Sell automatically -->
              <cancel_all_orders object="this.ship"/>
              <resume label="main_loop"/>
            </do_elseif>
          </actions>
        </interrupt>
      </wait>
      
      <!-- Timeout fallback - treat as no trade found -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⏰ TIMEOUT: MD system response timeout at game time ' + player.age + ' - assuming no trades'" chance="100"/>
      <resume label="no_trade_retry"/>
      
      <!-- ========================================= -->
      <!-- TRADE FOUND - VALIDATE BLACKLIST FIRST   -->
      <!-- ========================================= -->
      <label name="trade_found"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🎯 REACHED trade_found label - starting blacklist validation at game time ' + player.age" chance="100"/>
      
      <!-- ✅ NEW: Iterate through trade list and validate each one -->
      <!-- MD provided a list of up to 20 trades - we try each until we find a valid one -->
      <do_if value="global.$GT_PendingTrades? and global.$GT_PendingTrades.{this.ship}?">
        <set_value name="$tradeList" exact="global.$GT_PendingTrades.{this.ship}"/>
        
        <!-- Ensure it's a list -->
        <do_if value="typeof $tradeList != datatype.list">
          <!-- Backward compat: single trade stored as table -->
          <set_value name="$tradeList" exact="[$tradeList]"/>
        </do_if>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📋 Received ' + $tradeList.count + ' trades to validate'" chance="100"/>
        
        <set_value name="$validTradeFound" exact="false"/>
        <set_value name="$pendingTrade" exact="null"/>
        <set_value name="$buyStation" exact="null"/>
        <set_value name="$sellStation" exact="null"/>
        <set_value name="$tradesChecked" exact="0"/>
        <set_value name="$tradesBlacklisted" exact="0"/>
        <set_value name="$tradesRejectedDocking" exact="0"/>
        <set_value name="$tradesRejectedPath" exact="0"/>
        
        <!-- Iterate through trade list -->
        <do_all exact="$tradeList.count" counter="$tradeIdx">
          <set_value name="$currentTrade" exact="$tradeList.{$tradeIdx}"/>
          <set_value name="$tradesChecked" operation="add"/>
          
          <!-- Extract stations from trade (handle both new list format and old single-trade format) -->
          <do_if value="$currentTrade.$BuyStation?">
            <set_value name="$buyStation" exact="$currentTrade.$BuyStation"/>
          </do_if>
          <do_else>
            <set_value name="$buyStation" exact="@$currentTrade.$BuyOffer.owner"/>
          </do_else>
          
          <do_if value="$currentTrade.$SellStation?">
            <set_value name="$sellStation" exact="$currentTrade.$SellStation"/>
          </do_if>
          <do_else>
            <set_value name="$sellStation" exact="@$currentTrade.$SellOffer.owner"/>
          </do_else>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 Validating trade ' + $tradeIdx + '/' + $tradeList.count + ': ' + @$currentTrade.$BuyOffer.ware.name + ' (' + @$buyStation.knownname + ' → ' + @$sellStation.knownname + ')'" chance="100"/>
        
        <!-- CRITICAL: Check docking permissions FIRST (most common failure, cheapest check) -->
        <set_value name="$canDockAtBuyStation" exact="$buyStation.dockingallowed.{this.assignedcontrolled}"/>
        <set_value name="$canDockAtSellStation" exact="$sellStation.dockingallowed.{this.assignedcontrolled}"/>
        
        <do_if value="not $canDockAtBuyStation or not $canDockAtSellStation">
          <!-- DOCKING NOT ALLOWED - Skip to next trade -->
          <set_value name="$tradesRejectedDocking" operation="add"/>
          <set_value name="$deniedStation" exact="if not $canDockAtBuyStation then $buyStation else $sellStation"/>
          <set_value name="$deniedType" exact="if not $canDockAtBuyStation then 'BUY' else 'SELL'"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⛔ Trade ' + $tradeIdx + '/' + $tradeList.count + ' DOCKING DENIED:' + 
            '\n  Station: ' + @$deniedStation.knownname + 
            '\n  Sector: ' + @$deniedStation.sector.knownname + 
            '\n  Type: ' + $deniedType + 
            '\n  Reason: Docking not allowed (reputation, war, or permissions)' +
            '\n  → Trying next trade in list...'" 
            chance="100"/>
          
          <!-- Continue to next trade in list -->
          <continue/>
        </do_if>
        
        <!-- Determine ship's blacklistgroup (same logic as vanilla's lib.define.blacklistgroup) -->
        <set_value name="$blacklistgroup" exact="blacklistgroup.civilian"/>
        <do_if value="(@this.assignedcontrolled.primarypurpose == purpose.fight) or (@this.assignedcontrolled.primarypurpose == purpose.auxiliary)">
          <set_value name="$blacklistgroup" exact="blacklistgroup.military"/>
        </do_if>
        
        <!-- CRITICAL: Check path reachability BEFORE blacklist (faster to fail on unreachable) -->
        <!-- Check if buy station is reachable using BLACKLIST-AWARE gatedistance -->
        <!-- CRITICAL: Must use blacklist parameters so gatedistance respects blocked paths! -->
        <!-- Correct syntax: $ship.gatedistance.{$targetSector}.{$blacklistgroup}.{$ship} (NO blacklisttype!) -->
        <set_value name="$buySector" exact="$buyStation.sector"/>
        <set_value name="$sellSector" exact="$sellStation.sector"/>
        <set_value name="$buyDistance" exact="this.assignedcontrolled.gatedistance.{$buySector}.{$blacklistgroup}.{this.assignedcontrolled}"/>
        <set_value name="$sellDistance" exact="this.assignedcontrolled.gatedistance.{$sellSector}.{$blacklistgroup}.{this.assignedcontrolled}"/>
        
        <!-- DEBUG: Always log distance check to diagnose issues -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 PATH check (blacklist-aware):' + 
          '\n  BUY: ' + @$buyStation.knownname + ' (Sector: ' + @$buyStation.sector.knownname + ', Distance: ' + $buyDistance + ')' +
          '\n  SELL: ' + @$sellStation.knownname + ' (Sector: ' + @$sellStation.sector.knownname + ', Distance: ' + $sellDistance + ')' +
          '\n  Blacklist group: ' + $blacklistgroup +
          '\n  Result: ' + (if $buyDistance lt 0 or $sellDistance lt 0 then 'BLOCKED' else 'OK')" 
          chance="100"/>
        
        <do_if value="$buyDistance lt 0 or $sellDistance lt 0">
          <!-- PATH BLOCKED - Skip to next trade -->
          <set_value name="$tradesRejectedPath" operation="add"/>
          <set_value name="$unreachableStation" exact="if $buyDistance lt 0 then $buyStation else $sellStation"/>
          <set_value name="$unreachableType" exact="if $buyDistance lt 0 then 'BUY' else 'SELL'"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🚫 Trade ' + $tradeIdx + '/' + $tradeList.count + ' PATH BLOCKED:' + 
            '\n  Station: ' + @$unreachableStation.knownname + 
            '\n  Type: ' + $unreachableType + 
            '\n  Reason: No path exists (disconnected sectors, war, or gates destroyed)' +
            '\n  → Trying next trade in list...'" 
            chance="100"/>
          
          <!-- Continue to next trade in list -->
          <continue/>
        </do_if>
        
        <!-- Check if buy station OR its sector is blacklisted (matches vanilla's order.trade.perform line 156) -->
        <set_value name="$buyBlacklisted" exact="false"/>
        <do_if value="$blacklistgroup?">
          <!-- Check station itself (objectactivity) -->
          <set_value name="$buyStationBlacklisted" exact="@$buyStation.isblacklisted.{blacklisttype.objectactivity}.{$blacklistgroup}.{this.assignedcontrolled}"/>
          <!-- Check sector (sectoractivity AND sectortravel - same as vanilla) -->
          <set_value name="$buySectorActivityBlacklisted" exact="@$buyStation.sector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled}"/>
          <set_value name="$buySectorTravelBlacklisted" exact="@$buyStation.sector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}"/>
          
          <set_value name="$buyBlacklisted" exact="$buyStationBlacklisted or $buySectorActivityBlacklisted or $buySectorTravelBlacklisted"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 BUY blacklist check:' + 
            '\n  Station: ' + @$buyStation.knownname + 
            '\n  Sector: ' + @$buyStation.sector.knownname + 
            '\n  Station (objectactivity): ' + $buyStationBlacklisted + 
            '\n  Sector (sectoractivity): ' + $buySectorActivityBlacklisted + 
            '\n  Sector (sectortravel): ' + $buySectorTravelBlacklisted + 
            '\n  Final result: ' + $buyBlacklisted" 
            chance="100"/>
        </do_if>
        
        <!-- Check if sell station OR its sector is blacklisted (matches vanilla's order.trade.perform line 156) -->
        <set_value name="$sellBlacklisted" exact="false"/>
        <do_if value="$blacklistgroup?">
          <!-- Check station itself (objectactivity) -->
          <set_value name="$sellStationBlacklisted" exact="@$sellStation.isblacklisted.{blacklisttype.objectactivity}.{$blacklistgroup}.{this.assignedcontrolled}"/>
          <!-- Check sector (sectoractivity AND sectortravel - same as vanilla) -->
          <set_value name="$sellSectorActivityBlacklisted" exact="@$sellStation.sector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled}"/>
          <set_value name="$sellSectorTravelBlacklisted" exact="@$sellStation.sector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}"/>
          
          <set_value name="$sellBlacklisted" exact="$sellStationBlacklisted or $sellSectorActivityBlacklisted or $sellSectorTravelBlacklisted"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 SELL blacklist check:' + 
            '\n  Station: ' + @$sellStation.knownname + 
            '\n  Sector: ' + @$sellStation.sector.knownname + 
            '\n  Station (objectactivity): ' + $sellStationBlacklisted + 
            '\n  Sector (sectoractivity): ' + $sellSectorActivityBlacklisted + 
            '\n  Sector (sectortravel): ' + $sellSectorTravelBlacklisted + 
            '\n  Final result: ' + $sellBlacklisted" 
            chance="100"/>
        </do_if>
        
          <!-- Check if trade is blacklisted -->
          <do_if value="$buyBlacklisted or $sellBlacklisted">
            <!-- BLACKLISTED - Skip to next trade in list -->
            <set_value name="$tradesBlacklisted" operation="add"/>
            <set_value name="$blacklistedStation" exact="if $buyBlacklisted then $buyStation else $sellStation"/>
            <set_value name="$tradeType" exact="if $buyBlacklisted then 'BUY' else 'SELL'"/>
            
            <!-- Determine what was blacklisted (station or sector) -->
            <set_value name="$blacklistReason" exact="'Sector (sectortravel)'"/>  <!-- Default to most common case -->
            <do_if value="$buyBlacklisted">
              <do_if value="$buyStationBlacklisted">
                <set_value name="$blacklistReason" exact="'Station (objectactivity)'"/>
              </do_if>
              <do_elseif value="$buySectorActivityBlacklisted">
                <set_value name="$blacklistReason" exact="'Sector (sectoractivity)'"/>
              </do_elseif>
            </do_if>
            <do_else>
              <do_if value="$sellStationBlacklisted">
                <set_value name="$blacklistReason" exact="'Station (objectactivity)'"/>
              </do_if>
              <do_elseif value="$sellSectorActivityBlacklisted">
                <set_value name="$blacklistReason" exact="'Sector (sectoractivity)'"/>
              </do_elseif>
            </do_else>
            
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⛔ Trade ' + $tradeIdx + '/' + $tradeList.count + ' BLACKLISTED:' + 
              '\n  Station: ' + @$blacklistedStation.knownname + 
              '\n  Sector: ' + @$blacklistedStation.sector.knownname + 
              '\n  Type: ' + $tradeType + 
              '\n  Reason: ' + $blacklistReason + 
              '\n  → Trying next trade in list...'" 
              chance="100"/>
            
            <!-- Record failed sector for future filtering -->
            <signal_objects object="player.galaxy" param="'GT_Trade_Failed'" param2="table[
              $Ship = this.ship,
              $Reason = 'TRADEPARTNER_BLACKLISTED',
              $FailureText = 'Trade partner is blacklisted (pre-validation)',
              $Partner = $blacklistedStation,
              $IsBuying = $buyBlacklisted,
              $Ware = @$currentTrade.$Ware
            ]"/>
            
            <!-- Continue to next trade in list -->
            <continue/>
          </do_if>
          <do_else>
            <!-- ✅ VALIDATION PASSED - This trade is valid! -->
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Trade ' + $tradeIdx + '/' + $tradeList.count + ' is VALID - using this trade!'" chance="100"/>
            <set_value name="$validTradeFound" exact="true"/>
            <set_value name="$pendingTrade" exact="$currentTrade"/>
            <!-- Break out of loop - we found a valid trade -->
            <break/>
          </do_else>
        </do_all>
        
        <!-- After loop: Check if we found a valid trade -->
        <do_if value="$validTradeFound">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Validation PASSED - creating trade orders (checked ' + $tradesChecked + ' trades, ' + $tradesRejectedPath + ' unreachable, ' + $tradesRejectedDocking + ' docking denied, ' + $tradesBlacklisted + ' blacklisted)'" chance="100"/>
          
          <!-- ✅ CRITICAL FIX: Update pending trade entry with ACTUAL trade being executed -->
          <!-- Failure handler expects table with $BuyStation, $SellStation, $Ware -->
          <!-- Replace trade list with specific trade data for failure tracking -->
          <do_if value="not global.$GT_PendingTrades?">
            <set_value name="global.$GT_PendingTrades" exact="table[]"/>
          </do_if>
          <set_value name="global.$GT_PendingTrades.{this.ship}" exact="table[
            $BuyStation = $buyStation,
            $SellStation = $sellStation,
            $Ware = @$pendingTrade.$BuyOffer.ware
          ]"/>
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 💾 Updated pending trade entry for failure tracking:' +
            '\n  Buy: ' + @$buyStation.knownname +
            '\n  Sell: ' + @$sellStation.knownname +
            '\n  Ware: ' + @$pendingTrade.$BuyOffer.ware.name"
            chance="100"/>
          
          <!-- Create X4 native TradePerform orders with blacklist routing -->
          <create_trade_order object="this.ship" tradeoffer="$pendingTrade.$BuyOffer" amount="$pendingTrade.$Amount" immediate="false" internal="true"/>
          <create_trade_order object="this.ship" tradeoffer="$pendingTrade.$SellOffer" amount="$pendingTrade.$Amount" immediate="false" internal="true"/>
          
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📋 Trade orders created:' +
            '\n  BUY: ' + @$buyStation.knownname + ' → ' + @$pendingTrade.$Ware.name + ' (x' + $pendingTrade.$Amount + ')' +
            '\n  SELL: ' + @$sellStation.knownname"
            chance="100"/>
          
          <!-- Log to ship logbook if enabled (moved from MD execution to after validation) -->
          <set_value name="$logbookEnabled" exact="false"/>
          <do_if value="@this.ship.defaultorder.id == 'GalaxyTraderMK3' and @this.ship.defaultorder.$logbookentries">
            <set_value name="$logbookEnabled" exact="true"/>
          </do_if>
          <do_elseif value="@this.ship.defaultorder.id == 'Assist' and @this.ship.commander.defaultorder.id == 'GalaxyTraderMK3' and @this.ship.commander.defaultorder.$logbookentries">
            <set_value name="$logbookEnabled" exact="true"/>
          </do_elseif>
          
          <do_if value="$logbookEnabled">
            <signal_objects object="player.galaxy" param="'GT_TradeLogging_LogTradeOrder'" param2="table[
              $Ship = this.ship,
              $BuyOffer = $pendingTrade.$BuyOffer,
              $SellOffer = $pendingTrade.$SellOffer,
              $Amount = $pendingTrade.$Amount,
              $Profit = $pendingTrade.$Profit,
              $BuyPrice = $pendingTrade.$BuyPrice / 100,
              $SellPrice = $pendingTrade.$SellPrice / 100
            ]"/>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📝 Logbook entry queued'" chance="100"/>
          </do_if>
        </do_if>
        <do_else>
          <!-- All trades in list were blacklisted - request new search -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⛔ ALL ' + $tradeList.count + ' trades were blacklisted - entering retry logic'" chance="100"/>
          <resume label="no_trade_retry"/>
        </do_else>
      </do_if>
      <do_else>
        <!-- No pending trade data - this shouldn't happen -->
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⚠️ GT_Trade_Found received but no pending trade data!'" chance="100"/>
        <wait exact="5s"/>
        <resume label="main_loop"/>
      </do_else>
      
      <!-- Non-blocking XP update signal -->
      <do_if value="$gt_enablexp and this.ship.pilot">
        <signal_objects object="player.galaxy" param="'GT_Update_Pilot_XP'" param2="table[
          $Ship = this.ship,
          $Pilot = this.ship.pilot
        ]"/>
      </do_if>
      
      <!-- Set ship to trading state -->
      <set_command command="command.trade"/>
      
      <!-- PHASE 5: Wait for trade completion or failure signal from diff patch (event-driven, no polling) -->
      <wait max="300s" comment="Wait for trade completion or failure signal">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="this.ship" param="'GT_Trade_Completed'"/>
              <event_object_signalled object="this.ship" param="'GT_Trade_Failed'"/>
              <event_object_signalled object="this.ship" param="'GT_Try_Next_Trade'"/>
            </check_any>
          </conditions>
          <actions>
            <!-- Check which signal was received -->
            <do_if value="event.param == 'GT_Trade_Completed'">
              <debug_text text="'[GT-AI] ✅ Trade completed signal received for ' + this.ship.idcode" chance="$debugchance"/>
              <set_value name="this.$tradeComplete" exact="true"/>
            </do_if>
            <do_elseif value="event.param == 'GT_Trade_Failed'">
              <set_value name="this.$failureReason" exact="event.param2"/>
              <debug_text text="'[GT-AI] ❌ Trade failed for ' + this.ship.idcode + ': ' + this.$failureReason" chance="100"/>
              <set_value name="this.$tradeFailed" exact="true"/>
            </do_elseif>
            <do_elseif value="event.param == 'GT_Try_Next_Trade'">
              <set_value name="this.$failureReason" exact="event.param2"/>
              <debug_text text="'[GT-AI] 🔄 Pathfinding failed for ' + this.ship.idcode + ': ' + this.$failureReason + ' - trying next cached alternative'" chance="100"/>
              <!-- Mark as failed but with special retry flag -->
              <set_value name="this.$tradeFailed" exact="true"/>
              <set_value name="this.$tryNextTrade" exact="true"/>
            </do_elseif>
            <resume label="trade_completed"/>
          </actions>
        </interrupt>
      </wait>
      
      <!-- Timeout fallback -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Trade completion timeout after 300s - resuming anyway'" chance="$debugchance"/>
      
      <label name="trade_completed"/>
      
      <!-- Check if this is a pathfinding retry (try next cached alternative) -->
      <do_if value="this.$tryNextTrade?">
        <remove_value name="this.$tryNextTrade"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 Immediately requesting next trade (cache will skip failed trades)'" chance="100"/>
        <!-- Skip market update wait - immediately try next cached trade -->
        <resume label="main_loop"/>
      </do_if>
      
      <!-- NOTE: Auto-repair check has been moved to MD system (gt_trading_ai.xml TradeCompleted cue) -->
      <!-- This ensures it runs even when the order is aborted/replaced during trade execution -->
      
      <!-- Update market data interval -->
      <wait max="$gt_marketupdatefreq">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="this.ship" param="'GT_Trade_Found'" comment="New trade found"/>
              <event_object_signalled object="this.ship" param="'GT_No_Trade_Found'" comment="Wake-up signal"/>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Signal received during market update wait - resuming immediately'" chance="100"/>
          </actions>
        </interrupt>
      </wait>
      <resume label="main_loop"/>
      
      <!-- ========================================= -->
      <!-- NO TRADE FOUND - ESCALATING RETRY LOGIC  -->
      <!-- ========================================= -->
      <label name="no_trade_retry"/>
      
      <!-- Increment failure counter -->
      <set_value name="this.$searchFailed" exact="this.$searchFailed + 1"/>
      
      <!-- Calculate escalating wait time: 10s, 20s, 30s, 40s, 50s, 60s (max) -->
      <set_value name="$waitTime" exact="[this.$searchFailed * 10s, 60s].min"/>
      
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': No profitable trades found (attempt ' + this.$searchFailed + ') - waiting ' + ($waitTime/1s) + 's before retry'" chance="100"/>
      
      <!-- Set ship to waiting state -->
      <set_command command="command.wait"/>
      <set_command_action commandaction="commandaction.standingby"/>
      
      <!-- Wait with escalating delay -->
      <!-- Track if wait was interrupted (so we don't write logbook if interrupted) -->
      <set_value name="$waitInterrupted" exact="false"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ⏸️ Entering wait for ' + ($waitTime/1s) + 's at game time ' + player.age" chance="100"/>
      <wait max="$waitTime" comment="Use max to allow interrupt">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="this.ship" param="'GT_Trade_Found'" comment="MD found a trade"/>
              <event_object_signalled object="this.ship" param="'GT_No_Trade_Found'" comment="Wake-up signal from load recovery"/>
            </check_any>
          </conditions>
          <actions>
            <set_value name="$waitInterrupted" exact="true"/>
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔔 Wake-up signal received during retry wait - resuming immediately'" chance="100"/>
          </actions>
        </interrupt>
      </wait>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': ✅ Wait completed at game time ' + player.age + ' - resuming main loop (interrupted: ' + $waitInterrupted + ')'" chance="100"/>
      
      <!-- ✅ Write logbook entry only if we've reached max wait (60s) AND wait completed naturally (not interrupted) -->
      <!-- Also check if we've already written a logbook entry recently to prevent duplicates -->
      <set_value name="$shouldWriteLogbook" exact="false"/>
      <do_if value="$waitTime == 60s and not $waitInterrupted">
        <!-- Check if we've already written a logbook entry in the last 5 minutes (300s) -->
        <set_value name="$lastLogbookTime" exact="0"/>
        <do_if value="this.$lastLogbookEntryTime?">
          <set_value name="$lastLogbookTime" exact="this.$lastLogbookEntryTime"/>
        </do_if>
        <set_value name="$timeSinceLastLogbook" exact="player.age - $lastLogbookTime"/>
        <do_if value="$timeSinceLastLogbook ge 300s or $lastLogbookTime == 0">
          <!-- Haven't written logbook recently (or never) - OK to write -->
          <set_value name="$shouldWriteLogbook" exact="true"/>
        </do_if>
      </do_if>
      
      <do_if value="$shouldWriteLogbook">
        <!-- Check if logbook enabled -->
        <set_value name="$logEnabled" exact="false"/>
        <do_if value="@this.ship.defaultorder.id == 'GalaxyTraderMK3' and @this.ship.defaultorder.$logbookentries">
          <set_value name="$logEnabled" exact="true"/>
        </do_if>
        <!-- Subordinates inherit logbook setting from commander -->
        <do_elseif value="@this.ship.defaultorder.id == 'Assist' and @this.ship.commander.defaultorder.id == 'GalaxyTraderMK3' and @this.ship.commander.defaultorder.$logbookentries">
          <set_value name="$logEnabled" exact="true"/>
        </do_elseif>
        
        <do_if value="$logEnabled">
          <!-- Get last search rejection stats from global (set by MD script) - per-ship storage -->
          <set_value name="$lastRejectionStats" exact="@global.$GT_SearchResult.$LastRejectionStats.{this.ship}"/>
          <set_value name="$totalRejected" exact="0"/>
          <set_value name="$tradesRejectedDocking" exact="0"/>
          <set_value name="$tradesRejectedProfit" exact="0"/>
          <set_value name="$tradesRejectedAmount" exact="0"/>
          <set_value name="$tradesRejectedBlacklist" exact="0"/>
          <set_value name="$sectorName" exact="''"/>
          <set_value name="$maxDistance" exact="10"/>
          <set_value name="$minAbsoluteProfit" exact="100"/>
          
          <do_if value="$lastRejectionStats?">
            <!-- ✅ DEBUG: Log what we retrieved -->
            <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔍 RETRIEVED LastRejectionStats:' +
              '\n  Total exists: ' + (if $lastRejectionStats.$Total? then 'yes' else 'no') +
              '\n  Total value: ' + (if $lastRejectionStats.$Total? then $lastRejectionStats.$Total else 'null') +
              '\n  Docking exists: ' + (if $lastRejectionStats.$Docking? then 'yes' else 'no') +
              '\n  Docking value: ' + (if $lastRejectionStats.$Docking? then $lastRejectionStats.$Docking else 'null') +
              '\n  Profit exists: ' + (if $lastRejectionStats.$Profit? then 'yes' else 'no') +
              '\n  Profit value: ' + (if $lastRejectionStats.$Profit? then $lastRejectionStats.$Profit else 'null') +
              '\n  Amount exists: ' + (if $lastRejectionStats.$Amount? then 'yes' else 'no') +
              '\n  Amount value: ' + (if $lastRejectionStats.$Amount? then $lastRejectionStats.$Amount else 'null') +
              '\n  Blacklist exists: ' + (if $lastRejectionStats.$Blacklist? then 'yes' else 'no') +
              '\n  Blacklist value: ' + (if $lastRejectionStats.$Blacklist? then $lastRejectionStats.$Blacklist else 'null') +
              '\n  SectorName exists: ' + (if $lastRejectionStats.$SectorName? then 'yes' else 'no') +
              '\n  SectorName value: ' + (if $lastRejectionStats.$SectorName? then $lastRejectionStats.$SectorName else 'null') +
              '\n  MaxDistance exists: ' + (if $lastRejectionStats.$MaxDistance? then 'yes' else 'no') +
              '\n  MaxDistance value: ' + (if $lastRejectionStats.$MaxDistance? then $lastRejectionStats.$MaxDistance else 'null') +
              '\n  MinAbsoluteProfit exists: ' + (if $lastRejectionStats.$MinAbsoluteProfit? then 'yes' else 'no') +
              '\n  MinAbsoluteProfit value: ' + (if $lastRejectionStats.$MinAbsoluteProfit? then $lastRejectionStats.$MinAbsoluteProfit else 'null')" 
              chance="100"/>
            
            <!-- Extract values and default to 0 if null (memory:10529400 - ? checks existence, not null) -->
            <set_value name="$totalRejectedTemp" exact="@$lastRejectionStats.$Total"/>
            <set_value name="$totalRejected" exact="if $totalRejectedTemp? and $totalRejectedTemp != null then $totalRejectedTemp else 0"/>
            
            <set_value name="$tradesRejectedDockingTemp" exact="@$lastRejectionStats.$Docking"/>
            <set_value name="$tradesRejectedDocking" exact="if $tradesRejectedDockingTemp? and $tradesRejectedDockingTemp != null then $tradesRejectedDockingTemp else 0"/>
            
            <set_value name="$tradesRejectedProfitTemp" exact="@$lastRejectionStats.$Profit"/>
            <set_value name="$tradesRejectedProfit" exact="if $tradesRejectedProfitTemp? and $tradesRejectedProfitTemp != null then $tradesRejectedProfitTemp else 0"/>
            
            <set_value name="$tradesRejectedAmountTemp" exact="@$lastRejectionStats.$Amount"/>
            <set_value name="$tradesRejectedAmount" exact="if $tradesRejectedAmountTemp? and $tradesRejectedAmountTemp != null then $tradesRejectedAmountTemp else 0"/>
            
            <set_value name="$tradesRejectedBlacklistTemp" exact="@$lastRejectionStats.$Blacklist"/>
            <set_value name="$tradesRejectedBlacklist" exact="if $tradesRejectedBlacklistTemp? and $tradesRejectedBlacklistTemp != null then $tradesRejectedBlacklistTemp else 0"/>
            
            <set_value name="$sectorNameTemp" exact="@$lastRejectionStats.$SectorName"/>
            <do_if value="$sectorNameTemp? and $sectorNameTemp != null and $sectorNameTemp != ''">
              <set_value name="$sectorName" exact="$sectorNameTemp"/>
            </do_if>
            <do_else>
              <!-- Fallback: Get current sector name directly from ship -->
              <set_value name="$sectorName" exact="@this.ship.sector.knownname"/>
            </do_else>
            
            <set_value name="$maxDistanceTemp" exact="@$lastRejectionStats.$MaxDistance"/>
            <do_if value="$maxDistanceTemp? and $maxDistanceTemp != null">
              <set_value name="$maxDistance" exact="$maxDistanceTemp"/>
            </do_if>
            <do_else>
              <set_value name="$maxDistance" exact="10"/>
            </do_else>
            
            <set_value name="$minAbsoluteProfitTemp" exact="@$lastRejectionStats.$MinAbsoluteProfit"/>
            <do_if value="$minAbsoluteProfitTemp? and $minAbsoluteProfitTemp != null">
              <set_value name="$minAbsoluteProfit" exact="$minAbsoluteProfitTemp"/>
            </do_if>
            <do_else>
              <set_value name="$minAbsoluteProfit" exact="100"/>
            </do_else>
          </do_if>
          <do_else>
            <!-- No rejection stats available - use defaults and get current sector as fallback -->
            <set_value name="$sectorName" exact="@this.ship.sector.knownname"/>
            <set_value name="$maxDistance" exact="10"/>
            <set_value name="$minAbsoluteProfit" exact="100"/>
          </do_else>
          
          <!-- Final safety check: Ensure sector name is not null -->
          <do_if value="not $sectorName? or $sectorName == null or $sectorName == ''">
            <set_value name="$sectorName" exact="@this.ship.sector.knownname"/>
            <do_if value="not $sectorName? or $sectorName == null or $sectorName == ''">
              <set_value name="$sectorName" exact="'Unknown Sector'"/>
            </do_if>
          </do_if>
          
          <!-- ✅ DEBUG: Log the logbook message data before generating -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📝 LOGBOOK MESSAGE DATA (No Trades Found):' +
            '\n  SectorName: ' + (if $sectorName? and $sectorName != null then $sectorName else 'null') +
            '\n  MaxDistance: ' + $maxDistance +
            '\n  MinAbsoluteProfit: ' + ($minAbsoluteProfit/100) + ' Cr' +
            '\n  TotalRejected: ' + $totalRejected +
            '\n  RejectedDocking: ' + $tradesRejectedDocking +
            '\n  RejectedProfit: ' + $tradesRejectedProfit +
            '\n  RejectedAmount: ' + $tradesRejectedAmount +
            '\n  RejectedBlacklist: ' + $tradesRejectedBlacklist +
            '\n  LastRejectionStats exists: ' + (if $lastRejectionStats? then 'yes' else 'no')" 
            chance="100"/>
          
          <set_value name="$message" exact="{77000,3208}.[$sectorName,$maxDistance,($minAbsoluteProfit/100),$totalRejected,$tradesRejectedDocking,$tradesRejectedProfit,$tradesRejectedAmount,$tradesRejectedBlacklist]"/>
          
          <!-- ✅ DEBUG: Log the generated message -->
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 📝 GENERATED LOGBOOK MESSAGE:' +
            '\n' + $message" 
            chance="100"/>
          
          <write_to_logbook 
            category="upkeep" 
            title="'No Trades Available: ' + this.ship.knownname" 
            text="$message"
            interaction="showonmap" 
            object="this.ship"/>
          
          <!-- Mark that we've written a logbook entry now -->
          <set_value name="this.$lastLogbookEntryTime" exact="player.age"/>
        </do_if>
      </do_if>
      
      <!-- Reset command state and resume search -->
      <set_command command="command.searchtrades"/>
      <set_command_action commandaction="commandaction.searchingtrades"/>
      
      <!-- Resume main trading loop -->
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': 🔄 Resuming main_loop label'" chance="100"/>
      <resume label="main_loop"/>
      
      <!-- ========================================= -->
      <!-- AUTO-REPAIR HANDLING                     -->
      <!-- ========================================= -->
      <label name="start_repair"/>
      
      <!-- Retrieve repair destination from global data -->
      <set_value name="$repairStation" exact="global.$GT_AutoRepair.{this.ship}.$Station"/>
      
      <do_if value="$repairStation and $repairStation.exists">
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Hull at ' + this.ship.hullpercentage + '% - going for repairs at ' + $repairStation.knownname" chance="$debugchance"/>
        
        <!-- Set repair command state -->
        <set_command command="command.repair"/>
        <set_command_action commandaction="commandaction.calculating"/>
        
        <!-- Create repair order -->
        <create_order object="this.ship" id="'Repair'" immediate="true">
          <param name="destination" value="$repairStation"/>
          <param name="repairall" value="true"/>
        </create_order>
        
        <!-- Wait for repair completion -->
        <set_value name="$repairComplete" exact="false"/>
        <wait max="3600s">
          <interrupt>
            <conditions>
              <event_object_signalled object="this.ship" param="'GT_RepairCompleted'"/>
            </conditions>
            <actions>
              <set_value name="$repairComplete" exact="true"/>
              <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Repairs completed (hull now at ' + this.ship.hullpercentage + '%) - resuming trading'" chance="$debugchance"/>
            </actions>
          </interrupt>
        </wait>
        
        <!-- Check if we timed out -->
        <do_if value="not $repairComplete">
          <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Repair timeout after 1 hour - resuming trading anyway'" chance="$debugchance"/>
        </do_if>
        
        <!-- Clean up repair tracking -->
        <do_if value="global.$GT_AutoRepair.{this.ship}?">
          <remove_value name="global.$GT_AutoRepair.{this.ship}"/>
        </do_if>
        
        <!-- Reset search failure counter since we're starting fresh -->
        <set_value name="this.$searchFailed" exact="0"/>
      </do_if>
      <do_else>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Repair station not found or no longer exists - resuming trading'" chance="$debugchance"/>
      </do_else>
      
      <!-- Resume normal trading loop -->
      <resume label="main_loop"/>
      
      <!-- ========================================================================= -->
      <!-- CARGO SAFETY HANDLERS (In-Parallel Monitoring)                           -->
      <!-- These run in parallel with main trading loop via interrupt-based waits   -->
      <!-- ========================================================================= -->
      
      <!-- ========================================================================= -->
      <!-- DEAD CODE REMOVED: Emergency/Alternative Cargo & Threat Handlers         -->
      <!-- These complex systems were replaced with simple inline cargo check        -->
      <!-- Current implementation: Cargo check at line ~844 sends GT_Find_Sell      -->
      <!-- Threat handler now in interrupt section at lines ~917-941                -->
      <!-- ========================================================================= -->
      
    </actions>
  </attention>
  
  <on_abort>
    <!-- Enhanced cleanup when order is aborted/replaced -->
    <!-- CRITICAL FIX: Preserve pilot XP data when order is manually replaced by player -->
    <!-- Only completely wipe data in genuine cleanup scenarios (ship destroyed, pilot changed, etc.) -->
    <set_value name="$isActivelyTrading" exact="false"/>
    <set_value name="$isTrainingTransition" exact="false"/>
    
    <!-- Clean up resupply tracking if order aborted mid-resupply -->
    <do_if value="global.$GT_ResupplyOrders? and global.$GT_ResupplyOrders.{this.ship}?">
      <remove_value name="global.$GT_ResupplyOrders.{this.ship}"/>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Cleaned up resupply tracking on order abort'" chance="100"/>
    </do_if>
    
    <!-- Check if ship has active TradePerform orders -->
    <do_if value="this.ship.orders.count gt 1">
      <do_all exact="this.ship.orders.count" counter="$i">
        <do_if value="this.ship.orders.{$i}.id == 'TradePerform'">
          <set_value name="$isActivelyTrading" exact="true"/>
          <break/>
        </do_if>
      </do_all>
    </do_if>
    
    <!-- Check if a training order was recently created (within last 5 seconds) -->
    <do_if value="this.$training_order_created? and (player.age - this.$training_order_created) lt 5s">
      <set_value name="$isTrainingTransition" exact="true"/>
    </do_if>
    
    <!-- Also check the flag-based detection -->
    <do_if value="this.$training_transition?">
      <set_value name="$isTrainingTransition" exact="true"/>
    </do_if>
    
    <!-- Check if a maintenance order was recently created (repair/resupply) -->
    <set_value name="$isMaintenanceTransition" exact="false"/>
    <do_if value="this.$maintenance_transition?">
      <set_value name="$isMaintenanceTransition" exact="true"/>
    </do_if>
    
    <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Order terminating (actively trading: ' + $isActivelyTrading + ', training transition: ' + $isTrainingTransition + ', maintenance transition: ' + $isMaintenanceTransition + ')'" chance="100"/>
    
    <!-- Check if subordinate cleanup already sent signal (to avoid duplicate) -->
    <do_if value="this.$subordinate_cleanup_sent?">
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Subordinate cleanup signal already sent - skipping duplicate'" chance="100"/>
    </do_if>
    <!-- Only send cleanup signal if NOT actively trading AND NOT transitioning to training/maintenance -->
    <do_elseif value="not $isActivelyTrading and not $isTrainingTransition and not $isMaintenanceTransition">
      <!-- SMART DETECTION: Check if order was permanently removed or temporarily replaced -->
      <set_value name="$currentDefaultOrder" exact="@this.ship.defaultorder.id"/>
      <set_value name="$isPermanentRemoval" exact="false"/>
      
      <do_if value="not $currentDefaultOrder">
        <!-- No default order at all → PERMANENT REMOVAL -->
        <set_value name="$isPermanentRemoval" exact="true"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': No default order detected → PERMANENT REMOVAL'" chance="100"/>
      </do_if>
      <do_elseif value="$currentDefaultOrder and $currentDefaultOrder != 'GalaxyTraderMK3' and $currentDefaultOrder != 'Assist'">
        <!-- Ship has a DIFFERENT permanent default order → PERMANENT REMOVAL -->
        <set_value name="$isPermanentRemoval" exact="true"/>
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Different default order (' + $currentDefaultOrder + ') detected → PERMANENT REMOVAL'" chance="100"/>
      </do_elseif>
      
      <!-- Send appropriate signal based on removal type -->
      <do_if value="$isPermanentRemoval">
        <!-- Send ABORT signal: Restore ship name and clean up completely -->
        <set_value name="$abortData" exact="table[
          $Ship = this.ship,
          $Pilot = this.ship.pilot,
          $Reason = 'Order permanently removed by player',
          $OriginalName = null
        ]"/>
        
        <!-- Try to get original name from pilot registry -->
        <do_if value="this.ship.pilot and global.$GT_Pilots.{this.ship.pilot}? and global.$GT_Pilots.{this.ship.pilot}.$OriginalShipName?">
          <set_value name="$abortData.$OriginalName" exact="global.$GT_Pilots.{this.ship.pilot}.$OriginalShipName"/>
        </do_if>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Sending ABORT signal (restore name, preserve XP)'" chance="100"/>
        <signal_objects object="player.galaxy" param="'GT_Ship_Order_Aborted'" param2="$abortData"/>
      </do_if>
      <do_else>
        <!-- Send PAUSE signal: Preserve everything (name and XP) for potential resume -->
        <set_value name="$pauseData" exact="table[
          $Ship = this.ship,
          $Pilot = this.ship.pilot,
          $Reason = 'Order temporarily replaced - preserving pilot data',
          $PreserveData = true
        ]"/>
        
        <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Sending PAUSE signal (preserve everything for resume)'" chance="100"/>
        <signal_objects object="player.galaxy" param="'GT_Ship_Order_Paused'" param2="$pauseData"/>
      </do_else>
      
      <!-- Clear training and maintenance flags -->
      <remove_value name="this.$training_in_progress"/>
      <remove_value name="this.$training_order_created"/>
      <remove_value name="this.$training_transition"/>
      <remove_value name="this.$maintenance_transition"/>
    </do_elseif>
    <do_else>
      <debug_text text="'[GT-AI] ' + this.ship.idcode + ': Ship still actively trading/training or subordinate cleanup already sent - NOT sending signals'" chance="100"/>
    </do_else>
  </on_abort>
  
</aiscript> 